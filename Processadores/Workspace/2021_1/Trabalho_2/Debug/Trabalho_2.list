
Trabalho_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002228  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e0  080024e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080024e0  080024e0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e0  080024e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080024e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002558  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002558  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045ad  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000113b  00000000  00000000  00024646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  00025788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00025bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164d3  00000000  00000000  00025f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005036  00000000  00000000  0003c453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da23  00000000  00000000  00041489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000beeac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a0  00000000  00000000  000bef00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800231c 	.word	0x0800231c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800231c 	.word	0x0800231c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b097      	sub	sp, #92	; 0x5c
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcff 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 fa61 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa9b 	bl	8000694 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  char teclado[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'c','0','=','+'}};
 800015e:	4bd0      	ldr	r3, [pc, #832]	; (80004a0 <main+0x354>)
 8000160:	f107 0414 	add.w	r4, r7, #20
 8000164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char tecla_pres = '$';
 800016a:	2324      	movs	r3, #36	; 0x24
 800016c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  char num_calc[5],res[8];
  char op;
  int calc,num_a, num_b;
  uint8_t num_calc_i;

  lcd_init(cursor_aceso);
 8000170:	200e      	movs	r0, #14
 8000172:	f000 fba9 	bl	80008c8 <lcd_init>
  lcd_goto(0,0);
 8000176:	2100      	movs	r1, #0
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fbce 	bl	800091a <lcd_goto>
  lcd_wrstr("LAB. PROCESSADOR");
 800017e:	48c9      	ldr	r0, [pc, #804]	; (80004a4 <main+0x358>)
 8000180:	f000 fbf5 	bl	800096e <lcd_wrstr>
  lcd_goto(0,1);
 8000184:	2101      	movs	r1, #1
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fbc7 	bl	800091a <lcd_goto>
  lcd_wrstr("MIGUEL & OTAVIO");
 800018c:	48c6      	ldr	r0, [pc, #792]	; (80004a8 <main+0x35c>)
 800018e:	f000 fbee 	bl	800096e <lcd_wrstr>
  HAL_Delay(5000); //DEIXAR 5000
 8000192:	f241 3088 	movw	r0, #5000	; 0x1388
 8000196:	f000 fd3f 	bl	8000c18 <HAL_Delay>

  lcd_default();
 800019a:	f000 fbfd 	bl	8000998 <lcd_default>

  op = 0;
 800019e:	2300      	movs	r3, #0
 80001a0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  num_calc_i=num_a=num_b=0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	627b      	str	r3, [r7, #36]	; 0x24
 80001a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80001ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80001ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=10; i<14; i++){
 80001b2:	230a      	movs	r3, #10
 80001b4:	647b      	str	r3, [r7, #68]	; 0x44
 80001b6:	e062      	b.n	800027e <main+0x132>
		  HAL_Delay(10);
 80001b8:	200a      	movs	r0, #10
 80001ba:	f000 fd2d 	bl	8000c18 <HAL_Delay>
		  GPIOA->BSRR = (1 << i);
 80001be:	2201      	movs	r2, #1
 80001c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80001c2:	409a      	lsls	r2, r3
 80001c4:	4bb9      	ldr	r3, [pc, #740]	; (80004ac <main+0x360>)
 80001c6:	611a      	str	r2, [r3, #16]

		  for(int j=6; j<10; j++){
 80001c8:	2306      	movs	r3, #6
 80001ca:	643b      	str	r3, [r7, #64]	; 0x40
 80001cc:	e049      	b.n	8000262 <main+0x116>
			  if(GPIOA->IDR & (1<<j)){
 80001ce:	4bb7      	ldr	r3, [pc, #732]	; (80004ac <main+0x360>)
 80001d0:	689b      	ldr	r3, [r3, #8]
 80001d2:	2101      	movs	r1, #1
 80001d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80001d6:	fa01 f202 	lsl.w	r2, r1, r2
 80001da:	4013      	ands	r3, r2
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d033      	beq.n	8000248 <main+0xfc>
				  if(op == '='){
 80001e0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80001e4:	2b3d      	cmp	r3, #61	; 0x3d
 80001e6:	d122      	bne.n	800022e <main+0xe2>

					  lcd_default();
 80001e8:	f000 fbd6 	bl	8000998 <lcd_default>
					  tecla_pres = '$';
 80001ec:	2324      	movs	r3, #36	; 0x24
 80001ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					  for(int i=0; i<9; i++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80001f6:	e00d      	b.n	8000214 <main+0xc8>
						  num_calc[i]=0;
 80001f8:	f107 020c 	add.w	r2, r7, #12
 80001fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001fe:	4413      	add	r3, r2
 8000200:	2200      	movs	r2, #0
 8000202:	701a      	strb	r2, [r3, #0]
						  res[i]=0;
 8000204:	1d3a      	adds	r2, r7, #4
 8000206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000208:	4413      	add	r3, r2
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
					  for(int i=0; i<9; i++){
 800020e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000210:	3301      	adds	r3, #1
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000216:	2b08      	cmp	r3, #8
 8000218:	ddee      	ble.n	80001f8 <main+0xac>
					  }
					  op = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
					  num_calc_i=num_b=num_a=0;
 8000220:	2300      	movs	r3, #0
 8000222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000226:	627b      	str	r3, [r7, #36]	; 0x24
 8000228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800022a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

				  }
				  tecla_pres = teclado[j-6][i-10];
 800022e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000230:	1f9a      	subs	r2, r3, #6
 8000232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000234:	3b0a      	subs	r3, #10
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800023c:	440a      	add	r2, r1
 800023e:	4413      	add	r3, r2
 8000240:	3b44      	subs	r3, #68	; 0x44
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			  }

			  while(GPIOA->IDR & (1<<j)){}
 8000248:	bf00      	nop
 800024a:	4b98      	ldr	r3, [pc, #608]	; (80004ac <main+0x360>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	2101      	movs	r1, #1
 8000250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	4013      	ands	r3, r2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d1f6      	bne.n	800024a <main+0xfe>
		  for(int j=6; j<10; j++){
 800025c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800025e:	3301      	adds	r3, #1
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
 8000262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000264:	2b09      	cmp	r3, #9
 8000266:	ddb2      	ble.n	80001ce <main+0x82>
		  	  }


		  HAL_Delay(10);
 8000268:	200a      	movs	r0, #10
 800026a:	f000 fcd5 	bl	8000c18 <HAL_Delay>
		  GPIOA->BRR = (1 << i);
 800026e:	2201      	movs	r2, #1
 8000270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000272:	409a      	lsls	r2, r3
 8000274:	4b8d      	ldr	r3, [pc, #564]	; (80004ac <main+0x360>)
 8000276:	615a      	str	r2, [r3, #20]
	  for(int i=10; i<14; i++){
 8000278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800027a:	3301      	adds	r3, #1
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
 800027e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000280:	2b0d      	cmp	r3, #13
 8000282:	dd99      	ble.n	80001b8 <main+0x6c>

	  }



	  if(tecla_pres != '$'){
 8000284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000288:	2b24      	cmp	r3, #36	; 0x24
 800028a:	d092      	beq.n	80001b2 <main+0x66>



		  switch(tecla_pres){
 800028c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000290:	3b2a      	subs	r3, #42	; 0x2a
 8000292:	2b39      	cmp	r3, #57	; 0x39
 8000294:	f200 81b7 	bhi.w	8000606 <main+0x4ba>
 8000298:	a201      	add	r2, pc, #4	; (adr r2, 80002a0 <main+0x154>)
 800029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029e:	bf00      	nop
 80002a0:	080003f3 	.word	0x080003f3
 80002a4:	08000477 	.word	0x08000477
 80002a8:	08000607 	.word	0x08000607
 80002ac:	08000435 	.word	0x08000435
 80002b0:	08000607 	.word	0x08000607
 80002b4:	080003b1 	.word	0x080003b1
 80002b8:	08000389 	.word	0x08000389
 80002bc:	08000389 	.word	0x08000389
 80002c0:	08000389 	.word	0x08000389
 80002c4:	08000389 	.word	0x08000389
 80002c8:	08000389 	.word	0x08000389
 80002cc:	08000389 	.word	0x08000389
 80002d0:	08000389 	.word	0x08000389
 80002d4:	08000389 	.word	0x08000389
 80002d8:	08000389 	.word	0x08000389
 80002dc:	08000389 	.word	0x08000389
 80002e0:	08000607 	.word	0x08000607
 80002e4:	08000607 	.word	0x08000607
 80002e8:	08000607 	.word	0x08000607
 80002ec:	080004cb 	.word	0x080004cb
 80002f0:	08000607 	.word	0x08000607
 80002f4:	08000607 	.word	0x08000607
 80002f8:	08000607 	.word	0x08000607
 80002fc:	08000607 	.word	0x08000607
 8000300:	08000607 	.word	0x08000607
 8000304:	08000607 	.word	0x08000607
 8000308:	08000607 	.word	0x08000607
 800030c:	08000607 	.word	0x08000607
 8000310:	08000607 	.word	0x08000607
 8000314:	08000607 	.word	0x08000607
 8000318:	08000607 	.word	0x08000607
 800031c:	08000607 	.word	0x08000607
 8000320:	08000607 	.word	0x08000607
 8000324:	08000607 	.word	0x08000607
 8000328:	08000607 	.word	0x08000607
 800032c:	08000607 	.word	0x08000607
 8000330:	08000607 	.word	0x08000607
 8000334:	08000607 	.word	0x08000607
 8000338:	08000607 	.word	0x08000607
 800033c:	08000607 	.word	0x08000607
 8000340:	08000607 	.word	0x08000607
 8000344:	08000607 	.word	0x08000607
 8000348:	08000607 	.word	0x08000607
 800034c:	08000607 	.word	0x08000607
 8000350:	08000607 	.word	0x08000607
 8000354:	08000607 	.word	0x08000607
 8000358:	08000607 	.word	0x08000607
 800035c:	08000607 	.word	0x08000607
 8000360:	08000607 	.word	0x08000607
 8000364:	08000607 	.word	0x08000607
 8000368:	08000607 	.word	0x08000607
 800036c:	08000607 	.word	0x08000607
 8000370:	08000607 	.word	0x08000607
 8000374:	08000607 	.word	0x08000607
 8000378:	08000607 	.word	0x08000607
 800037c:	08000607 	.word	0x08000607
 8000380:	08000607 	.word	0x08000607
 8000384:	080005bf 	.word	0x080005bf
			  case '0' ... '9':
			  	  lcd_wrchar(tecla_pres);
 8000388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800038c:	4618      	mov	r0, r3
 800038e:	f000 fa6b 	bl	8000868 <lcd_wrchar>
			  	  num_calc[num_calc_i] = tecla_pres;
 8000392:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000396:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800039a:	4413      	add	r3, r2
 800039c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80003a0:	f803 2c4c 	strb.w	r2, [r3, #-76]
			  	  num_calc_i++;
 80003a4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80003a8:	3301      	adds	r3, #1
 80003aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			  break;
 80003ae:	e12a      	b.n	8000606 <main+0x4ba>

			  case '/':
			  	  lcd_wrchar(tecla_pres);
 80003b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fa57 	bl	8000868 <lcd_wrchar>

			  	  op = '/';
 80003ba:	232f      	movs	r3, #47	; 0x2f
 80003bc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			  	  num_a = atoi(num_calc);
 80003c0:	f107 030c 	add.w	r3, r7, #12
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 faa9 	bl	800191c <atoi>
 80003ca:	64f8      	str	r0, [r7, #76]	; 0x4c
			  	  num_calc_i = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			  	  for(int i=0; i<6; i++) num_calc[i]=0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80003d6:	e008      	b.n	80003ea <main+0x29e>
 80003d8:	f107 020c 	add.w	r2, r7, #12
 80003dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003de:	4413      	add	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
 80003e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003e6:	3301      	adds	r3, #1
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80003ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003ec:	2b05      	cmp	r3, #5
 80003ee:	ddf3      	ble.n	80003d8 <main+0x28c>

			  break;
 80003f0:	e109      	b.n	8000606 <main+0x4ba>

			  case '*':
			  	  lcd_wrchar(tecla_pres);
 80003f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fa36 	bl	8000868 <lcd_wrchar>

			  	  op = '*';
 80003fc:	232a      	movs	r3, #42	; 0x2a
 80003fe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			  	  num_a = atoi(num_calc);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fa88 	bl	800191c <atoi>
 800040c:	64f8      	str	r0, [r7, #76]	; 0x4c
			  	  num_calc_i = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			  	  for(int i=0; i<6; i++) num_calc[i]=0;
 8000414:	2300      	movs	r3, #0
 8000416:	637b      	str	r3, [r7, #52]	; 0x34
 8000418:	e008      	b.n	800042c <main+0x2e0>
 800041a:	f107 020c 	add.w	r2, r7, #12
 800041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000420:	4413      	add	r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000428:	3301      	adds	r3, #1
 800042a:	637b      	str	r3, [r7, #52]	; 0x34
 800042c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800042e:	2b05      	cmp	r3, #5
 8000430:	ddf3      	ble.n	800041a <main+0x2ce>
			  break;
 8000432:	e0e8      	b.n	8000606 <main+0x4ba>

			  case '-':
			  	  lcd_wrchar(tecla_pres);
 8000434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fa15 	bl	8000868 <lcd_wrchar>
			  	  op = '-';
 800043e:	232d      	movs	r3, #45	; 0x2d
 8000440:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

			  	  num_a = atoi(num_calc);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4618      	mov	r0, r3
 800044a:	f001 fa67 	bl	800191c <atoi>
 800044e:	64f8      	str	r0, [r7, #76]	; 0x4c
			  	  num_calc_i = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			  	  for(int i=0; i<6; i++) num_calc[i]=0;
 8000456:	2300      	movs	r3, #0
 8000458:	633b      	str	r3, [r7, #48]	; 0x30
 800045a:	e008      	b.n	800046e <main+0x322>
 800045c:	f107 020c 	add.w	r2, r7, #12
 8000460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000462:	4413      	add	r3, r2
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
 8000468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046a:	3301      	adds	r3, #1
 800046c:	633b      	str	r3, [r7, #48]	; 0x30
 800046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000470:	2b05      	cmp	r3, #5
 8000472:	ddf3      	ble.n	800045c <main+0x310>
			  break;
 8000474:	e0c7      	b.n	8000606 <main+0x4ba>

			  case '+':
			  	  lcd_wrchar(tecla_pres);
 8000476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f9f4 	bl	8000868 <lcd_wrchar>

			  	  op = '+';
 8000480:	232b      	movs	r3, #43	; 0x2b
 8000482:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			  	  num_a = atoi(num_calc);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fa46 	bl	800191c <atoi>
 8000490:	64f8      	str	r0, [r7, #76]	; 0x4c
			  	  num_calc_i = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			  	  for(int i=0; i<6; i++) num_calc[i]=0;
 8000498:	2300      	movs	r3, #0
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800049c:	e011      	b.n	80004c2 <main+0x376>
 800049e:	bf00      	nop
 80004a0:	08002368 	.word	0x08002368
 80004a4:	08002334 	.word	0x08002334
 80004a8:	08002348 	.word	0x08002348
 80004ac:	40010800 	.word	0x40010800
 80004b0:	f107 020c 	add.w	r2, r7, #12
 80004b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b6:	4413      	add	r3, r2
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
 80004bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004be:	3301      	adds	r3, #1
 80004c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004c4:	2b05      	cmp	r3, #5
 80004c6:	ddf3      	ble.n	80004b0 <main+0x364>

			  break;
 80004c8:	e09d      	b.n	8000606 <main+0x4ba>

			  case '=':
				  num_b = atoi(num_calc);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fa24 	bl	800191c <atoi>
 80004d4:	6278      	str	r0, [r7, #36]	; 0x24

				  if(op == '+') calc = num_a + num_b;
 80004d6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80004da:	2b2b      	cmp	r3, #43	; 0x2b
 80004dc:	d103      	bne.n	80004e6 <main+0x39a>
 80004de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80004e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e2:	4413      	add	r3, r2
 80004e4:	653b      	str	r3, [r7, #80]	; 0x50
				  if(op == '-') calc = num_a - num_b;
 80004e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80004ea:	2b2d      	cmp	r3, #45	; 0x2d
 80004ec:	d103      	bne.n	80004f6 <main+0x3aa>
 80004ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80004f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	653b      	str	r3, [r7, #80]	; 0x50
				  if(op == '*') calc = num_a * num_b;
 80004f6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80004fa:	2b2a      	cmp	r3, #42	; 0x2a
 80004fc:	d104      	bne.n	8000508 <main+0x3bc>
 80004fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	653b      	str	r3, [r7, #80]	; 0x50
				  if(op == '/') {
 8000508:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800050c:	2b2f      	cmp	r3, #47	; 0x2f
 800050e:	d144      	bne.n	800059a <main+0x44e>
					  if(num_b == 0){
 8000510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000512:	2b00      	cmp	r3, #0
 8000514:	d110      	bne.n	8000538 <main+0x3ec>
						  lcd_goto(10,1);
 8000516:	2101      	movs	r1, #1
 8000518:	200a      	movs	r0, #10
 800051a:	f000 f9fe 	bl	800091a <lcd_goto>
						  sprintf(res,"NaN 0!");
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	493b      	ldr	r1, [pc, #236]	; (8000610 <main+0x4c4>)
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fa30 	bl	8001988 <siprintf>
						  lcd_wrstr(res);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fa1f 	bl	800096e <lcd_wrstr>
						  op = '=';
 8000530:	233d      	movs	r3, #61	; 0x3d
 8000532:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
						  break;
 8000536:	e066      	b.n	8000606 <main+0x4ba>

					  }

					  calc = num_a / num_b;
 8000538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000540:	653b      	str	r3, [r7, #80]	; 0x50

					  lcd_goto(10,1);
 8000542:	2101      	movs	r1, #1
 8000544:	200a      	movs	r0, #10
 8000546:	f000 f9e8 	bl	800091a <lcd_goto>
					  sprintf(res,"%d", (calc));
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800054e:	4931      	ldr	r1, [pc, #196]	; (8000614 <main+0x4c8>)
 8000550:	4618      	mov	r0, r3
 8000552:	f001 fa19 	bl	8001988 <siprintf>
					  lcd_wrstr(res);
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fa08 	bl	800096e <lcd_wrstr>

					  calc = ((num_a % num_b)*1000)/num_b;
 800055e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000562:	fb93 f2f2 	sdiv	r2, r3, r2
 8000566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000568:	fb01 f202 	mul.w	r2, r1, r2
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000572:	fb02 f203 	mul.w	r2, r2, r3
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	fb92 f3f3 	sdiv	r3, r2, r3
 800057c:	653b      	str	r3, [r7, #80]	; 0x50

					  sprintf(res,".%d", (calc));
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000582:	4925      	ldr	r1, [pc, #148]	; (8000618 <main+0x4cc>)
 8000584:	4618      	mov	r0, r3
 8000586:	f001 f9ff 	bl	8001988 <siprintf>
					  lcd_wrstr(res);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f9ee 	bl	800096e <lcd_wrstr>
					  op = '=';
 8000592:	233d      	movs	r3, #61	; 0x3d
 8000594:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
					  break;
 8000598:	e035      	b.n	8000606 <main+0x4ba>
				  }




				  lcd_goto(10,1);
 800059a:	2101      	movs	r1, #1
 800059c:	200a      	movs	r0, #10
 800059e:	f000 f9bc 	bl	800091a <lcd_goto>
				  sprintf(res,"%d", (calc));
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80005a6:	491b      	ldr	r1, [pc, #108]	; (8000614 <main+0x4c8>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 f9ed 	bl	8001988 <siprintf>
				  lcd_wrstr(res);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f9dc 	bl	800096e <lcd_wrstr>
				  op = '=';
 80005b6:	233d      	movs	r3, #61	; 0x3d
 80005b8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

			  break;
 80005bc:	e023      	b.n	8000606 <main+0x4ba>

			  case 'c':
				  lcd_default();
 80005be:	f000 f9eb 	bl	8000998 <lcd_default>


				  tecla_pres = '$';
 80005c2:	2324      	movs	r3, #36	; 0x24
 80005c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				  for(int i=0; i<9; i++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80005cc:	e00d      	b.n	80005ea <main+0x49e>
					  num_calc[i]=0;
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
					  res[i]=0;
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005de:	4413      	add	r3, r2
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
				  for(int i=0; i<9; i++){
 80005e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e6:	3301      	adds	r3, #1
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80005ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	ddee      	ble.n	80005ce <main+0x482>
				  }
				  op = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				  num_calc_i=num_b=num_a=0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			  break;
 8000604:	bf00      	nop

		  }

		  tecla_pres = '$';
 8000606:	2324      	movs	r3, #36	; 0x24
 8000608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  for(int i=10; i<14; i++){
 800060c:	e5d1      	b.n	80001b2 <main+0x66>
 800060e:	bf00      	nop
 8000610:	08002358 	.word	0x08002358
 8000614:	08002360 	.word	0x08002360
 8000618:	08002364 	.word	0x08002364

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f9a4 	bl	8001978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd7a 	bl	800114c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800065e:	f000 f9b7 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ffe6 	bl	800164c <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000686:	f000 f9a3 	bl	80009d0 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_GPIO_Init+0x78>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <MX_GPIO_Init+0x78>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_GPIO_Init+0x78>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006c0:	2200      	movs	r2, #0
 80006c2:	f643 413f 	movw	r1, #15423	; 0x3c3f
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <MX_GPIO_Init+0x7c>)
 80006c8:	f000 fd28 	bl	800111c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA10 PA11
                           PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006cc:	f643 433f 	movw	r3, #15423	; 0x3c3f
 80006d0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	4619      	mov	r1, r3
 80006e4:	480a      	ldr	r0, [pc, #40]	; (8000710 <MX_GPIO_Init+0x7c>)
 80006e6:	f000 fb9f 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80006ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_GPIO_Init+0x7c>)
 8000700:	f000 fb92 	bl	8000e28 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	40010800 	.word	0x40010800

08000714 <udelay>:

/* USER CODE BEGIN 4 */
void udelay(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	int tempo = 7;
 800071a:	2307      	movs	r3, #7
 800071c:	607b      	str	r3, [r7, #4]
	while(tempo--);
 800071e:	bf00      	nop
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1fa      	bne.n	8000720 <udelay+0xc>
}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <delayus>:

void delayus(int tempo)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
	while(tempo--) udelay();
 800073e:	e001      	b.n	8000744 <delayus+0xe>
 8000740:	f7ff ffe8 	bl	8000714 <udelay>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f8      	bne.n	8000740 <delayus+0xa>
}
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <lcd_send4bits>:
//						  bit1 --> D5 LCD
//						  bit2 --> D6 LCD
//						  bit3 --> D7 LCD

void lcd_send4bits(uint8_t dat)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	if((dat & (1<<0)) == 0) d4_0; else d4_1;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b00      	cmp	r3, #0
 800076a:	d103      	bne.n	8000774 <lcd_send4bits+0x1c>
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <lcd_send4bits+0x74>)
 800076e:	2204      	movs	r2, #4
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	e002      	b.n	800077a <lcd_send4bits+0x22>
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <lcd_send4bits+0x74>)
 8000776:	2204      	movs	r2, #4
 8000778:	611a      	str	r2, [r3, #16]
	if((dat & (1<<1)) == 0) d5_0; else d5_1;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	2b00      	cmp	r3, #0
 8000782:	d103      	bne.n	800078c <lcd_send4bits+0x34>
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <lcd_send4bits+0x74>)
 8000786:	2208      	movs	r2, #8
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	e002      	b.n	8000792 <lcd_send4bits+0x3a>
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <lcd_send4bits+0x74>)
 800078e:	2208      	movs	r2, #8
 8000790:	611a      	str	r2, [r3, #16]
	if((dat & (1<<2)) == 0) d6_0; else d6_1;
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	2b00      	cmp	r3, #0
 800079a:	d103      	bne.n	80007a4 <lcd_send4bits+0x4c>
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <lcd_send4bits+0x74>)
 800079e:	2210      	movs	r2, #16
 80007a0:	615a      	str	r2, [r3, #20]
 80007a2:	e002      	b.n	80007aa <lcd_send4bits+0x52>
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <lcd_send4bits+0x74>)
 80007a6:	2210      	movs	r2, #16
 80007a8:	611a      	str	r2, [r3, #16]
	if((dat & (1<<3)) == 0) d7_0; else d7_1;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d103      	bne.n	80007bc <lcd_send4bits+0x64>
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <lcd_send4bits+0x74>)
 80007b6:	2220      	movs	r2, #32
 80007b8:	615a      	str	r2, [r3, #20]

}
 80007ba:	e002      	b.n	80007c2 <lcd_send4bits+0x6a>
	if((dat & (1<<3)) == 0) d7_0; else d7_1;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <lcd_send4bits+0x74>)
 80007be:	2220      	movs	r2, #32
 80007c0:	611a      	str	r2, [r3, #16]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40010800 	.word	0x40010800

080007d0 <lcd_wrcom4>:

//Comando de 4 bits
void lcd_wrcom4(uint8_t com)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(com);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffbb 	bl	8000758 <lcd_send4bits>
	rs_0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <lcd_wrcom4+0x38>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	615a      	str	r2, [r3, #20]
	en_1;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <lcd_wrcom4+0x38>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	611a      	str	r2, [r3, #16]
	delayus(5);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f7ff ffa1 	bl	8000736 <delayus>
	en_0;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <lcd_wrcom4+0x38>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 80007fa:	2005      	movs	r0, #5
 80007fc:	f000 fa0c 	bl	8000c18 <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40010800 	.word	0x40010800

0800080c <lcd_wrcom>:

// Comando de 8 bits
// com D7...D4 D3 ... D0
void lcd_wrcom(uint8_t com)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(com>>4);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff9b 	bl	8000758 <lcd_send4bits>
	rs_0;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <lcd_wrcom+0x58>)
 8000824:	2202      	movs	r2, #2
 8000826:	615a      	str	r2, [r3, #20]
	en_1;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <lcd_wrcom+0x58>)
 800082a:	2201      	movs	r2, #1
 800082c:	611a      	str	r2, [r3, #16]
	delayus(5);
 800082e:	2005      	movs	r0, #5
 8000830:	f7ff ff81 	bl	8000736 <delayus>
	en_0;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <lcd_wrcom+0x58>)
 8000836:	2201      	movs	r2, #1
 8000838:	615a      	str	r2, [r3, #20]

	lcd_send4bits(com);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff8b 	bl	8000758 <lcd_send4bits>
	en_1;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <lcd_wrcom+0x58>)
 8000844:	2201      	movs	r2, #1
 8000846:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000848:	2005      	movs	r0, #5
 800084a:	f7ff ff74 	bl	8000736 <delayus>
	en_0;
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <lcd_wrcom+0x58>)
 8000850:	2201      	movs	r2, #1
 8000852:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 8000854:	2005      	movs	r0, #5
 8000856:	f000 f9df 	bl	8000c18 <HAL_Delay>


}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010800 	.word	0x40010800

08000868 <lcd_wrchar>:

void lcd_wrchar(char ch)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(ch>>4);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	091b      	lsrs	r3, r3, #4
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff6d 	bl	8000758 <lcd_send4bits>
	rs_1;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <lcd_wrchar+0x5c>)
 8000880:	2202      	movs	r2, #2
 8000882:	611a      	str	r2, [r3, #16]
	en_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <lcd_wrchar+0x5c>)
 8000886:	2201      	movs	r2, #1
 8000888:	611a      	str	r2, [r3, #16]
	delayus(5);
 800088a:	2005      	movs	r0, #5
 800088c:	f7ff ff53 	bl	8000736 <delayus>
	en_0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <lcd_wrchar+0x5c>)
 8000892:	2201      	movs	r2, #1
 8000894:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 8000896:	2005      	movs	r0, #5
 8000898:	f000 f9be 	bl	8000c18 <HAL_Delay>

	lcd_send4bits(ch);
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff5a 	bl	8000758 <lcd_send4bits>
	en_1;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <lcd_wrchar+0x5c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	611a      	str	r2, [r3, #16]
	delayus(5);
 80008aa:	2005      	movs	r0, #5
 80008ac:	f7ff ff43 	bl	8000736 <delayus>
	en_0;
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <lcd_wrchar+0x5c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 80008b6:	2005      	movs	r0, #5
 80008b8:	f000 f9ae 	bl	8000c18 <HAL_Delay>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800

080008c8 <lcd_init>:

void lcd_init(uint8_t cursor)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	lcd_wrcom4(3);
 80008d2:	2003      	movs	r0, #3
 80008d4:	f7ff ff7c 	bl	80007d0 <lcd_wrcom4>
	lcd_wrcom4(3);
 80008d8:	2003      	movs	r0, #3
 80008da:	f7ff ff79 	bl	80007d0 <lcd_wrcom4>
	lcd_wrcom4(3);
 80008de:	2003      	movs	r0, #3
 80008e0:	f7ff ff76 	bl	80007d0 <lcd_wrcom4>
	lcd_wrcom4(2);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f7ff ff73 	bl	80007d0 <lcd_wrcom4>

	lcd_wrcom(0x28);
 80008ea:	2028      	movs	r0, #40	; 0x28
 80008ec:	f7ff ff8e 	bl	800080c <lcd_wrcom>
	lcd_wrcom(cursor);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff8a 	bl	800080c <lcd_wrcom>
	lcd_wrcom(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f7ff ff87 	bl	800080c <lcd_wrcom>
	lcd_wrcom(0x01);
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff ff84 	bl	800080c <lcd_wrcom>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <lcd_clear>:

void lcd_clear (void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	lcd_wrcom(0x01);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff7b 	bl	800080c <lcd_wrcom>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <lcd_goto>:

void lcd_goto(uint8_t x, uint8_t y)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	460a      	mov	r2, r1
 8000924:	71fb      	strb	r3, [r7, #7]
 8000926:	4613      	mov	r3, r2
 8000928:	71bb      	strb	r3, [r7, #6]
	uint8_t com = 0x80;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	73fb      	strb	r3, [r7, #15]
	if(y==0) com = 0x80 + x;
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <lcd_goto+0x20>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	3b80      	subs	r3, #128	; 0x80
 8000938:	73fb      	strb	r3, [r7, #15]
	if(y==1) com = 0xC0 + x;
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d102      	bne.n	8000946 <lcd_goto+0x2c>
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	3b40      	subs	r3, #64	; 0x40
 8000944:	73fb      	strb	r3, [r7, #15]
	if(y==2) com = 0x90 + x;
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d102      	bne.n	8000952 <lcd_goto+0x38>
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	3b70      	subs	r3, #112	; 0x70
 8000950:	73fb      	strb	r3, [r7, #15]
	if(y==3) com = 0xD0 + x;
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d102      	bne.n	800095e <lcd_goto+0x44>
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	3b30      	subs	r3, #48	; 0x30
 800095c:	73fb      	strb	r3, [r7, #15]

	lcd_wrcom(com);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff53 	bl	800080c <lcd_wrcom>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <lcd_wrstr>:

void lcd_wrstr(char *str)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	while(*str) lcd_wrchar(*(str++));
 8000976:	e006      	b.n	8000986 <lcd_wrstr+0x18>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff71 	bl	8000868 <lcd_wrchar>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1f4      	bne.n	8000978 <lcd_wrstr+0xa>
}
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <lcd_default>:

void lcd_default(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0


	  lcd_clear ();
 800099c:	f7ff ffb6 	bl	800090c <lcd_clear>

	  lcd_goto(0,0);
 80009a0:	2100      	movs	r1, #0
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ffb9 	bl	800091a <lcd_goto>
	  lcd_wrstr("OP=> ");
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <lcd_default+0x30>)
 80009aa:	f7ff ffe0 	bl	800096e <lcd_wrstr>
	  lcd_goto(0,1);
 80009ae:	2101      	movs	r1, #1
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ffb2 	bl	800091a <lcd_goto>
	  lcd_wrstr("RESULTADO= ");
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <lcd_default+0x34>)
 80009b8:	f7ff ffd9 	bl	800096e <lcd_wrstr>

	  lcd_goto(5,0);
 80009bc:	2100      	movs	r1, #0
 80009be:	2005      	movs	r0, #5
 80009c0:	f7ff ffab 	bl	800091a <lcd_goto>

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	08002378 	.word	0x08002378
 80009cc:	08002380 	.word	0x08002380

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_MspInit+0x5c>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <HAL_MspInit+0x5c>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x5c>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x5c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x5c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_MspInit+0x60>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_MspInit+0x60>)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010000 	.word	0x40010000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a86:	f000 f8ab 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f000 ff30 	bl	8001924 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20002800 	.word	0x20002800
 8000af0:	00000400 	.word	0x00000400
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	200000b0 	.word	0x200000b0

08000afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b0a:	e003      	b.n	8000b14 <LoopCopyDataInit>

08000b0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b12:	3104      	adds	r1, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b1c:	d3f6      	bcc.n	8000b0c <CopyDataInit>
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b20:	e002      	b.n	8000b28 <LoopFillZerobss>

08000b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b24:	f842 3b04 	str.w	r3, [r2], #4

08000b28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b2c:	d3f9      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2e:	f7ff ffe5 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f000 fefd 	bl	8001930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fb09 	bl	800014c <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b3c:	080024e8 	.word	0x080024e8
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b44:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b48:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b4c:	200000ac 	.word	0x200000ac

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f92b 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff ff34 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f935 	bl	8000e0e <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f90b 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000098 	.word	0x20000098

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000098 	.word	0x20000098

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff90 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff49 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff5e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff90 	bl	8000d18 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5f 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffb0 	bl	8000d7c <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b08b      	sub	sp, #44	; 0x2c
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e148      	b.n	80010ce <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	f040 8137 	bne.w	80010c8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	4aa3      	ldr	r2, [pc, #652]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d05e      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e64:	4aa1      	ldr	r2, [pc, #644]	; (80010ec <HAL_GPIO_Init+0x2c4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d875      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e6a:	4aa1      	ldr	r2, [pc, #644]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d058      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e70:	4a9f      	ldr	r2, [pc, #636]	; (80010f0 <HAL_GPIO_Init+0x2c8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d86f      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e76:	4a9f      	ldr	r2, [pc, #636]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d052      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e7c:	4a9d      	ldr	r2, [pc, #628]	; (80010f4 <HAL_GPIO_Init+0x2cc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d869      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e82:	4a9d      	ldr	r2, [pc, #628]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d04c      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e88:	4a9b      	ldr	r2, [pc, #620]	; (80010f8 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d863      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a9b      	ldr	r2, [pc, #620]	; (80010fc <HAL_GPIO_Init+0x2d4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d046      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
 8000e94:	4a99      	ldr	r2, [pc, #612]	; (80010fc <HAL_GPIO_Init+0x2d4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d85d      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d82a      	bhi.n	8000ef4 <HAL_GPIO_Init+0xcc>
 8000e9e:	2b12      	cmp	r3, #18
 8000ea0:	d859      	bhi.n	8000f56 <HAL_GPIO_Init+0x12e>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <HAL_GPIO_Init+0x80>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000efd 	.word	0x08000efd
 8000eb0:	08000f0f 	.word	0x08000f0f
 8000eb4:	08000f51 	.word	0x08000f51
 8000eb8:	08000f57 	.word	0x08000f57
 8000ebc:	08000f57 	.word	0x08000f57
 8000ec0:	08000f57 	.word	0x08000f57
 8000ec4:	08000f57 	.word	0x08000f57
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f57 	.word	0x08000f57
 8000ed0:	08000f57 	.word	0x08000f57
 8000ed4:	08000f57 	.word	0x08000f57
 8000ed8:	08000f57 	.word	0x08000f57
 8000edc:	08000f57 	.word	0x08000f57
 8000ee0:	08000f57 	.word	0x08000f57
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000f57 	.word	0x08000f57
 8000eec:	08000f05 	.word	0x08000f05
 8000ef0:	08000f19 	.word	0x08000f19
 8000ef4:	4a82      	ldr	r2, [pc, #520]	; (8001100 <HAL_GPIO_Init+0x2d8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000efa:	e02c      	b.n	8000f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e029      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e024      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	3308      	adds	r3, #8
 8000f14:	623b      	str	r3, [r7, #32]
          break;
 8000f16:	e01f      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	330c      	adds	r3, #12
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e01a      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e013      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d105      	bne.n	8000f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	611a      	str	r2, [r3, #16]
          break;
 8000f42:	e009      	b.n	8000f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	615a      	str	r2, [r3, #20]
          break;
 8000f4e:	e003      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e000      	b.n	8000f58 <HAL_GPIO_Init+0x130>
          break;
 8000f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d801      	bhi.n	8000f62 <HAL_GPIO_Init+0x13a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <HAL_GPIO_Init+0x13e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3304      	adds	r3, #4
 8000f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d802      	bhi.n	8000f74 <HAL_GPIO_Init+0x14c>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x152>
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	3b08      	subs	r3, #8
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	210f      	movs	r1, #15
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	6a39      	ldr	r1, [r7, #32]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8090 	beq.w	80010c8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa8:	4b56      	ldr	r3, [pc, #344]	; (8001104 <HAL_GPIO_Init+0x2dc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a55      	ldr	r2, [pc, #340]	; (8001104 <HAL_GPIO_Init+0x2dc>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_GPIO_Init+0x2dc>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <HAL_GPIO_Init+0x2e0>)
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_GPIO_Init+0x2e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1e0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_GPIO_Init+0x2e8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1dc>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a47      	ldr	r2, [pc, #284]	; (8001114 <HAL_GPIO_Init+0x2ec>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1d8>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e004      	b.n	800100a <HAL_GPIO_Init+0x1e2>
 8001000:	2303      	movs	r3, #3
 8001002:	e002      	b.n	800100a <HAL_GPIO_Init+0x1e2>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_GPIO_Init+0x1e2>
 8001008:	2300      	movs	r3, #0
 800100a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100c:	f002 0203 	and.w	r2, r2, #3
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	4093      	lsls	r3, r2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4313      	orrs	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800101a:	493b      	ldr	r1, [pc, #236]	; (8001108 <HAL_GPIO_Init+0x2e0>)
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	4933      	ldr	r1, [pc, #204]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800104c:	4013      	ands	r3, r2
 800104e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	492d      	ldr	r1, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	43db      	mvns	r3, r3
 8001072:	4929      	ldr	r1, [pc, #164]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001074:	4013      	ands	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	4923      	ldr	r1, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	491f      	ldr	r1, [pc, #124]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 800109c:	4013      	ands	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4919      	ldr	r1, [pc, #100]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60cb      	str	r3, [r1, #12]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4915      	ldr	r1, [pc, #84]	; (8001118 <HAL_GPIO_Init+0x2f0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	3301      	adds	r3, #1
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f aeaf 	bne.w	8000e3c <HAL_GPIO_Init+0x14>
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	372c      	adds	r7, #44	; 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	10320000 	.word	0x10320000
 80010f0:	10310000 	.word	0x10310000
 80010f4:	10220000 	.word	0x10220000
 80010f8:	10210000 	.word	0x10210000
 80010fc:	10120000 	.word	0x10120000
 8001100:	10110000 	.word	0x10110000
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40011000 	.word	0x40011000
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	611a      	str	r2, [r3, #16]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e26c      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8087 	beq.w	800127a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800116c:	4b92      	ldr	r3, [pc, #584]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b04      	cmp	r3, #4
 8001176:	d00c      	beq.n	8001192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001178:	4b8f      	ldr	r3, [pc, #572]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d112      	bne.n	80011aa <HAL_RCC_OscConfig+0x5e>
 8001184:	4b8c      	ldr	r3, [pc, #560]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d10b      	bne.n	80011aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001192:	4b89      	ldr	r3, [pc, #548]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d06c      	beq.n	8001278 <HAL_RCC_OscConfig+0x12c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d168      	bne.n	8001278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e246      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x76>
 80011b4:	4b80      	ldr	r3, [pc, #512]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a7f      	ldr	r2, [pc, #508]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e02e      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x98>
 80011ca:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a7a      	ldr	r2, [pc, #488]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e01d      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d10c      	bne.n	8001208 <HAL_RCC_OscConfig+0xbc>
 80011ee:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a71      	ldr	r2, [pc, #452]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 8001208:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a6a      	ldr	r2, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800120e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a67      	ldr	r2, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcec 	bl	8000c04 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fce8 	bl	8000c04 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1fa      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b5d      	ldr	r3, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0xe4>
 800124e:	e014      	b.n	800127a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fcd8 	bl	8000c04 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fcd4 	bl	8000c04 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1e6      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x10c>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001286:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001292:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d11c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x18c>
 800129e:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d116      	bne.n	80012d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x176>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e1ba      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4939      	ldr	r1, [pc, #228]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d6:	e03a      	b.n	800134e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d020      	beq.n	8001322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fc8d 	bl	8000c04 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc89 	bl	8000c04 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e19b      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4927      	ldr	r1, [pc, #156]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x270>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fc6c 	bl	8000c04 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fc68 	bl	8000c04 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e17a      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d03a      	beq.n	80013d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d019      	beq.n	8001396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_RCC_OscConfig+0x274>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff fc4c 	bl	8000c04 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fc48 	bl	8000c04 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e15a      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f000 faa6 	bl	80018e0 <RCC_Delay>
 8001394:	e01c      	b.n	80013d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_RCC_OscConfig+0x274>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fc32 	bl	8000c04 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a2:	e00f      	b.n	80013c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc2e 	bl	8000c04 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d908      	bls.n	80013c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e140      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	42420000 	.word	0x42420000
 80013c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	4b9e      	ldr	r3, [pc, #632]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e9      	bne.n	80013a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80a6 	beq.w	800152a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b94      	ldr	r3, [pc, #592]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a93      	ldr	r2, [pc, #588]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b8e      	ldr	r3, [pc, #568]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001416:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a8a      	ldr	r2, [pc, #552]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fbef 	bl	8000c04 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fbeb 	bl	8000c04 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0fd      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	4b81      	ldr	r3, [pc, #516]	; (8001644 <HAL_RCC_OscConfig+0x4f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x312>
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a7a      	ldr	r2, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	e02d      	b.n	80014ba <HAL_RCC_OscConfig+0x36e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x334>
 8001466:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4a75      	ldr	r2, [pc, #468]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6213      	str	r3, [r2, #32]
 8001472:	4b73      	ldr	r3, [pc, #460]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a72      	ldr	r2, [pc, #456]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	e01c      	b.n	80014ba <HAL_RCC_OscConfig+0x36e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x356>
 8001488:	4b6d      	ldr	r3, [pc, #436]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a6c      	ldr	r2, [pc, #432]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a69      	ldr	r2, [pc, #420]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	e00b      	b.n	80014ba <HAL_RCC_OscConfig+0x36e>
 80014a2:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a66      	ldr	r2, [pc, #408]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb9f 	bl	8000c04 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fb9b 	bl	8000c04 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0ab      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	4b57      	ldr	r3, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ee      	beq.n	80014ca <HAL_RCC_OscConfig+0x37e>
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb89 	bl	8000c04 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb85 	bl	8000c04 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e095      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ee      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d105      	bne.n	800152a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a47      	ldr	r2, [pc, #284]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8081 	beq.w	8001636 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001534:	4b42      	ldr	r3, [pc, #264]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d061      	beq.n	8001604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d146      	bne.n	80015d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_OscConfig+0x4fc>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fb59 	bl	8000c04 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff fb55 	bl	8000c04 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e067      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d108      	bne.n	8001590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	492d      	ldr	r1, [pc, #180]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a19      	ldr	r1, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	430b      	orrs	r3, r1
 80015a2:	4927      	ldr	r1, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x4fc>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7ff fb29 	bl	8000c04 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b6:	f7ff fb25 	bl	8000c04 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e037      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f0      	beq.n	80015b6 <HAL_RCC_OscConfig+0x46a>
 80015d4:	e02f      	b.n	8001636 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_RCC_OscConfig+0x4fc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb12 	bl	8000c04 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff fb0e 	bl	8000c04 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e020      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x498>
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e013      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	429a      	cmp	r2, r3
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	42420060 	.word	0x42420060

0800164c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0d0      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d910      	bls.n	8001690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 0207 	bic.w	r2, r3, #7
 8001676:	4965      	ldr	r1, [pc, #404]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0b8      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a8:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	494d      	ldr	r1, [pc, #308]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d040      	beq.n	800176c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e07f      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d109      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e073      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e06b      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 0203 	bic.w	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	4936      	ldr	r1, [pc, #216]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800173c:	f7ff fa62 	bl	8000c04 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	e00a      	b.n	800175a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001744:	f7ff fa5e 	bl	8000c04 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e053      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 020c 	and.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	429a      	cmp	r2, r3
 800176a:	d1eb      	bne.n	8001744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800176c:	4b27      	ldr	r3, [pc, #156]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d210      	bcs.n	800179c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 0207 	bic.w	r2, r3, #7
 8001782:	4922      	ldr	r1, [pc, #136]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e032      	b.n	8001802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d008      	beq.n	80017ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017da:	f000 f821 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	490a      	ldr	r1, [pc, #40]	; (8001814 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	5ccb      	ldrb	r3, [r1, r3]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_RCC_ClockConfig+0x1cc>)
 80017f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1d0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f9c0 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000
 8001810:	40021000 	.word	0x40021000
 8001814:	0800239c 	.word	0x0800239c
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	b490      	push	{r4, r7}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001828:	1d3c      	adds	r4, r7, #4
 800182a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001830:	f240 2301 	movw	r3, #513	; 0x201
 8001834:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b04      	cmp	r3, #4
 8001858:	d002      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x40>
 800185a:	2b08      	cmp	r3, #8
 800185c:	d003      	beq.n	8001866 <HAL_RCC_GetSysClockFreq+0x46>
 800185e:	e02d      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001862:	623b      	str	r3, [r7, #32]
      break;
 8001864:	e02d      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001872:	4413      	add	r3, r2
 8001874:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001878:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0c5b      	lsrs	r3, r3, #17
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001892:	4413      	add	r3, r2
 8001894:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001898:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800189e:	fb02 f203 	mul.w	r2, r2, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
 80018aa:	e004      	b.n	80018b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	623b      	str	r3, [r7, #32]
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018be:	623b      	str	r3, [r7, #32]
      break;
 80018c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c2:	6a3b      	ldr	r3, [r7, #32]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc90      	pop	{r4, r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	0800238c 	.word	0x0800238c
 80018d4:	40021000 	.word	0x40021000
 80018d8:	007a1200 	.word	0x007a1200
 80018dc:	003d0900 	.word	0x003d0900

080018e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <RCC_Delay+0x34>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <RCC_Delay+0x38>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018fc:	bf00      	nop
  }
  while (Delay --);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	60fa      	str	r2, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f9      	bne.n	80018fc <RCC_Delay+0x1c>
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000000 	.word	0x20000000
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <atoi>:
 800191c:	220a      	movs	r2, #10
 800191e:	2100      	movs	r1, #0
 8001920:	f000 b8d8 	b.w	8001ad4 <strtol>

08001924 <__errno>:
 8001924:	4b01      	ldr	r3, [pc, #4]	; (800192c <__errno+0x8>)
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c

08001930 <__libc_init_array>:
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	2600      	movs	r6, #0
 8001934:	4d0c      	ldr	r5, [pc, #48]	; (8001968 <__libc_init_array+0x38>)
 8001936:	4c0d      	ldr	r4, [pc, #52]	; (800196c <__libc_init_array+0x3c>)
 8001938:	1b64      	subs	r4, r4, r5
 800193a:	10a4      	asrs	r4, r4, #2
 800193c:	42a6      	cmp	r6, r4
 800193e:	d109      	bne.n	8001954 <__libc_init_array+0x24>
 8001940:	f000 fcec 	bl	800231c <_init>
 8001944:	2600      	movs	r6, #0
 8001946:	4d0a      	ldr	r5, [pc, #40]	; (8001970 <__libc_init_array+0x40>)
 8001948:	4c0a      	ldr	r4, [pc, #40]	; (8001974 <__libc_init_array+0x44>)
 800194a:	1b64      	subs	r4, r4, r5
 800194c:	10a4      	asrs	r4, r4, #2
 800194e:	42a6      	cmp	r6, r4
 8001950:	d105      	bne.n	800195e <__libc_init_array+0x2e>
 8001952:	bd70      	pop	{r4, r5, r6, pc}
 8001954:	f855 3b04 	ldr.w	r3, [r5], #4
 8001958:	4798      	blx	r3
 800195a:	3601      	adds	r6, #1
 800195c:	e7ee      	b.n	800193c <__libc_init_array+0xc>
 800195e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001962:	4798      	blx	r3
 8001964:	3601      	adds	r6, #1
 8001966:	e7f2      	b.n	800194e <__libc_init_array+0x1e>
 8001968:	080024e0 	.word	0x080024e0
 800196c:	080024e0 	.word	0x080024e0
 8001970:	080024e0 	.word	0x080024e0
 8001974:	080024e4 	.word	0x080024e4

08001978 <memset>:
 8001978:	4603      	mov	r3, r0
 800197a:	4402      	add	r2, r0
 800197c:	4293      	cmp	r3, r2
 800197e:	d100      	bne.n	8001982 <memset+0xa>
 8001980:	4770      	bx	lr
 8001982:	f803 1b01 	strb.w	r1, [r3], #1
 8001986:	e7f9      	b.n	800197c <memset+0x4>

08001988 <siprintf>:
 8001988:	b40e      	push	{r1, r2, r3}
 800198a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800198e:	b500      	push	{lr}
 8001990:	b09c      	sub	sp, #112	; 0x70
 8001992:	ab1d      	add	r3, sp, #116	; 0x74
 8001994:	9002      	str	r0, [sp, #8]
 8001996:	9006      	str	r0, [sp, #24]
 8001998:	9107      	str	r1, [sp, #28]
 800199a:	9104      	str	r1, [sp, #16]
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <siprintf+0x38>)
 800199e:	4909      	ldr	r1, [pc, #36]	; (80019c4 <siprintf+0x3c>)
 80019a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80019a4:	9105      	str	r1, [sp, #20]
 80019a6:	6800      	ldr	r0, [r0, #0]
 80019a8:	a902      	add	r1, sp, #8
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	f000 f8f8 	bl	8001ba0 <_svfiprintf_r>
 80019b0:	2200      	movs	r2, #0
 80019b2:	9b02      	ldr	r3, [sp, #8]
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	b01c      	add	sp, #112	; 0x70
 80019b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80019bc:	b003      	add	sp, #12
 80019be:	4770      	bx	lr
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	ffff0208 	.word	0xffff0208

080019c8 <_strtol_l.isra.0>:
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ce:	4686      	mov	lr, r0
 80019d0:	d001      	beq.n	80019d6 <_strtol_l.isra.0+0xe>
 80019d2:	2b24      	cmp	r3, #36	; 0x24
 80019d4:	d906      	bls.n	80019e4 <_strtol_l.isra.0+0x1c>
 80019d6:	f7ff ffa5 	bl	8001924 <__errno>
 80019da:	2316      	movs	r3, #22
 80019dc:	6003      	str	r3, [r0, #0]
 80019de:	2000      	movs	r0, #0
 80019e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e4:	468c      	mov	ip, r1
 80019e6:	4e3a      	ldr	r6, [pc, #232]	; (8001ad0 <_strtol_l.isra.0+0x108>)
 80019e8:	4660      	mov	r0, ip
 80019ea:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80019ee:	5da5      	ldrb	r5, [r4, r6]
 80019f0:	f015 0508 	ands.w	r5, r5, #8
 80019f4:	d1f8      	bne.n	80019e8 <_strtol_l.isra.0+0x20>
 80019f6:	2c2d      	cmp	r4, #45	; 0x2d
 80019f8:	d133      	bne.n	8001a62 <_strtol_l.isra.0+0x9a>
 80019fa:	f04f 0801 	mov.w	r8, #1
 80019fe:	f89c 4000 	ldrb.w	r4, [ip]
 8001a02:	f100 0c02 	add.w	ip, r0, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d05d      	beq.n	8001ac6 <_strtol_l.isra.0+0xfe>
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d10c      	bne.n	8001a28 <_strtol_l.isra.0+0x60>
 8001a0e:	2c30      	cmp	r4, #48	; 0x30
 8001a10:	d10a      	bne.n	8001a28 <_strtol_l.isra.0+0x60>
 8001a12:	f89c 0000 	ldrb.w	r0, [ip]
 8001a16:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001a1a:	2858      	cmp	r0, #88	; 0x58
 8001a1c:	d14e      	bne.n	8001abc <_strtol_l.isra.0+0xf4>
 8001a1e:	2310      	movs	r3, #16
 8001a20:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8001a24:	f10c 0c02 	add.w	ip, ip, #2
 8001a28:	2500      	movs	r5, #0
 8001a2a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8001a2e:	3f01      	subs	r7, #1
 8001a30:	fbb7 f9f3 	udiv	r9, r7, r3
 8001a34:	4628      	mov	r0, r5
 8001a36:	fb03 7a19 	mls	sl, r3, r9, r7
 8001a3a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8001a3e:	2e09      	cmp	r6, #9
 8001a40:	d818      	bhi.n	8001a74 <_strtol_l.isra.0+0xac>
 8001a42:	4634      	mov	r4, r6
 8001a44:	42a3      	cmp	r3, r4
 8001a46:	dd24      	ble.n	8001a92 <_strtol_l.isra.0+0xca>
 8001a48:	2d00      	cmp	r5, #0
 8001a4a:	db1f      	blt.n	8001a8c <_strtol_l.isra.0+0xc4>
 8001a4c:	4581      	cmp	r9, r0
 8001a4e:	d31d      	bcc.n	8001a8c <_strtol_l.isra.0+0xc4>
 8001a50:	d101      	bne.n	8001a56 <_strtol_l.isra.0+0x8e>
 8001a52:	45a2      	cmp	sl, r4
 8001a54:	db1a      	blt.n	8001a8c <_strtol_l.isra.0+0xc4>
 8001a56:	2501      	movs	r5, #1
 8001a58:	fb00 4003 	mla	r0, r0, r3, r4
 8001a5c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8001a60:	e7eb      	b.n	8001a3a <_strtol_l.isra.0+0x72>
 8001a62:	2c2b      	cmp	r4, #43	; 0x2b
 8001a64:	bf08      	it	eq
 8001a66:	f89c 4000 	ldrbeq.w	r4, [ip]
 8001a6a:	46a8      	mov	r8, r5
 8001a6c:	bf08      	it	eq
 8001a6e:	f100 0c02 	addeq.w	ip, r0, #2
 8001a72:	e7c8      	b.n	8001a06 <_strtol_l.isra.0+0x3e>
 8001a74:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8001a78:	2e19      	cmp	r6, #25
 8001a7a:	d801      	bhi.n	8001a80 <_strtol_l.isra.0+0xb8>
 8001a7c:	3c37      	subs	r4, #55	; 0x37
 8001a7e:	e7e1      	b.n	8001a44 <_strtol_l.isra.0+0x7c>
 8001a80:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8001a84:	2e19      	cmp	r6, #25
 8001a86:	d804      	bhi.n	8001a92 <_strtol_l.isra.0+0xca>
 8001a88:	3c57      	subs	r4, #87	; 0x57
 8001a8a:	e7db      	b.n	8001a44 <_strtol_l.isra.0+0x7c>
 8001a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8001a90:	e7e4      	b.n	8001a5c <_strtol_l.isra.0+0x94>
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	da08      	bge.n	8001aa8 <_strtol_l.isra.0+0xe0>
 8001a96:	2322      	movs	r3, #34	; 0x22
 8001a98:	4638      	mov	r0, r7
 8001a9a:	f8ce 3000 	str.w	r3, [lr]
 8001a9e:	2a00      	cmp	r2, #0
 8001aa0:	d09e      	beq.n	80019e0 <_strtol_l.isra.0+0x18>
 8001aa2:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001aa6:	e007      	b.n	8001ab8 <_strtol_l.isra.0+0xf0>
 8001aa8:	f1b8 0f00 	cmp.w	r8, #0
 8001aac:	d000      	beq.n	8001ab0 <_strtol_l.isra.0+0xe8>
 8001aae:	4240      	negs	r0, r0
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d095      	beq.n	80019e0 <_strtol_l.isra.0+0x18>
 8001ab4:	2d00      	cmp	r5, #0
 8001ab6:	d1f4      	bne.n	8001aa2 <_strtol_l.isra.0+0xda>
 8001ab8:	6011      	str	r1, [r2, #0]
 8001aba:	e791      	b.n	80019e0 <_strtol_l.isra.0+0x18>
 8001abc:	2430      	movs	r4, #48	; 0x30
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1b2      	bne.n	8001a28 <_strtol_l.isra.0+0x60>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e7b0      	b.n	8001a28 <_strtol_l.isra.0+0x60>
 8001ac6:	2c30      	cmp	r4, #48	; 0x30
 8001ac8:	d0a3      	beq.n	8001a12 <_strtol_l.isra.0+0x4a>
 8001aca:	230a      	movs	r3, #10
 8001acc:	e7ac      	b.n	8001a28 <_strtol_l.isra.0+0x60>
 8001ace:	bf00      	nop
 8001ad0:	080023ad 	.word	0x080023ad

08001ad4 <strtol>:
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	4601      	mov	r1, r0
 8001ada:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <strtol+0x10>)
 8001adc:	6800      	ldr	r0, [r0, #0]
 8001ade:	f7ff bf73 	b.w	80019c8 <_strtol_l.isra.0>
 8001ae2:	bf00      	nop
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <__ssputs_r>:
 8001ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aec:	688e      	ldr	r6, [r1, #8]
 8001aee:	4682      	mov	sl, r0
 8001af0:	429e      	cmp	r6, r3
 8001af2:	460c      	mov	r4, r1
 8001af4:	4690      	mov	r8, r2
 8001af6:	461f      	mov	r7, r3
 8001af8:	d838      	bhi.n	8001b6c <__ssputs_r+0x84>
 8001afa:	898a      	ldrh	r2, [r1, #12]
 8001afc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b00:	d032      	beq.n	8001b68 <__ssputs_r+0x80>
 8001b02:	6825      	ldr	r5, [r4, #0]
 8001b04:	6909      	ldr	r1, [r1, #16]
 8001b06:	3301      	adds	r3, #1
 8001b08:	eba5 0901 	sub.w	r9, r5, r1
 8001b0c:	6965      	ldr	r5, [r4, #20]
 8001b0e:	444b      	add	r3, r9
 8001b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b18:	106d      	asrs	r5, r5, #1
 8001b1a:	429d      	cmp	r5, r3
 8001b1c:	bf38      	it	cc
 8001b1e:	461d      	movcc	r5, r3
 8001b20:	0553      	lsls	r3, r2, #21
 8001b22:	d531      	bpl.n	8001b88 <__ssputs_r+0xa0>
 8001b24:	4629      	mov	r1, r5
 8001b26:	f000 fb53 	bl	80021d0 <_malloc_r>
 8001b2a:	4606      	mov	r6, r0
 8001b2c:	b950      	cbnz	r0, 8001b44 <__ssputs_r+0x5c>
 8001b2e:	230c      	movs	r3, #12
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f8ca 3000 	str.w	r3, [sl]
 8001b38:	89a3      	ldrh	r3, [r4, #12]
 8001b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3e:	81a3      	strh	r3, [r4, #12]
 8001b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b44:	464a      	mov	r2, r9
 8001b46:	6921      	ldr	r1, [r4, #16]
 8001b48:	f000 face 	bl	80020e8 <memcpy>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b56:	81a3      	strh	r3, [r4, #12]
 8001b58:	6126      	str	r6, [r4, #16]
 8001b5a:	444e      	add	r6, r9
 8001b5c:	6026      	str	r6, [r4, #0]
 8001b5e:	463e      	mov	r6, r7
 8001b60:	6165      	str	r5, [r4, #20]
 8001b62:	eba5 0509 	sub.w	r5, r5, r9
 8001b66:	60a5      	str	r5, [r4, #8]
 8001b68:	42be      	cmp	r6, r7
 8001b6a:	d900      	bls.n	8001b6e <__ssputs_r+0x86>
 8001b6c:	463e      	mov	r6, r7
 8001b6e:	4632      	mov	r2, r6
 8001b70:	4641      	mov	r1, r8
 8001b72:	6820      	ldr	r0, [r4, #0]
 8001b74:	f000 fac6 	bl	8002104 <memmove>
 8001b78:	68a3      	ldr	r3, [r4, #8]
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	1b9b      	subs	r3, r3, r6
 8001b7e:	4432      	add	r2, r6
 8001b80:	2000      	movs	r0, #0
 8001b82:	60a3      	str	r3, [r4, #8]
 8001b84:	6022      	str	r2, [r4, #0]
 8001b86:	e7db      	b.n	8001b40 <__ssputs_r+0x58>
 8001b88:	462a      	mov	r2, r5
 8001b8a:	f000 fb7b 	bl	8002284 <_realloc_r>
 8001b8e:	4606      	mov	r6, r0
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d1e1      	bne.n	8001b58 <__ssputs_r+0x70>
 8001b94:	4650      	mov	r0, sl
 8001b96:	6921      	ldr	r1, [r4, #16]
 8001b98:	f000 face 	bl	8002138 <_free_r>
 8001b9c:	e7c7      	b.n	8001b2e <__ssputs_r+0x46>
	...

08001ba0 <_svfiprintf_r>:
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	898b      	ldrh	r3, [r1, #12]
 8001ba8:	4607      	mov	r7, r0
 8001baa:	061b      	lsls	r3, r3, #24
 8001bac:	460d      	mov	r5, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	b09d      	sub	sp, #116	; 0x74
 8001bb2:	d50e      	bpl.n	8001bd2 <_svfiprintf_r+0x32>
 8001bb4:	690b      	ldr	r3, [r1, #16]
 8001bb6:	b963      	cbnz	r3, 8001bd2 <_svfiprintf_r+0x32>
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	f000 fb09 	bl	80021d0 <_malloc_r>
 8001bbe:	6028      	str	r0, [r5, #0]
 8001bc0:	6128      	str	r0, [r5, #16]
 8001bc2:	b920      	cbnz	r0, 8001bce <_svfiprintf_r+0x2e>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	e0d1      	b.n	8001d72 <_svfiprintf_r+0x1d2>
 8001bce:	2340      	movs	r3, #64	; 0x40
 8001bd0:	616b      	str	r3, [r5, #20]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bdc:	2330      	movs	r3, #48	; 0x30
 8001bde:	f04f 0901 	mov.w	r9, #1
 8001be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001be6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001d8c <_svfiprintf_r+0x1ec>
 8001bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bee:	4623      	mov	r3, r4
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bf6:	b10a      	cbz	r2, 8001bfc <_svfiprintf_r+0x5c>
 8001bf8:	2a25      	cmp	r2, #37	; 0x25
 8001bfa:	d1f9      	bne.n	8001bf0 <_svfiprintf_r+0x50>
 8001bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8001c00:	d00b      	beq.n	8001c1a <_svfiprintf_r+0x7a>
 8001c02:	465b      	mov	r3, fp
 8001c04:	4622      	mov	r2, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	4638      	mov	r0, r7
 8001c0a:	f7ff ff6d 	bl	8001ae8 <__ssputs_r>
 8001c0e:	3001      	adds	r0, #1
 8001c10:	f000 80aa 	beq.w	8001d68 <_svfiprintf_r+0x1c8>
 8001c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c16:	445a      	add	r2, fp
 8001c18:	9209      	str	r2, [sp, #36]	; 0x24
 8001c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a2 	beq.w	8001d68 <_svfiprintf_r+0x1c8>
 8001c24:	2300      	movs	r3, #0
 8001c26:	f04f 32ff 	mov.w	r2, #4294967295
 8001c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c2e:	f10a 0a01 	add.w	sl, sl, #1
 8001c32:	9304      	str	r3, [sp, #16]
 8001c34:	9307      	str	r3, [sp, #28]
 8001c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8001c3c:	4654      	mov	r4, sl
 8001c3e:	2205      	movs	r2, #5
 8001c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c44:	4851      	ldr	r0, [pc, #324]	; (8001d8c <_svfiprintf_r+0x1ec>)
 8001c46:	f000 fa41 	bl	80020cc <memchr>
 8001c4a:	9a04      	ldr	r2, [sp, #16]
 8001c4c:	b9d8      	cbnz	r0, 8001c86 <_svfiprintf_r+0xe6>
 8001c4e:	06d0      	lsls	r0, r2, #27
 8001c50:	bf44      	itt	mi
 8001c52:	2320      	movmi	r3, #32
 8001c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c58:	0711      	lsls	r1, r2, #28
 8001c5a:	bf44      	itt	mi
 8001c5c:	232b      	movmi	r3, #43	; 0x2b
 8001c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c62:	f89a 3000 	ldrb.w	r3, [sl]
 8001c66:	2b2a      	cmp	r3, #42	; 0x2a
 8001c68:	d015      	beq.n	8001c96 <_svfiprintf_r+0xf6>
 8001c6a:	4654      	mov	r4, sl
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f04f 0c0a 	mov.w	ip, #10
 8001c72:	9a07      	ldr	r2, [sp, #28]
 8001c74:	4621      	mov	r1, r4
 8001c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c7a:	3b30      	subs	r3, #48	; 0x30
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d94e      	bls.n	8001d1e <_svfiprintf_r+0x17e>
 8001c80:	b1b0      	cbz	r0, 8001cb0 <_svfiprintf_r+0x110>
 8001c82:	9207      	str	r2, [sp, #28]
 8001c84:	e014      	b.n	8001cb0 <_svfiprintf_r+0x110>
 8001c86:	eba0 0308 	sub.w	r3, r0, r8
 8001c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	46a2      	mov	sl, r4
 8001c92:	9304      	str	r3, [sp, #16]
 8001c94:	e7d2      	b.n	8001c3c <_svfiprintf_r+0x9c>
 8001c96:	9b03      	ldr	r3, [sp, #12]
 8001c98:	1d19      	adds	r1, r3, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	9103      	str	r1, [sp, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bfbb      	ittet	lt
 8001ca2:	425b      	neglt	r3, r3
 8001ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8001ca8:	9307      	strge	r3, [sp, #28]
 8001caa:	9307      	strlt	r3, [sp, #28]
 8001cac:	bfb8      	it	lt
 8001cae:	9204      	strlt	r2, [sp, #16]
 8001cb0:	7823      	ldrb	r3, [r4, #0]
 8001cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8001cb4:	d10c      	bne.n	8001cd0 <_svfiprintf_r+0x130>
 8001cb6:	7863      	ldrb	r3, [r4, #1]
 8001cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8001cba:	d135      	bne.n	8001d28 <_svfiprintf_r+0x188>
 8001cbc:	9b03      	ldr	r3, [sp, #12]
 8001cbe:	3402      	adds	r4, #2
 8001cc0:	1d1a      	adds	r2, r3, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	9203      	str	r2, [sp, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bfb8      	it	lt
 8001cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cce:	9305      	str	r3, [sp, #20]
 8001cd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001d9c <_svfiprintf_r+0x1fc>
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4650      	mov	r0, sl
 8001cd8:	7821      	ldrb	r1, [r4, #0]
 8001cda:	f000 f9f7 	bl	80020cc <memchr>
 8001cde:	b140      	cbz	r0, 8001cf2 <_svfiprintf_r+0x152>
 8001ce0:	2340      	movs	r3, #64	; 0x40
 8001ce2:	eba0 000a 	sub.w	r0, r0, sl
 8001ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8001cea:	9b04      	ldr	r3, [sp, #16]
 8001cec:	3401      	adds	r4, #1
 8001cee:	4303      	orrs	r3, r0
 8001cf0:	9304      	str	r3, [sp, #16]
 8001cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf6:	2206      	movs	r2, #6
 8001cf8:	4825      	ldr	r0, [pc, #148]	; (8001d90 <_svfiprintf_r+0x1f0>)
 8001cfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cfe:	f000 f9e5 	bl	80020cc <memchr>
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d038      	beq.n	8001d78 <_svfiprintf_r+0x1d8>
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <_svfiprintf_r+0x1f4>)
 8001d08:	bb1b      	cbnz	r3, 8001d52 <_svfiprintf_r+0x1b2>
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	3307      	adds	r3, #7
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	3308      	adds	r3, #8
 8001d14:	9303      	str	r3, [sp, #12]
 8001d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d18:	4433      	add	r3, r6
 8001d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d1c:	e767      	b.n	8001bee <_svfiprintf_r+0x4e>
 8001d1e:	460c      	mov	r4, r1
 8001d20:	2001      	movs	r0, #1
 8001d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d26:	e7a5      	b.n	8001c74 <_svfiprintf_r+0xd4>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f04f 0c0a 	mov.w	ip, #10
 8001d2e:	4619      	mov	r1, r3
 8001d30:	3401      	adds	r4, #1
 8001d32:	9305      	str	r3, [sp, #20]
 8001d34:	4620      	mov	r0, r4
 8001d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d3a:	3a30      	subs	r2, #48	; 0x30
 8001d3c:	2a09      	cmp	r2, #9
 8001d3e:	d903      	bls.n	8001d48 <_svfiprintf_r+0x1a8>
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0c5      	beq.n	8001cd0 <_svfiprintf_r+0x130>
 8001d44:	9105      	str	r1, [sp, #20]
 8001d46:	e7c3      	b.n	8001cd0 <_svfiprintf_r+0x130>
 8001d48:	4604      	mov	r4, r0
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d50:	e7f0      	b.n	8001d34 <_svfiprintf_r+0x194>
 8001d52:	ab03      	add	r3, sp, #12
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	462a      	mov	r2, r5
 8001d58:	4638      	mov	r0, r7
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <_svfiprintf_r+0x1f8>)
 8001d5c:	a904      	add	r1, sp, #16
 8001d5e:	f3af 8000 	nop.w
 8001d62:	1c42      	adds	r2, r0, #1
 8001d64:	4606      	mov	r6, r0
 8001d66:	d1d6      	bne.n	8001d16 <_svfiprintf_r+0x176>
 8001d68:	89ab      	ldrh	r3, [r5, #12]
 8001d6a:	065b      	lsls	r3, r3, #25
 8001d6c:	f53f af2c 	bmi.w	8001bc8 <_svfiprintf_r+0x28>
 8001d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d72:	b01d      	add	sp, #116	; 0x74
 8001d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d78:	ab03      	add	r3, sp, #12
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	462a      	mov	r2, r5
 8001d7e:	4638      	mov	r0, r7
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <_svfiprintf_r+0x1f8>)
 8001d82:	a904      	add	r1, sp, #16
 8001d84:	f000 f87c 	bl	8001e80 <_printf_i>
 8001d88:	e7eb      	b.n	8001d62 <_svfiprintf_r+0x1c2>
 8001d8a:	bf00      	nop
 8001d8c:	080024ad 	.word	0x080024ad
 8001d90:	080024b7 	.word	0x080024b7
 8001d94:	00000000 	.word	0x00000000
 8001d98:	08001ae9 	.word	0x08001ae9
 8001d9c:	080024b3 	.word	0x080024b3

08001da0 <_printf_common>:
 8001da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001da4:	4616      	mov	r6, r2
 8001da6:	4699      	mov	r9, r3
 8001da8:	688a      	ldr	r2, [r1, #8]
 8001daa:	690b      	ldr	r3, [r1, #16]
 8001dac:	4607      	mov	r7, r0
 8001dae:	4293      	cmp	r3, r2
 8001db0:	bfb8      	it	lt
 8001db2:	4613      	movlt	r3, r2
 8001db4:	6033      	str	r3, [r6, #0]
 8001db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001dba:	460c      	mov	r4, r1
 8001dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dc0:	b10a      	cbz	r2, 8001dc6 <_printf_common+0x26>
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	6033      	str	r3, [r6, #0]
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	0699      	lsls	r1, r3, #26
 8001dca:	bf42      	ittt	mi
 8001dcc:	6833      	ldrmi	r3, [r6, #0]
 8001dce:	3302      	addmi	r3, #2
 8001dd0:	6033      	strmi	r3, [r6, #0]
 8001dd2:	6825      	ldr	r5, [r4, #0]
 8001dd4:	f015 0506 	ands.w	r5, r5, #6
 8001dd8:	d106      	bne.n	8001de8 <_printf_common+0x48>
 8001dda:	f104 0a19 	add.w	sl, r4, #25
 8001dde:	68e3      	ldr	r3, [r4, #12]
 8001de0:	6832      	ldr	r2, [r6, #0]
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	42ab      	cmp	r3, r5
 8001de6:	dc28      	bgt.n	8001e3a <_printf_common+0x9a>
 8001de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001dec:	1e13      	subs	r3, r2, #0
 8001dee:	6822      	ldr	r2, [r4, #0]
 8001df0:	bf18      	it	ne
 8001df2:	2301      	movne	r3, #1
 8001df4:	0692      	lsls	r2, r2, #26
 8001df6:	d42d      	bmi.n	8001e54 <_printf_common+0xb4>
 8001df8:	4649      	mov	r1, r9
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e00:	47c0      	blx	r8
 8001e02:	3001      	adds	r0, #1
 8001e04:	d020      	beq.n	8001e48 <_printf_common+0xa8>
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	68e5      	ldr	r5, [r4, #12]
 8001e0a:	f003 0306 	and.w	r3, r3, #6
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf18      	it	ne
 8001e12:	2500      	movne	r5, #0
 8001e14:	6832      	ldr	r2, [r6, #0]
 8001e16:	f04f 0600 	mov.w	r6, #0
 8001e1a:	68a3      	ldr	r3, [r4, #8]
 8001e1c:	bf08      	it	eq
 8001e1e:	1aad      	subeq	r5, r5, r2
 8001e20:	6922      	ldr	r2, [r4, #16]
 8001e22:	bf08      	it	eq
 8001e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bfc4      	itt	gt
 8001e2c:	1a9b      	subgt	r3, r3, r2
 8001e2e:	18ed      	addgt	r5, r5, r3
 8001e30:	341a      	adds	r4, #26
 8001e32:	42b5      	cmp	r5, r6
 8001e34:	d11a      	bne.n	8001e6c <_printf_common+0xcc>
 8001e36:	2000      	movs	r0, #0
 8001e38:	e008      	b.n	8001e4c <_printf_common+0xac>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4652      	mov	r2, sl
 8001e3e:	4649      	mov	r1, r9
 8001e40:	4638      	mov	r0, r7
 8001e42:	47c0      	blx	r8
 8001e44:	3001      	adds	r0, #1
 8001e46:	d103      	bne.n	8001e50 <_printf_common+0xb0>
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e50:	3501      	adds	r5, #1
 8001e52:	e7c4      	b.n	8001dde <_printf_common+0x3e>
 8001e54:	2030      	movs	r0, #48	; 0x30
 8001e56:	18e1      	adds	r1, r4, r3
 8001e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e62:	4422      	add	r2, r4
 8001e64:	3302      	adds	r3, #2
 8001e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e6a:	e7c5      	b.n	8001df8 <_printf_common+0x58>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	4622      	mov	r2, r4
 8001e70:	4649      	mov	r1, r9
 8001e72:	4638      	mov	r0, r7
 8001e74:	47c0      	blx	r8
 8001e76:	3001      	adds	r0, #1
 8001e78:	d0e6      	beq.n	8001e48 <_printf_common+0xa8>
 8001e7a:	3601      	adds	r6, #1
 8001e7c:	e7d9      	b.n	8001e32 <_printf_common+0x92>
	...

08001e80 <_printf_i>:
 8001e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e84:	460c      	mov	r4, r1
 8001e86:	7e27      	ldrb	r7, [r4, #24]
 8001e88:	4691      	mov	r9, r2
 8001e8a:	2f78      	cmp	r7, #120	; 0x78
 8001e8c:	4680      	mov	r8, r0
 8001e8e:	469a      	mov	sl, r3
 8001e90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e96:	d807      	bhi.n	8001ea8 <_printf_i+0x28>
 8001e98:	2f62      	cmp	r7, #98	; 0x62
 8001e9a:	d80a      	bhi.n	8001eb2 <_printf_i+0x32>
 8001e9c:	2f00      	cmp	r7, #0
 8001e9e:	f000 80d9 	beq.w	8002054 <_printf_i+0x1d4>
 8001ea2:	2f58      	cmp	r7, #88	; 0x58
 8001ea4:	f000 80a4 	beq.w	8001ff0 <_printf_i+0x170>
 8001ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001eb0:	e03a      	b.n	8001f28 <_printf_i+0xa8>
 8001eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001eb6:	2b15      	cmp	r3, #21
 8001eb8:	d8f6      	bhi.n	8001ea8 <_printf_i+0x28>
 8001eba:	a001      	add	r0, pc, #4	; (adr r0, 8001ec0 <_printf_i+0x40>)
 8001ebc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ec0:	08001f19 	.word	0x08001f19
 8001ec4:	08001f2d 	.word	0x08001f2d
 8001ec8:	08001ea9 	.word	0x08001ea9
 8001ecc:	08001ea9 	.word	0x08001ea9
 8001ed0:	08001ea9 	.word	0x08001ea9
 8001ed4:	08001ea9 	.word	0x08001ea9
 8001ed8:	08001f2d 	.word	0x08001f2d
 8001edc:	08001ea9 	.word	0x08001ea9
 8001ee0:	08001ea9 	.word	0x08001ea9
 8001ee4:	08001ea9 	.word	0x08001ea9
 8001ee8:	08001ea9 	.word	0x08001ea9
 8001eec:	0800203b 	.word	0x0800203b
 8001ef0:	08001f5d 	.word	0x08001f5d
 8001ef4:	0800201d 	.word	0x0800201d
 8001ef8:	08001ea9 	.word	0x08001ea9
 8001efc:	08001ea9 	.word	0x08001ea9
 8001f00:	0800205d 	.word	0x0800205d
 8001f04:	08001ea9 	.word	0x08001ea9
 8001f08:	08001f5d 	.word	0x08001f5d
 8001f0c:	08001ea9 	.word	0x08001ea9
 8001f10:	08001ea9 	.word	0x08001ea9
 8001f14:	08002025 	.word	0x08002025
 8001f18:	680b      	ldr	r3, [r1, #0]
 8001f1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f1e:	1d1a      	adds	r2, r3, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	600a      	str	r2, [r1, #0]
 8001f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0a4      	b.n	8002076 <_printf_i+0x1f6>
 8001f2c:	6825      	ldr	r5, [r4, #0]
 8001f2e:	6808      	ldr	r0, [r1, #0]
 8001f30:	062e      	lsls	r6, r5, #24
 8001f32:	f100 0304 	add.w	r3, r0, #4
 8001f36:	d50a      	bpl.n	8001f4e <_printf_i+0xce>
 8001f38:	6805      	ldr	r5, [r0, #0]
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	2d00      	cmp	r5, #0
 8001f3e:	da03      	bge.n	8001f48 <_printf_i+0xc8>
 8001f40:	232d      	movs	r3, #45	; 0x2d
 8001f42:	426d      	negs	r5, r5
 8001f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f48:	230a      	movs	r3, #10
 8001f4a:	485e      	ldr	r0, [pc, #376]	; (80020c4 <_printf_i+0x244>)
 8001f4c:	e019      	b.n	8001f82 <_printf_i+0x102>
 8001f4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f52:	6805      	ldr	r5, [r0, #0]
 8001f54:	600b      	str	r3, [r1, #0]
 8001f56:	bf18      	it	ne
 8001f58:	b22d      	sxthne	r5, r5
 8001f5a:	e7ef      	b.n	8001f3c <_printf_i+0xbc>
 8001f5c:	680b      	ldr	r3, [r1, #0]
 8001f5e:	6825      	ldr	r5, [r4, #0]
 8001f60:	1d18      	adds	r0, r3, #4
 8001f62:	6008      	str	r0, [r1, #0]
 8001f64:	0628      	lsls	r0, r5, #24
 8001f66:	d501      	bpl.n	8001f6c <_printf_i+0xec>
 8001f68:	681d      	ldr	r5, [r3, #0]
 8001f6a:	e002      	b.n	8001f72 <_printf_i+0xf2>
 8001f6c:	0669      	lsls	r1, r5, #25
 8001f6e:	d5fb      	bpl.n	8001f68 <_printf_i+0xe8>
 8001f70:	881d      	ldrh	r5, [r3, #0]
 8001f72:	2f6f      	cmp	r7, #111	; 0x6f
 8001f74:	bf0c      	ite	eq
 8001f76:	2308      	moveq	r3, #8
 8001f78:	230a      	movne	r3, #10
 8001f7a:	4852      	ldr	r0, [pc, #328]	; (80020c4 <_printf_i+0x244>)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f82:	6866      	ldr	r6, [r4, #4]
 8001f84:	2e00      	cmp	r6, #0
 8001f86:	bfa8      	it	ge
 8001f88:	6821      	ldrge	r1, [r4, #0]
 8001f8a:	60a6      	str	r6, [r4, #8]
 8001f8c:	bfa4      	itt	ge
 8001f8e:	f021 0104 	bicge.w	r1, r1, #4
 8001f92:	6021      	strge	r1, [r4, #0]
 8001f94:	b90d      	cbnz	r5, 8001f9a <_printf_i+0x11a>
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	d04d      	beq.n	8002036 <_printf_i+0x1b6>
 8001f9a:	4616      	mov	r6, r2
 8001f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8001fa4:	5dc7      	ldrb	r7, [r0, r7]
 8001fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001faa:	462f      	mov	r7, r5
 8001fac:	42bb      	cmp	r3, r7
 8001fae:	460d      	mov	r5, r1
 8001fb0:	d9f4      	bls.n	8001f9c <_printf_i+0x11c>
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d10b      	bne.n	8001fce <_printf_i+0x14e>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	07df      	lsls	r7, r3, #31
 8001fba:	d508      	bpl.n	8001fce <_printf_i+0x14e>
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	6861      	ldr	r1, [r4, #4]
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	bfde      	ittt	le
 8001fc4:	2330      	movle	r3, #48	; 0x30
 8001fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001fce:	1b92      	subs	r2, r2, r6
 8001fd0:	6122      	str	r2, [r4, #16]
 8001fd2:	464b      	mov	r3, r9
 8001fd4:	4621      	mov	r1, r4
 8001fd6:	4640      	mov	r0, r8
 8001fd8:	f8cd a000 	str.w	sl, [sp]
 8001fdc:	aa03      	add	r2, sp, #12
 8001fde:	f7ff fedf 	bl	8001da0 <_printf_common>
 8001fe2:	3001      	adds	r0, #1
 8001fe4:	d14c      	bne.n	8002080 <_printf_i+0x200>
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fea:	b004      	add	sp, #16
 8001fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ff0:	4834      	ldr	r0, [pc, #208]	; (80020c4 <_printf_i+0x244>)
 8001ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001ff6:	680e      	ldr	r6, [r1, #0]
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f856 5b04 	ldr.w	r5, [r6], #4
 8001ffe:	061f      	lsls	r7, r3, #24
 8002000:	600e      	str	r6, [r1, #0]
 8002002:	d514      	bpl.n	800202e <_printf_i+0x1ae>
 8002004:	07d9      	lsls	r1, r3, #31
 8002006:	bf44      	itt	mi
 8002008:	f043 0320 	orrmi.w	r3, r3, #32
 800200c:	6023      	strmi	r3, [r4, #0]
 800200e:	b91d      	cbnz	r5, 8002018 <_printf_i+0x198>
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	f023 0320 	bic.w	r3, r3, #32
 8002016:	6023      	str	r3, [r4, #0]
 8002018:	2310      	movs	r3, #16
 800201a:	e7af      	b.n	8001f7c <_printf_i+0xfc>
 800201c:	6823      	ldr	r3, [r4, #0]
 800201e:	f043 0320 	orr.w	r3, r3, #32
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	2378      	movs	r3, #120	; 0x78
 8002026:	4828      	ldr	r0, [pc, #160]	; (80020c8 <_printf_i+0x248>)
 8002028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800202c:	e7e3      	b.n	8001ff6 <_printf_i+0x176>
 800202e:	065e      	lsls	r6, r3, #25
 8002030:	bf48      	it	mi
 8002032:	b2ad      	uxthmi	r5, r5
 8002034:	e7e6      	b.n	8002004 <_printf_i+0x184>
 8002036:	4616      	mov	r6, r2
 8002038:	e7bb      	b.n	8001fb2 <_printf_i+0x132>
 800203a:	680b      	ldr	r3, [r1, #0]
 800203c:	6826      	ldr	r6, [r4, #0]
 800203e:	1d1d      	adds	r5, r3, #4
 8002040:	6960      	ldr	r0, [r4, #20]
 8002042:	600d      	str	r5, [r1, #0]
 8002044:	0635      	lsls	r5, r6, #24
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	d501      	bpl.n	800204e <_printf_i+0x1ce>
 800204a:	6018      	str	r0, [r3, #0]
 800204c:	e002      	b.n	8002054 <_printf_i+0x1d4>
 800204e:	0671      	lsls	r1, r6, #25
 8002050:	d5fb      	bpl.n	800204a <_printf_i+0x1ca>
 8002052:	8018      	strh	r0, [r3, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	4616      	mov	r6, r2
 8002058:	6123      	str	r3, [r4, #16]
 800205a:	e7ba      	b.n	8001fd2 <_printf_i+0x152>
 800205c:	680b      	ldr	r3, [r1, #0]
 800205e:	1d1a      	adds	r2, r3, #4
 8002060:	600a      	str	r2, [r1, #0]
 8002062:	681e      	ldr	r6, [r3, #0]
 8002064:	2100      	movs	r1, #0
 8002066:	4630      	mov	r0, r6
 8002068:	6862      	ldr	r2, [r4, #4]
 800206a:	f000 f82f 	bl	80020cc <memchr>
 800206e:	b108      	cbz	r0, 8002074 <_printf_i+0x1f4>
 8002070:	1b80      	subs	r0, r0, r6
 8002072:	6060      	str	r0, [r4, #4]
 8002074:	6863      	ldr	r3, [r4, #4]
 8002076:	6123      	str	r3, [r4, #16]
 8002078:	2300      	movs	r3, #0
 800207a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800207e:	e7a8      	b.n	8001fd2 <_printf_i+0x152>
 8002080:	4632      	mov	r2, r6
 8002082:	4649      	mov	r1, r9
 8002084:	4640      	mov	r0, r8
 8002086:	6923      	ldr	r3, [r4, #16]
 8002088:	47d0      	blx	sl
 800208a:	3001      	adds	r0, #1
 800208c:	d0ab      	beq.n	8001fe6 <_printf_i+0x166>
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	079b      	lsls	r3, r3, #30
 8002092:	d413      	bmi.n	80020bc <_printf_i+0x23c>
 8002094:	68e0      	ldr	r0, [r4, #12]
 8002096:	9b03      	ldr	r3, [sp, #12]
 8002098:	4298      	cmp	r0, r3
 800209a:	bfb8      	it	lt
 800209c:	4618      	movlt	r0, r3
 800209e:	e7a4      	b.n	8001fea <_printf_i+0x16a>
 80020a0:	2301      	movs	r3, #1
 80020a2:	4632      	mov	r2, r6
 80020a4:	4649      	mov	r1, r9
 80020a6:	4640      	mov	r0, r8
 80020a8:	47d0      	blx	sl
 80020aa:	3001      	adds	r0, #1
 80020ac:	d09b      	beq.n	8001fe6 <_printf_i+0x166>
 80020ae:	3501      	adds	r5, #1
 80020b0:	68e3      	ldr	r3, [r4, #12]
 80020b2:	9903      	ldr	r1, [sp, #12]
 80020b4:	1a5b      	subs	r3, r3, r1
 80020b6:	42ab      	cmp	r3, r5
 80020b8:	dcf2      	bgt.n	80020a0 <_printf_i+0x220>
 80020ba:	e7eb      	b.n	8002094 <_printf_i+0x214>
 80020bc:	2500      	movs	r5, #0
 80020be:	f104 0619 	add.w	r6, r4, #25
 80020c2:	e7f5      	b.n	80020b0 <_printf_i+0x230>
 80020c4:	080024be 	.word	0x080024be
 80020c8:	080024cf 	.word	0x080024cf

080020cc <memchr>:
 80020cc:	4603      	mov	r3, r0
 80020ce:	b510      	push	{r4, lr}
 80020d0:	b2c9      	uxtb	r1, r1
 80020d2:	4402      	add	r2, r0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	d101      	bne.n	80020de <memchr+0x12>
 80020da:	2000      	movs	r0, #0
 80020dc:	e003      	b.n	80020e6 <memchr+0x1a>
 80020de:	7804      	ldrb	r4, [r0, #0]
 80020e0:	3301      	adds	r3, #1
 80020e2:	428c      	cmp	r4, r1
 80020e4:	d1f6      	bne.n	80020d4 <memchr+0x8>
 80020e6:	bd10      	pop	{r4, pc}

080020e8 <memcpy>:
 80020e8:	440a      	add	r2, r1
 80020ea:	4291      	cmp	r1, r2
 80020ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80020f0:	d100      	bne.n	80020f4 <memcpy+0xc>
 80020f2:	4770      	bx	lr
 80020f4:	b510      	push	{r4, lr}
 80020f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020fa:	4291      	cmp	r1, r2
 80020fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002100:	d1f9      	bne.n	80020f6 <memcpy+0xe>
 8002102:	bd10      	pop	{r4, pc}

08002104 <memmove>:
 8002104:	4288      	cmp	r0, r1
 8002106:	b510      	push	{r4, lr}
 8002108:	eb01 0402 	add.w	r4, r1, r2
 800210c:	d902      	bls.n	8002114 <memmove+0x10>
 800210e:	4284      	cmp	r4, r0
 8002110:	4623      	mov	r3, r4
 8002112:	d807      	bhi.n	8002124 <memmove+0x20>
 8002114:	1e43      	subs	r3, r0, #1
 8002116:	42a1      	cmp	r1, r4
 8002118:	d008      	beq.n	800212c <memmove+0x28>
 800211a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800211e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002122:	e7f8      	b.n	8002116 <memmove+0x12>
 8002124:	4601      	mov	r1, r0
 8002126:	4402      	add	r2, r0
 8002128:	428a      	cmp	r2, r1
 800212a:	d100      	bne.n	800212e <memmove+0x2a>
 800212c:	bd10      	pop	{r4, pc}
 800212e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002132:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002136:	e7f7      	b.n	8002128 <memmove+0x24>

08002138 <_free_r>:
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	4605      	mov	r5, r0
 800213c:	2900      	cmp	r1, #0
 800213e:	d043      	beq.n	80021c8 <_free_r+0x90>
 8002140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002144:	1f0c      	subs	r4, r1, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	bfb8      	it	lt
 800214a:	18e4      	addlt	r4, r4, r3
 800214c:	f000 f8d0 	bl	80022f0 <__malloc_lock>
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <_free_r+0x94>)
 8002152:	6813      	ldr	r3, [r2, #0]
 8002154:	4610      	mov	r0, r2
 8002156:	b933      	cbnz	r3, 8002166 <_free_r+0x2e>
 8002158:	6063      	str	r3, [r4, #4]
 800215a:	6014      	str	r4, [r2, #0]
 800215c:	4628      	mov	r0, r5
 800215e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002162:	f000 b8cb 	b.w	80022fc <__malloc_unlock>
 8002166:	42a3      	cmp	r3, r4
 8002168:	d90a      	bls.n	8002180 <_free_r+0x48>
 800216a:	6821      	ldr	r1, [r4, #0]
 800216c:	1862      	adds	r2, r4, r1
 800216e:	4293      	cmp	r3, r2
 8002170:	bf01      	itttt	eq
 8002172:	681a      	ldreq	r2, [r3, #0]
 8002174:	685b      	ldreq	r3, [r3, #4]
 8002176:	1852      	addeq	r2, r2, r1
 8002178:	6022      	streq	r2, [r4, #0]
 800217a:	6063      	str	r3, [r4, #4]
 800217c:	6004      	str	r4, [r0, #0]
 800217e:	e7ed      	b.n	800215c <_free_r+0x24>
 8002180:	461a      	mov	r2, r3
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	b10b      	cbz	r3, 800218a <_free_r+0x52>
 8002186:	42a3      	cmp	r3, r4
 8002188:	d9fa      	bls.n	8002180 <_free_r+0x48>
 800218a:	6811      	ldr	r1, [r2, #0]
 800218c:	1850      	adds	r0, r2, r1
 800218e:	42a0      	cmp	r0, r4
 8002190:	d10b      	bne.n	80021aa <_free_r+0x72>
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	4401      	add	r1, r0
 8002196:	1850      	adds	r0, r2, r1
 8002198:	4283      	cmp	r3, r0
 800219a:	6011      	str	r1, [r2, #0]
 800219c:	d1de      	bne.n	800215c <_free_r+0x24>
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4401      	add	r1, r0
 80021a4:	6011      	str	r1, [r2, #0]
 80021a6:	6053      	str	r3, [r2, #4]
 80021a8:	e7d8      	b.n	800215c <_free_r+0x24>
 80021aa:	d902      	bls.n	80021b2 <_free_r+0x7a>
 80021ac:	230c      	movs	r3, #12
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	e7d4      	b.n	800215c <_free_r+0x24>
 80021b2:	6820      	ldr	r0, [r4, #0]
 80021b4:	1821      	adds	r1, r4, r0
 80021b6:	428b      	cmp	r3, r1
 80021b8:	bf01      	itttt	eq
 80021ba:	6819      	ldreq	r1, [r3, #0]
 80021bc:	685b      	ldreq	r3, [r3, #4]
 80021be:	1809      	addeq	r1, r1, r0
 80021c0:	6021      	streq	r1, [r4, #0]
 80021c2:	6063      	str	r3, [r4, #4]
 80021c4:	6054      	str	r4, [r2, #4]
 80021c6:	e7c9      	b.n	800215c <_free_r+0x24>
 80021c8:	bd38      	pop	{r3, r4, r5, pc}
 80021ca:	bf00      	nop
 80021cc:	20000090 	.word	0x20000090

080021d0 <_malloc_r>:
 80021d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d2:	1ccd      	adds	r5, r1, #3
 80021d4:	f025 0503 	bic.w	r5, r5, #3
 80021d8:	3508      	adds	r5, #8
 80021da:	2d0c      	cmp	r5, #12
 80021dc:	bf38      	it	cc
 80021de:	250c      	movcc	r5, #12
 80021e0:	2d00      	cmp	r5, #0
 80021e2:	4606      	mov	r6, r0
 80021e4:	db01      	blt.n	80021ea <_malloc_r+0x1a>
 80021e6:	42a9      	cmp	r1, r5
 80021e8:	d903      	bls.n	80021f2 <_malloc_r+0x22>
 80021ea:	230c      	movs	r3, #12
 80021ec:	6033      	str	r3, [r6, #0]
 80021ee:	2000      	movs	r0, #0
 80021f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f2:	f000 f87d 	bl	80022f0 <__malloc_lock>
 80021f6:	4921      	ldr	r1, [pc, #132]	; (800227c <_malloc_r+0xac>)
 80021f8:	680a      	ldr	r2, [r1, #0]
 80021fa:	4614      	mov	r4, r2
 80021fc:	b99c      	cbnz	r4, 8002226 <_malloc_r+0x56>
 80021fe:	4f20      	ldr	r7, [pc, #128]	; (8002280 <_malloc_r+0xb0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b923      	cbnz	r3, 800220e <_malloc_r+0x3e>
 8002204:	4621      	mov	r1, r4
 8002206:	4630      	mov	r0, r6
 8002208:	f000 f862 	bl	80022d0 <_sbrk_r>
 800220c:	6038      	str	r0, [r7, #0]
 800220e:	4629      	mov	r1, r5
 8002210:	4630      	mov	r0, r6
 8002212:	f000 f85d 	bl	80022d0 <_sbrk_r>
 8002216:	1c43      	adds	r3, r0, #1
 8002218:	d123      	bne.n	8002262 <_malloc_r+0x92>
 800221a:	230c      	movs	r3, #12
 800221c:	4630      	mov	r0, r6
 800221e:	6033      	str	r3, [r6, #0]
 8002220:	f000 f86c 	bl	80022fc <__malloc_unlock>
 8002224:	e7e3      	b.n	80021ee <_malloc_r+0x1e>
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	1b5b      	subs	r3, r3, r5
 800222a:	d417      	bmi.n	800225c <_malloc_r+0x8c>
 800222c:	2b0b      	cmp	r3, #11
 800222e:	d903      	bls.n	8002238 <_malloc_r+0x68>
 8002230:	6023      	str	r3, [r4, #0]
 8002232:	441c      	add	r4, r3
 8002234:	6025      	str	r5, [r4, #0]
 8002236:	e004      	b.n	8002242 <_malloc_r+0x72>
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	42a2      	cmp	r2, r4
 800223c:	bf0c      	ite	eq
 800223e:	600b      	streq	r3, [r1, #0]
 8002240:	6053      	strne	r3, [r2, #4]
 8002242:	4630      	mov	r0, r6
 8002244:	f000 f85a 	bl	80022fc <__malloc_unlock>
 8002248:	f104 000b 	add.w	r0, r4, #11
 800224c:	1d23      	adds	r3, r4, #4
 800224e:	f020 0007 	bic.w	r0, r0, #7
 8002252:	1ac2      	subs	r2, r0, r3
 8002254:	d0cc      	beq.n	80021f0 <_malloc_r+0x20>
 8002256:	1a1b      	subs	r3, r3, r0
 8002258:	50a3      	str	r3, [r4, r2]
 800225a:	e7c9      	b.n	80021f0 <_malloc_r+0x20>
 800225c:	4622      	mov	r2, r4
 800225e:	6864      	ldr	r4, [r4, #4]
 8002260:	e7cc      	b.n	80021fc <_malloc_r+0x2c>
 8002262:	1cc4      	adds	r4, r0, #3
 8002264:	f024 0403 	bic.w	r4, r4, #3
 8002268:	42a0      	cmp	r0, r4
 800226a:	d0e3      	beq.n	8002234 <_malloc_r+0x64>
 800226c:	1a21      	subs	r1, r4, r0
 800226e:	4630      	mov	r0, r6
 8002270:	f000 f82e 	bl	80022d0 <_sbrk_r>
 8002274:	3001      	adds	r0, #1
 8002276:	d1dd      	bne.n	8002234 <_malloc_r+0x64>
 8002278:	e7cf      	b.n	800221a <_malloc_r+0x4a>
 800227a:	bf00      	nop
 800227c:	20000090 	.word	0x20000090
 8002280:	20000094 	.word	0x20000094

08002284 <_realloc_r>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	4607      	mov	r7, r0
 8002288:	4614      	mov	r4, r2
 800228a:	460e      	mov	r6, r1
 800228c:	b921      	cbnz	r1, 8002298 <_realloc_r+0x14>
 800228e:	4611      	mov	r1, r2
 8002290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002294:	f7ff bf9c 	b.w	80021d0 <_malloc_r>
 8002298:	b922      	cbnz	r2, 80022a4 <_realloc_r+0x20>
 800229a:	f7ff ff4d 	bl	8002138 <_free_r>
 800229e:	4625      	mov	r5, r4
 80022a0:	4628      	mov	r0, r5
 80022a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022a4:	f000 f830 	bl	8002308 <_malloc_usable_size_r>
 80022a8:	42a0      	cmp	r0, r4
 80022aa:	d20f      	bcs.n	80022cc <_realloc_r+0x48>
 80022ac:	4621      	mov	r1, r4
 80022ae:	4638      	mov	r0, r7
 80022b0:	f7ff ff8e 	bl	80021d0 <_malloc_r>
 80022b4:	4605      	mov	r5, r0
 80022b6:	2800      	cmp	r0, #0
 80022b8:	d0f2      	beq.n	80022a0 <_realloc_r+0x1c>
 80022ba:	4631      	mov	r1, r6
 80022bc:	4622      	mov	r2, r4
 80022be:	f7ff ff13 	bl	80020e8 <memcpy>
 80022c2:	4631      	mov	r1, r6
 80022c4:	4638      	mov	r0, r7
 80022c6:	f7ff ff37 	bl	8002138 <_free_r>
 80022ca:	e7e9      	b.n	80022a0 <_realloc_r+0x1c>
 80022cc:	4635      	mov	r5, r6
 80022ce:	e7e7      	b.n	80022a0 <_realloc_r+0x1c>

080022d0 <_sbrk_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	2300      	movs	r3, #0
 80022d4:	4d05      	ldr	r5, [pc, #20]	; (80022ec <_sbrk_r+0x1c>)
 80022d6:	4604      	mov	r4, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	602b      	str	r3, [r5, #0]
 80022dc:	f7fe fbd8 	bl	8000a90 <_sbrk>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d102      	bne.n	80022ea <_sbrk_r+0x1a>
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	b103      	cbz	r3, 80022ea <_sbrk_r+0x1a>
 80022e8:	6023      	str	r3, [r4, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	2000009c 	.word	0x2000009c

080022f0 <__malloc_lock>:
 80022f0:	4801      	ldr	r0, [pc, #4]	; (80022f8 <__malloc_lock+0x8>)
 80022f2:	f000 b811 	b.w	8002318 <__retarget_lock_acquire_recursive>
 80022f6:	bf00      	nop
 80022f8:	200000a4 	.word	0x200000a4

080022fc <__malloc_unlock>:
 80022fc:	4801      	ldr	r0, [pc, #4]	; (8002304 <__malloc_unlock+0x8>)
 80022fe:	f000 b80c 	b.w	800231a <__retarget_lock_release_recursive>
 8002302:	bf00      	nop
 8002304:	200000a4 	.word	0x200000a4

08002308 <_malloc_usable_size_r>:
 8002308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800230c:	1f18      	subs	r0, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	bfbc      	itt	lt
 8002312:	580b      	ldrlt	r3, [r1, r0]
 8002314:	18c0      	addlt	r0, r0, r3
 8002316:	4770      	bx	lr

08002318 <__retarget_lock_acquire_recursive>:
 8002318:	4770      	bx	lr

0800231a <__retarget_lock_release_recursive>:
 800231a:	4770      	bx	lr

0800231c <_init>:
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231e:	bf00      	nop
 8002320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002322:	bc08      	pop	{r3}
 8002324:	469e      	mov	lr, r3
 8002326:	4770      	bx	lr

08002328 <_fini>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr
