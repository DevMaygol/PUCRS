
Q2_T2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029f4  080029f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f4  080029f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08002a6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002a6c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054db  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f0  00000000  00000000  00025574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  00026968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  00026e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001720a  00000000  00000000  000272a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005762  00000000  00000000  0003e4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ebe5  00000000  00000000  00043c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c27f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b60  00000000  00000000  000c2844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002800 	.word	0x08002800

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002800 	.word	0x08002800

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b092      	sub	sp, #72	; 0x48
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc33 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8cf 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f909 	bl	8000370 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  const uint8_t dadoLCD[6][9] = {{ 4,32,32,32,6,32,32,32,5},{
 800015e:	4b61      	ldr	r3, [pc, #388]	; (80002e4 <main+0x198>)
 8000160:	463c      	mov	r4, r7
 8000162:	461d      	mov	r5, r3
 8000164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800016a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800016c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800016e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000170:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000174:	6020      	str	r0, [r4, #0]
 8000176:	3404      	adds	r4, #4
 8000178:	8021      	strh	r1, [r4, #0]
		  	  	  	  	  	  	   0,32,1,32,32,32,2,32,3},{
		  	  	  	  	  	  	   0,32,1,32,6,32,2,32,3},{
		  	  	  	  	  	  	   0,32,1,6,32,6,2,32,3}};


  lcd_init(cursor_apagado);
 800017a:	200c      	movs	r0, #12
 800017c:	f000 fa52 	bl	8000624 <lcd_init>
  lcd_progchar();
 8000180:	f000 faa4 	bl	80006cc <lcd_progchar>
  lcd_goto(4,2);
 8000184:	2102      	movs	r1, #2
 8000186:	2004      	movs	r0, #4
 8000188:	f000 fa75 	bl	8000676 <lcd_goto>
  lcd_clear ();
 800018c:	f000 fa6c 	bl	8000668 <lcd_clear>
  uint8_t dado=rand() % 5;
 8000190:	f001 fb2a 	bl	80017e8 <rand>
 8000194:	4602      	mov	r2, r0
 8000196:	4b54      	ldr	r3, [pc, #336]	; (80002e8 <main+0x19c>)
 8000198:	fb83 1302 	smull	r1, r3, r3, r2
 800019c:	1059      	asrs	r1, r3, #1
 800019e:	17d3      	asrs	r3, r2, #31
 80001a0:	1ac9      	subs	r1, r1, r3
 80001a2:	460b      	mov	r3, r1
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	440b      	add	r3, r1
 80001a8:	1ad1      	subs	r1, r2, r3
 80001aa:	460b      	mov	r3, r1
 80001ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  if(!(GPIOA->IDR & (1<<8)) || !(GPIOB->IDR & (1<<5))){
 80001b0:	4b4e      	ldr	r3, [pc, #312]	; (80002ec <main+0x1a0>)
 80001b2:	689b      	ldr	r3, [r3, #8]
 80001b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d005      	beq.n	80001c8 <main+0x7c>
 80001bc:	4b4c      	ldr	r3, [pc, #304]	; (80002f0 <main+0x1a4>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	f003 0320 	and.w	r3, r3, #32
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d1f3      	bne.n	80001b0 <main+0x64>
		  while(!(GPIOA->IDR & (1<<8))){}
 80001c8:	bf00      	nop
 80001ca:	4b48      	ldr	r3, [pc, #288]	; (80002ec <main+0x1a0>)
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d0f9      	beq.n	80001ca <main+0x7e>
		  while(!(GPIOB->IDR & (1<<5))){}
 80001d6:	bf00      	nop
 80001d8:	4b45      	ldr	r3, [pc, #276]	; (80002f0 <main+0x1a4>)
 80001da:	689b      	ldr	r3, [r3, #8]
 80001dc:	f003 0320 	and.w	r3, r3, #32
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d0f9      	beq.n	80001d8 <main+0x8c>
		  lcd_clear();
 80001e4:	f000 fa40 	bl	8000668 <lcd_clear>

		  for(int j=0; j<5; j++){
 80001e8:	2300      	movs	r3, #0
 80001ea:	647b      	str	r3, [r7, #68]	; 0x44
 80001ec:	e076      	b.n	80002dc <main+0x190>
			  dado=rand() % 6;
 80001ee:	f001 fafb 	bl	80017e8 <rand>
 80001f2:	4602      	mov	r2, r0
 80001f4:	4b3f      	ldr	r3, [pc, #252]	; (80002f4 <main+0x1a8>)
 80001f6:	fb83 3102 	smull	r3, r1, r3, r2
 80001fa:	17d3      	asrs	r3, r2, #31
 80001fc:	1ac9      	subs	r1, r1, r3
 80001fe:	460b      	mov	r3, r1
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	440b      	add	r3, r1
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	1ad1      	subs	r1, r2, r3
 8000208:	460b      	mov	r3, r1
 800020a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			  HAL_Delay(10);
 800020e:	200a      	movs	r0, #10
 8000210:	f000 fc36 	bl	8000a80 <HAL_Delay>

			  lcd_goto(j*4,0);
 8000214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000216:	b2db      	uxtb	r3, r3
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	b2db      	uxtb	r3, r3
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fa29 	bl	8000676 <lcd_goto>
			  for(int j=0; j<3; j++){
 8000224:	2300      	movs	r3, #0
 8000226:	643b      	str	r3, [r7, #64]	; 0x40
 8000228:	e011      	b.n	800024e <main+0x102>
				  lcd_wrchar(dadoLCD[dado][j]);
 800022a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800022e:	4613      	mov	r3, r2
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	4413      	add	r3, r2
 8000234:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000238:	441a      	add	r2, r3
 800023a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800023c:	4413      	add	r3, r2
 800023e:	3b48      	subs	r3, #72	; 0x48
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f9b8 	bl	80005b8 <lcd_wrchar>
			  for(int j=0; j<3; j++){
 8000248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800024a:	3301      	adds	r3, #1
 800024c:	643b      	str	r3, [r7, #64]	; 0x40
 800024e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000250:	2b02      	cmp	r3, #2
 8000252:	ddea      	ble.n	800022a <main+0xde>
			  }
			  lcd_goto(j*4,1);
 8000254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000256:	b2db      	uxtb	r3, r3
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2101      	movs	r1, #1
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fa09 	bl	8000676 <lcd_goto>
			  for(int j=3; j<6; j++){
 8000264:	2303      	movs	r3, #3
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000268:	e011      	b.n	800028e <main+0x142>
				  lcd_wrchar(dadoLCD[dado][j]);
 800026a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800026e:	4613      	mov	r3, r2
 8000270:	00db      	lsls	r3, r3, #3
 8000272:	4413      	add	r3, r2
 8000274:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000278:	441a      	add	r2, r3
 800027a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800027c:	4413      	add	r3, r2
 800027e:	3b48      	subs	r3, #72	; 0x48
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f998 	bl	80005b8 <lcd_wrchar>
			  for(int j=3; j<6; j++){
 8000288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800028a:	3301      	adds	r3, #1
 800028c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800028e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000290:	2b05      	cmp	r3, #5
 8000292:	ddea      	ble.n	800026a <main+0x11e>
			  }
			  lcd_goto(j*4+4,2);
 8000294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000296:	3301      	adds	r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2102      	movs	r1, #2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9e8 	bl	8000676 <lcd_goto>
			  for(int j=6; j<9; j++){
 80002a6:	2306      	movs	r3, #6
 80002a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80002aa:	e011      	b.n	80002d0 <main+0x184>
				  lcd_wrchar(dadoLCD[dado][j]);
 80002ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80002b0:	4613      	mov	r3, r2
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	4413      	add	r3, r2
 80002b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80002ba:	441a      	add	r2, r3
 80002bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002be:	4413      	add	r3, r2
 80002c0:	3b48      	subs	r3, #72	; 0x48
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f977 	bl	80005b8 <lcd_wrchar>
			  for(int j=6; j<9; j++){
 80002ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002cc:	3301      	adds	r3, #1
 80002ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80002d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002d2:	2b08      	cmp	r3, #8
 80002d4:	ddea      	ble.n	80002ac <main+0x160>
		  for(int j=0; j<5; j++){
 80002d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002d8:	3301      	adds	r3, #1
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
 80002dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002de:	2b04      	cmp	r3, #4
 80002e0:	dd85      	ble.n	80001ee <main+0xa2>
	  if(!(GPIOA->IDR & (1<<8)) || !(GPIOB->IDR & (1<<5))){
 80002e2:	e765      	b.n	80001b0 <main+0x64>
 80002e4:	08002818 	.word	0x08002818
 80002e8:	66666667 	.word	0x66666667
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	2aaaaaab 	.word	0x2aaaaaab

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fa66 	bl	80017d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000326:	2300      	movs	r3, #0
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fe40 	bl	8000fb4 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800033a:	f000 f9f3 	bl	8000724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f8ac 	bl	80014b4 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000362:	f000 f9df 	bl	8000724 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	; 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <MX_GPIO_Init+0xd0>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <MX_GPIO_Init+0xd0>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_GPIO_Init+0xd0>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_GPIO_Init+0xd0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a27      	ldr	r2, [pc, #156]	; (8000440 <MX_GPIO_Init+0xd0>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_GPIO_Init+0xd0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f240 210d 	movw	r1, #525	; 0x20d
 80003ba:	4822      	ldr	r0, [pc, #136]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003bc:	f000 fde2 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2148      	movs	r1, #72	; 0x48
 80003c4:	4820      	ldr	r0, [pc, #128]	; (8000448 <MX_GPIO_Init+0xd8>)
 80003c6:	f000 fddd 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 80003ca:	f240 230d 	movw	r3, #525	; 0x20d
 80003ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	4619      	mov	r1, r3
 80003e2:	4818      	ldr	r0, [pc, #96]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003e4:	f000 fc54 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	4619      	mov	r1, r3
 80003fc:	4811      	ldr	r0, [pc, #68]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003fe:	f000 fc47 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000402:	2348      	movs	r3, #72	; 0x48
 8000404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <MX_GPIO_Init+0xd8>)
 800041a:	f000 fc39 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000426:	2301      	movs	r3, #1
 8000428:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_GPIO_Init+0xd8>)
 8000432:	f000 fc2d 	bl	8000c90 <HAL_GPIO_Init>

}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800
 8000448:	40010c00 	.word	0x40010c00

0800044c <udelay>:

/* USER CODE BEGIN 4 */
void udelay(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
	int tempo = 7;
 8000452:	2307      	movs	r3, #7
 8000454:	607b      	str	r3, [r7, #4]
	while(tempo--);
 8000456:	bf00      	nop
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1fa      	bne.n	8000458 <udelay+0xc>
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <delayus>:

void delayus(int tempo)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
	while(tempo--) udelay();
 8000476:	e001      	b.n	800047c <delayus+0xe>
 8000478:	f7ff ffe8 	bl	800044c <udelay>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	1e5a      	subs	r2, r3, #1
 8000480:	607a      	str	r2, [r7, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1f8      	bne.n	8000478 <delayus+0xa>
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <lcd_send4bits>:


void lcd_send4bits(uint8_t dat)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	if((dat & (1<<0)) == 0) d4_0; else d4_1;
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d103      	bne.n	80004ac <lcd_send4bits+0x1c>
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <lcd_send4bits+0x74>)
 80004a6:	2208      	movs	r2, #8
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	e002      	b.n	80004b2 <lcd_send4bits+0x22>
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <lcd_send4bits+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	611a      	str	r2, [r3, #16]
	if((dat & (1<<1)) == 0) d5_0; else d5_1;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d103      	bne.n	80004c4 <lcd_send4bits+0x34>
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <lcd_send4bits+0x78>)
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	615a      	str	r2, [r3, #20]
 80004c2:	e002      	b.n	80004ca <lcd_send4bits+0x3a>
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <lcd_send4bits+0x78>)
 80004c6:	2240      	movs	r2, #64	; 0x40
 80004c8:	611a      	str	r2, [r3, #16]
	if((dat & (1<<2)) == 0) d6_0; else d6_1;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <lcd_send4bits+0x4c>
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <lcd_send4bits+0x74>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	e002      	b.n	80004e2 <lcd_send4bits+0x52>
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <lcd_send4bits+0x74>)
 80004de:	2204      	movs	r2, #4
 80004e0:	611a      	str	r2, [r3, #16]
	if((dat & (1<<3)) == 0) d7_0; else d7_1;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d103      	bne.n	80004f4 <lcd_send4bits+0x64>
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <lcd_send4bits+0x74>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	615a      	str	r2, [r3, #20]
}
 80004f2:	e002      	b.n	80004fa <lcd_send4bits+0x6a>
	if((dat & (1<<3)) == 0) d7_0; else d7_1;
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <lcd_send4bits+0x74>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	611a      	str	r2, [r3, #16]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40010800 	.word	0x40010800
 8000508:	40010c00 	.word	0x40010c00

0800050c <lcd_wrcom4>:

//Comando de 4 bits
void lcd_wrcom4(uint8_t com)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(com);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffb9 	bl	8000490 <lcd_send4bits>
	rs_0;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <lcd_wrcom4+0x3c>)
 8000520:	2208      	movs	r2, #8
 8000522:	615a      	str	r2, [r3, #20]
	en_1;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <lcd_wrcom4+0x40>)
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	611a      	str	r2, [r3, #16]
	delayus(5);
 800052c:	2005      	movs	r0, #5
 800052e:	f7ff ff9e 	bl	800046e <delayus>
	en_0;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <lcd_wrcom4+0x40>)
 8000534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000538:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f000 faa0 	bl	8000a80 <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010c00 	.word	0x40010c00
 800054c:	40010800 	.word	0x40010800

08000550 <lcd_wrcom>:

// Comando de 8 bits
void lcd_wrcom(uint8_t com)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(com>>4);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff95 	bl	8000490 <lcd_send4bits>
	rs_0;
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <lcd_wrcom+0x60>)
 8000568:	2208      	movs	r2, #8
 800056a:	615a      	str	r2, [r3, #20]
	en_1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <lcd_wrcom+0x64>)
 800056e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000572:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000574:	2005      	movs	r0, #5
 8000576:	f7ff ff7a 	bl	800046e <delayus>
	en_0;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <lcd_wrcom+0x64>)
 800057c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000580:	615a      	str	r2, [r3, #20]

	lcd_send4bits(com);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff83 	bl	8000490 <lcd_send4bits>
	en_1;
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <lcd_wrcom+0x64>)
 800058c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000590:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000592:	2005      	movs	r0, #5
 8000594:	f7ff ff6b 	bl	800046e <delayus>
	en_0;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <lcd_wrcom+0x64>)
 800059a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059e:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 fa6d 	bl	8000a80 <HAL_Delay>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40010800 	.word	0x40010800

080005b8 <lcd_wrchar>:

void lcd_wrchar(char ch)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(ch>>4);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff61 	bl	8000490 <lcd_send4bits>
	rs_1;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <lcd_wrchar+0x64>)
 80005d0:	2208      	movs	r2, #8
 80005d2:	611a      	str	r2, [r3, #16]
	en_1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <lcd_wrchar+0x68>)
 80005d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005da:	611a      	str	r2, [r3, #16]
	delayus(5);
 80005dc:	2005      	movs	r0, #5
 80005de:	f7ff ff46 	bl	800046e <delayus>
	en_0;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <lcd_wrchar+0x68>)
 80005e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e8:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 80005ea:	2005      	movs	r0, #5
 80005ec:	f000 fa48 	bl	8000a80 <HAL_Delay>

	lcd_send4bits(ch);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff4c 	bl	8000490 <lcd_send4bits>
	en_1;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <lcd_wrchar+0x68>)
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000600:	2005      	movs	r0, #5
 8000602:	f7ff ff34 	bl	800046e <delayus>
	en_0;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <lcd_wrchar+0x68>)
 8000608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060c:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f000 fa36 	bl	8000a80 <HAL_Delay>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40010c00 	.word	0x40010c00
 8000620:	40010800 	.word	0x40010800

08000624 <lcd_init>:

void lcd_init(uint8_t cursor)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	lcd_wrcom4(3);
 800062e:	2003      	movs	r0, #3
 8000630:	f7ff ff6c 	bl	800050c <lcd_wrcom4>
	lcd_wrcom4(3);
 8000634:	2003      	movs	r0, #3
 8000636:	f7ff ff69 	bl	800050c <lcd_wrcom4>
	lcd_wrcom4(3);
 800063a:	2003      	movs	r0, #3
 800063c:	f7ff ff66 	bl	800050c <lcd_wrcom4>
	lcd_wrcom4(2);
 8000640:	2002      	movs	r0, #2
 8000642:	f7ff ff63 	bl	800050c <lcd_wrcom4>

	lcd_wrcom(0x28);
 8000646:	2028      	movs	r0, #40	; 0x28
 8000648:	f7ff ff82 	bl	8000550 <lcd_wrcom>
	lcd_wrcom(cursor);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7e 	bl	8000550 <lcd_wrcom>
	lcd_wrcom(0x06);
 8000654:	2006      	movs	r0, #6
 8000656:	f7ff ff7b 	bl	8000550 <lcd_wrcom>
	lcd_wrcom(0x01);
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ff78 	bl	8000550 <lcd_wrcom>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_clear>:

void lcd_clear (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	lcd_wrcom(0x01);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff6f 	bl	8000550 <lcd_wrcom>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <lcd_goto>:

void lcd_goto(uint8_t x, uint8_t y)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	460a      	mov	r2, r1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	4613      	mov	r3, r2
 8000684:	71bb      	strb	r3, [r7, #6]
	uint8_t com = 0x80;
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	73fb      	strb	r3, [r7, #15]
	if(y==0) com = 0x80 + x;
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <lcd_goto+0x20>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3b80      	subs	r3, #128	; 0x80
 8000694:	73fb      	strb	r3, [r7, #15]
	if(y==1) com = 0xC0 + x;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d102      	bne.n	80006a2 <lcd_goto+0x2c>
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b40      	subs	r3, #64	; 0x40
 80006a0:	73fb      	strb	r3, [r7, #15]
	if(y==2) com = 0x90 + x;
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d102      	bne.n	80006ae <lcd_goto+0x38>
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3b70      	subs	r3, #112	; 0x70
 80006ac:	73fb      	strb	r3, [r7, #15]
	if(y==3) com = 0xD0 + x;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d102      	bne.n	80006ba <lcd_goto+0x44>
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3b30      	subs	r3, #48	; 0x30
 80006b8:	73fb      	strb	r3, [r7, #15]

	lcd_wrcom(com);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff47 	bl	8000550 <lcd_wrcom>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <lcd_progchar>:
void lcd_wrstr(char *str)
{
	while(*str) lcd_wrchar(*(str++));
}

void lcd_progchar(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	uint8_t k,j;
	lcd_wrcom(0x40);
 80006d2:	2040      	movs	r0, #64	; 0x40
 80006d4:	f7ff ff3c 	bl	8000550 <lcd_wrcom>
	for(j=0;j<7;j++){
 80006d8:	2300      	movs	r3, #0
 80006da:	71bb      	strb	r3, [r7, #6]
 80006dc:	e015      	b.n	800070a <lcd_progchar+0x3e>
		for(k=0;k<8;k++){
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	e00c      	b.n	80006fe <lcd_progchar+0x32>
			lcd_wrchar(tabela[j][k]);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	490d      	ldr	r1, [pc, #52]	; (8000720 <lcd_progchar+0x54>)
 80006ea:	00d2      	lsls	r2, r2, #3
 80006ec:	440a      	add	r2, r1
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff60 	bl	80005b8 <lcd_wrchar>
		for(k=0;k<8;k++){
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	3301      	adds	r3, #1
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b07      	cmp	r3, #7
 8000702:	d9ef      	bls.n	80006e4 <lcd_progchar+0x18>
	for(j=0;j<7;j++){
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	3301      	adds	r3, #1
 8000708:	71bb      	strb	r3, [r7, #6]
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b06      	cmp	r3, #6
 800070e:	d9e6      	bls.n	80006de <lcd_progchar+0x12>
		}
	}
	lcd_wrcom(0x80);
 8000710:	2080      	movs	r0, #128	; 0x80
 8000712:	f7ff ff1d 	bl	8000550 <lcd_wrcom>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08002860 	.word	0x08002860

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <HAL_MspInit+0x5c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x5c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_MspInit+0x60>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_MspInit+0x60>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f935 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
	return 1;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <_kill>:

int _kill(int pid, int sig)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007fa:	f000 ffc3 	bl	8001784 <__errno>
 80007fe:	4603      	mov	r3, r0
 8000800:	2216      	movs	r2, #22
 8000802:	601a      	str	r2, [r3, #0]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_exit>:

void _exit (int status)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffe7 	bl	80007f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000822:	e7fe      	b.n	8000822 <_exit+0x12>

08000824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e00a      	b.n	800084c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000836:	f3af 8000 	nop.w
 800083a:	4601      	mov	r1, r0
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	60ba      	str	r2, [r7, #8]
 8000842:	b2ca      	uxtb	r2, r1
 8000844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf0      	blt.n	8000836 <_read+0x12>
	}

return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e009      	b.n	8000884 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	697a      	ldr	r2, [r7, #20]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	429a      	cmp	r2, r3
 800088a:	dbf1      	blt.n	8000870 <_write+0x12>
	}
	return len;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <_close>:

int _close(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	return -1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008bc:	605a      	str	r2, [r3, #4]
	return 0;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <_isatty>:

int _isatty(int file)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	return 1;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f000 ff2c 	bl	8001784 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20002800 	.word	0x20002800
 8000958:	00000400 	.word	0x00000400
 800095c:	2000008c 	.word	0x2000008c
 8000960:	200000b0 	.word	0x200000b0

08000964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000970:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000972:	e003      	b.n	800097c <LoopCopyDataInit>

08000974 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000976:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000978:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800097a:	3104      	adds	r1, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800097c:	480a      	ldr	r0, [pc, #40]	; (80009a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000980:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000982:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000984:	d3f6      	bcc.n	8000974 <CopyDataInit>
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000988:	e002      	b.n	8000990 <LoopFillZerobss>

0800098a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800098c:	f842 3b04 	str.w	r3, [r2], #4

08000990 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000992:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000994:	d3f9      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000996:	f7ff ffe5 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f000 fef9 	bl	8001790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099e:	f7ff fbd5 	bl	800014c <main>
  bx lr
 80009a2:	4770      	bx	lr
  ldr r3, =_sidata
 80009a4:	080029fc 	.word	0x080029fc
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009ac:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80009b0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80009b4:	200000ac 	.word	0x200000ac

080009b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_Init+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_Init+0x28>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f92b 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff feaa 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f935 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f90b 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000098 	.word	0x20000098

08000a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000098 	.word	0x20000098

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa6:	bf00      	nop
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff90 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff49 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff5e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff90 	bl	8000b80 <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5f 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffb0 	bl	8000be4 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca2:	e148      	b.n	8000f36 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8137 	bne.w	8000f30 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4aa3      	ldr	r2, [pc, #652]	; (8000f54 <HAL_GPIO_Init+0x2c4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d05e      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ccc:	4aa1      	ldr	r2, [pc, #644]	; (8000f54 <HAL_GPIO_Init+0x2c4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d875      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cd2:	4aa1      	ldr	r2, [pc, #644]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d058      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cd8:	4a9f      	ldr	r2, [pc, #636]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d86f      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cde:	4a9f      	ldr	r2, [pc, #636]	; (8000f5c <HAL_GPIO_Init+0x2cc>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d052      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ce4:	4a9d      	ldr	r2, [pc, #628]	; (8000f5c <HAL_GPIO_Init+0x2cc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d869      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cea:	4a9d      	ldr	r2, [pc, #628]	; (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d04c      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cf0:	4a9b      	ldr	r2, [pc, #620]	; (8000f60 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d863      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cf6:	4a9b      	ldr	r2, [pc, #620]	; (8000f64 <HAL_GPIO_Init+0x2d4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d046      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cfc:	4a99      	ldr	r2, [pc, #612]	; (8000f64 <HAL_GPIO_Init+0x2d4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d85d      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d82a      	bhi.n	8000d5c <HAL_GPIO_Init+0xcc>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d859      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <HAL_GPIO_Init+0x80>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d8b 	.word	0x08000d8b
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d77 	.word	0x08000d77
 8000d1c:	08000db9 	.word	0x08000db9
 8000d20:	08000dbf 	.word	0x08000dbf
 8000d24:	08000dbf 	.word	0x08000dbf
 8000d28:	08000dbf 	.word	0x08000dbf
 8000d2c:	08000dbf 	.word	0x08000dbf
 8000d30:	08000dbf 	.word	0x08000dbf
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000dbf 	.word	0x08000dbf
 8000d3c:	08000dbf 	.word	0x08000dbf
 8000d40:	08000dbf 	.word	0x08000dbf
 8000d44:	08000dbf 	.word	0x08000dbf
 8000d48:	08000dbf 	.word	0x08000dbf
 8000d4c:	08000dbf 	.word	0x08000dbf
 8000d50:	08000dbf 	.word	0x08000dbf
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d81 	.word	0x08000d81
 8000d5c:	4a82      	ldr	r2, [pc, #520]	; (8000f68 <HAL_GPIO_Init+0x2d8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d62:	e02c      	b.n	8000dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e029      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	3304      	adds	r3, #4
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e024      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e01f      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	330c      	adds	r3, #12
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e01a      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d92:	2304      	movs	r3, #4
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e013      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	611a      	str	r2, [r3, #16]
          break;
 8000daa:	e009      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dac:	2308      	movs	r3, #8
 8000dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	615a      	str	r2, [r3, #20]
          break;
 8000db6:	e003      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          break;
 8000dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2bff      	cmp	r3, #255	; 0xff
 8000dc4:	d801      	bhi.n	8000dca <HAL_GPIO_Init+0x13a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	e001      	b.n	8000dce <HAL_GPIO_Init+0x13e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2bff      	cmp	r3, #255	; 0xff
 8000dd4:	d802      	bhi.n	8000ddc <HAL_GPIO_Init+0x14c>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x152>
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	3b08      	subs	r3, #8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	210f      	movs	r1, #15
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	6a39      	ldr	r1, [r7, #32]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8090 	beq.w	8000f30 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e10:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a55      	ldr	r2, [pc, #340]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <HAL_GPIO_Init+0x2dc>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e28:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <HAL_GPIO_Init+0x2e0>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a49      	ldr	r2, [pc, #292]	; (8000f74 <HAL_GPIO_Init+0x2e4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1e0>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2e8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1dc>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a47      	ldr	r2, [pc, #284]	; (8000f7c <HAL_GPIO_Init+0x2ec>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1d8>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e004      	b.n	8000e72 <HAL_GPIO_Init+0x1e2>
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e002      	b.n	8000e72 <HAL_GPIO_Init+0x1e2>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_GPIO_Init+0x1e2>
 8000e70:	2300      	movs	r3, #0
 8000e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e74:	f002 0203 	and.w	r2, r2, #3
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	4093      	lsls	r3, r2
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e82:	493b      	ldr	r1, [pc, #236]	; (8000f70 <HAL_GPIO_Init+0x2e0>)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e9c:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4937      	ldr	r1, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	600b      	str	r3, [r1, #0]
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4933      	ldr	r1, [pc, #204]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	492d      	ldr	r1, [pc, #180]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	4929      	ldr	r1, [pc, #164]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eec:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	4923      	ldr	r1, [pc, #140]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	608b      	str	r3, [r1, #8]
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	491f      	ldr	r1, [pc, #124]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	4919      	ldr	r1, [pc, #100]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60cb      	str	r3, [r1, #12]
 8000f20:	e006      	b.n	8000f30 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	4915      	ldr	r1, [pc, #84]	; (8000f80 <HAL_GPIO_Init+0x2f0>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	3301      	adds	r3, #1
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f47f aeaf 	bne.w	8000ca4 <HAL_GPIO_Init+0x14>
  }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	372c      	adds	r7, #44	; 0x2c
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	10320000 	.word	0x10320000
 8000f58:	10310000 	.word	0x10310000
 8000f5c:	10220000 	.word	0x10220000
 8000f60:	10210000 	.word	0x10210000
 8000f64:	10120000 	.word	0x10120000
 8000f68:	10110000 	.word	0x10110000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000
 8000f74:	40010800 	.word	0x40010800
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e26c      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8087 	beq.w	80010e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd4:	4b92      	ldr	r3, [pc, #584]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 030c 	and.w	r3, r3, #12
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d00c      	beq.n	8000ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	4b8f      	ldr	r3, [pc, #572]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 030c 	and.w	r3, r3, #12
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d112      	bne.n	8001012 <HAL_RCC_OscConfig+0x5e>
 8000fec:	4b8c      	ldr	r3, [pc, #560]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff8:	d10b      	bne.n	8001012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffa:	4b89      	ldr	r3, [pc, #548]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d06c      	beq.n	80010e0 <HAL_RCC_OscConfig+0x12c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d168      	bne.n	80010e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e246      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x76>
 800101c:	4b80      	ldr	r3, [pc, #512]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a7f      	ldr	r2, [pc, #508]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e02e      	b.n	8001088 <HAL_RCC_OscConfig+0xd4>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x98>
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a7a      	ldr	r2, [pc, #488]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b78      	ldr	r3, [pc, #480]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a77      	ldr	r2, [pc, #476]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e01d      	b.n	8001088 <HAL_RCC_OscConfig+0xd4>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0xbc>
 8001056:	4b72      	ldr	r3, [pc, #456]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a71      	ldr	r2, [pc, #452]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b6f      	ldr	r3, [pc, #444]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6e      	ldr	r2, [pc, #440]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e00b      	b.n	8001088 <HAL_RCC_OscConfig+0xd4>
 8001070:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a6a      	ldr	r2, [pc, #424]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b68      	ldr	r3, [pc, #416]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a67      	ldr	r2, [pc, #412]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcec 	bl	8000a6c <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fce8 	bl	8000a6c <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1fa      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b5d      	ldr	r3, [pc, #372]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0xe4>
 80010b6:	e014      	b.n	80010e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fcd8 	bl	8000a6c <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fcd4 	bl	8000a6c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	; 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1e6      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x10c>
 80010de:	e000      	b.n	80010e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d063      	beq.n	80011b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ee:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010fa:	4b49      	ldr	r3, [pc, #292]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b08      	cmp	r3, #8
 8001104:	d11c      	bne.n	8001140 <HAL_RCC_OscConfig+0x18c>
 8001106:	4b46      	ldr	r3, [pc, #280]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	4b43      	ldr	r3, [pc, #268]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_RCC_OscConfig+0x176>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e1ba      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4939      	ldr	r1, [pc, #228]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	e03a      	b.n	80011b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fc8d 	bl	8000a6c <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fc89 	bl	8000a6c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e19b      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4927      	ldr	r1, [pc, #156]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fc6c 	bl	8000a6c <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fc68 	bl	8000a6c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e17a      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d03a      	beq.n	8001238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d019      	beq.n	80011fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d0:	f7ff fc4c 	bl	8000a6c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc48 	bl	8000a6c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e15a      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 faa6 	bl	8001748 <RCC_Delay>
 80011fc:	e01c      	b.n	8001238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fc32 	bl	8000a6c <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120a:	e00f      	b.n	800122c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800120c:	f7ff fc2e 	bl	8000a6c <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d908      	bls.n	800122c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e140      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	42420000 	.word	0x42420000
 8001228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122c:	4b9e      	ldr	r3, [pc, #632]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e9      	bne.n	800120c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80a6 	beq.w	8001392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124a:	4b97      	ldr	r3, [pc, #604]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10d      	bne.n	8001272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b94      	ldr	r3, [pc, #592]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a93      	ldr	r2, [pc, #588]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b91      	ldr	r3, [pc, #580]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001272:	4b8e      	ldr	r3, [pc, #568]	; (80014ac <HAL_RCC_OscConfig+0x4f8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d118      	bne.n	80012b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800127e:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <HAL_RCC_OscConfig+0x4f8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a8a      	ldr	r2, [pc, #552]	; (80014ac <HAL_RCC_OscConfig+0x4f8>)
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128a:	f7ff fbef 	bl	8000a6c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001292:	f7ff fbeb 	bl	8000a6c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b64      	cmp	r3, #100	; 0x64
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e0fd      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <HAL_RCC_OscConfig+0x4f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x312>
 80012b8:	4b7b      	ldr	r3, [pc, #492]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a7a      	ldr	r2, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	e02d      	b.n	8001322 <HAL_RCC_OscConfig+0x36e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x334>
 80012ce:	4b76      	ldr	r3, [pc, #472]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4a75      	ldr	r2, [pc, #468]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	4b73      	ldr	r3, [pc, #460]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a72      	ldr	r2, [pc, #456]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	6213      	str	r3, [r2, #32]
 80012e6:	e01c      	b.n	8001322 <HAL_RCC_OscConfig+0x36e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x356>
 80012f0:	4b6d      	ldr	r3, [pc, #436]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6213      	str	r3, [r2, #32]
 80012fc:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6213      	str	r3, [r2, #32]
 8001308:	e00b      	b.n	8001322 <HAL_RCC_OscConfig+0x36e>
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	4b64      	ldr	r3, [pc, #400]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d015      	beq.n	8001356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb9f 	bl	8000a6c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fb9b 	bl	8000a6c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0ab      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ee      	beq.n	8001332 <HAL_RCC_OscConfig+0x37e>
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb89 	bl	8000a6c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb85 	bl	8000a6c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e095      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ee      	bne.n	800135e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d105      	bne.n	8001392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001386:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8081 	beq.w	800149e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139c:	4b42      	ldr	r3, [pc, #264]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d061      	beq.n	800146c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d146      	bne.n	800143e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_RCC_OscConfig+0x4fc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fb59 	bl	8000a6c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff fb55 	bl	8000a6c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e067      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d108      	bne.n	80013f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	492d      	ldr	r1, [pc, #180]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a19      	ldr	r1, [r3, #32]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	430b      	orrs	r3, r1
 800140a:	4927      	ldr	r1, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_RCC_OscConfig+0x4fc>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb29 	bl	8000a6c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb25 	bl	8000a6c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e037      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x46a>
 800143c:	e02f      	b.n	800149e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <HAL_RCC_OscConfig+0x4fc>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb12 	bl	8000a6c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fb0e 	bl	8000a6c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e020      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x498>
 800146a:	e018      	b.n	800149e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e013      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001478:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	429a      	cmp	r2, r3
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	429a      	cmp	r2, r3
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42420060 	.word	0x42420060

080014b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0d0      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d910      	bls.n	80014f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b67      	ldr	r3, [pc, #412]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	4965      	ldr	r1, [pc, #404]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b63      	ldr	r3, [pc, #396]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0b8      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d020      	beq.n	8001546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a58      	ldr	r2, [pc, #352]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800151a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	494d      	ldr	r1, [pc, #308]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d040      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d115      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e07f      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e073      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e06b      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f023 0203 	bic.w	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4936      	ldr	r1, [pc, #216]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fa62 	bl	8000a6c <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ac:	f7ff fa5e 	bl	8000a6c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e053      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 020c 	and.w	r2, r3, #12
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d1eb      	bne.n	80015ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d210      	bcs.n	8001604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 0207 	bic.w	r2, r3, #7
 80015ea:	4922      	ldr	r1, [pc, #136]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e032      	b.n	800166a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4916      	ldr	r1, [pc, #88]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	490e      	ldr	r1, [pc, #56]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001642:	f000 f821 	bl	8001688 <HAL_RCC_GetSysClockFreq>
 8001646:	4602      	mov	r2, r0
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	490a      	ldr	r1, [pc, #40]	; (800167c <HAL_RCC_ClockConfig+0x1c8>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	fa22 f303 	lsr.w	r3, r2, r3
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_RCC_ClockConfig+0x1cc>)
 800165c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_RCC_ClockConfig+0x1d0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f9c0 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000
 8001678:	40021000 	.word	0x40021000
 800167c:	08002898 	.word	0x08002898
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001688:	b490      	push	{r4, r7}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001690:	1d3c      	adds	r4, r7, #4
 8001692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001698:	f240 2301 	movw	r3, #513	; 0x201
 800169c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_GetSysClockFreq+0x40>
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d003      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x46>
 80016c6:	e02d      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ca:	623b      	str	r3, [r7, #32]
      break;
 80016cc:	e02d      	b.n	800172a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	0c9b      	lsrs	r3, r3, #18
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016da:	4413      	add	r3, r2
 80016dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	0c5b      	lsrs	r3, r3, #17
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016fa:	4413      	add	r3, r2
 80016fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001700:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001706:	fb02 f203 	mul.w	r2, r2, r3
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
 8001712:	e004      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	623b      	str	r3, [r7, #32]
      break;
 8001722:	e002      	b.n	800172a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001726:	623b      	str	r3, [r7, #32]
      break;
 8001728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172a:	6a3b      	ldr	r3, [r7, #32]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bc90      	pop	{r4, r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	08002850 	.word	0x08002850
 800173c:	40021000 	.word	0x40021000
 8001740:	007a1200 	.word	0x007a1200
 8001744:	003d0900 	.word	0x003d0900

08001748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <RCC_Delay+0x34>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <RCC_Delay+0x38>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0a5b      	lsrs	r3, r3, #9
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001764:	bf00      	nop
  }
  while (Delay --);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e5a      	subs	r2, r3, #1
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <RCC_Delay+0x1c>
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000000 	.word	0x20000000
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <__errno>:
 8001784:	4b01      	ldr	r3, [pc, #4]	; (800178c <__errno+0x8>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c

08001790 <__libc_init_array>:
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	2600      	movs	r6, #0
 8001794:	4d0c      	ldr	r5, [pc, #48]	; (80017c8 <__libc_init_array+0x38>)
 8001796:	4c0d      	ldr	r4, [pc, #52]	; (80017cc <__libc_init_array+0x3c>)
 8001798:	1b64      	subs	r4, r4, r5
 800179a:	10a4      	asrs	r4, r4, #2
 800179c:	42a6      	cmp	r6, r4
 800179e:	d109      	bne.n	80017b4 <__libc_init_array+0x24>
 80017a0:	f001 f82e 	bl	8002800 <_init>
 80017a4:	2600      	movs	r6, #0
 80017a6:	4d0a      	ldr	r5, [pc, #40]	; (80017d0 <__libc_init_array+0x40>)
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <__libc_init_array+0x44>)
 80017aa:	1b64      	subs	r4, r4, r5
 80017ac:	10a4      	asrs	r4, r4, #2
 80017ae:	42a6      	cmp	r6, r4
 80017b0:	d105      	bne.n	80017be <__libc_init_array+0x2e>
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b8:	4798      	blx	r3
 80017ba:	3601      	adds	r6, #1
 80017bc:	e7ee      	b.n	800179c <__libc_init_array+0xc>
 80017be:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c2:	4798      	blx	r3
 80017c4:	3601      	adds	r6, #1
 80017c6:	e7f2      	b.n	80017ae <__libc_init_array+0x1e>
 80017c8:	080029f4 	.word	0x080029f4
 80017cc:	080029f4 	.word	0x080029f4
 80017d0:	080029f4 	.word	0x080029f4
 80017d4:	080029f8 	.word	0x080029f8

080017d8 <memset>:
 80017d8:	4603      	mov	r3, r0
 80017da:	4402      	add	r2, r0
 80017dc:	4293      	cmp	r3, r2
 80017de:	d100      	bne.n	80017e2 <memset+0xa>
 80017e0:	4770      	bx	lr
 80017e2:	f803 1b01 	strb.w	r1, [r3], #1
 80017e6:	e7f9      	b.n	80017dc <memset+0x4>

080017e8 <rand>:
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <rand+0x60>)
 80017ea:	b510      	push	{r4, lr}
 80017ec:	681c      	ldr	r4, [r3, #0]
 80017ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017f0:	b9b3      	cbnz	r3, 8001820 <rand+0x38>
 80017f2:	2018      	movs	r0, #24
 80017f4:	f000 f868 	bl	80018c8 <malloc>
 80017f8:	4602      	mov	r2, r0
 80017fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80017fc:	b920      	cbnz	r0, 8001808 <rand+0x20>
 80017fe:	214e      	movs	r1, #78	; 0x4e
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <rand+0x64>)
 8001802:	4813      	ldr	r0, [pc, #76]	; (8001850 <rand+0x68>)
 8001804:	f000 f830 	bl	8001868 <__assert_func>
 8001808:	4912      	ldr	r1, [pc, #72]	; (8001854 <rand+0x6c>)
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <rand+0x70>)
 800180c:	e9c0 1300 	strd	r1, r3, [r0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <rand+0x74>)
 8001812:	2100      	movs	r1, #0
 8001814:	6083      	str	r3, [r0, #8]
 8001816:	230b      	movs	r3, #11
 8001818:	8183      	strh	r3, [r0, #12]
 800181a:	2001      	movs	r0, #1
 800181c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001820:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <rand+0x78>)
 8001824:	690a      	ldr	r2, [r1, #16]
 8001826:	694b      	ldr	r3, [r1, #20]
 8001828:	4350      	muls	r0, r2
 800182a:	4c0e      	ldr	r4, [pc, #56]	; (8001864 <rand+0x7c>)
 800182c:	fb04 0003 	mla	r0, r4, r3, r0
 8001830:	fba2 3404 	umull	r3, r4, r2, r4
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	4404      	add	r4, r0
 8001838:	f144 0000 	adc.w	r0, r4, #0
 800183c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8001840:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001844:	bd10      	pop	{r4, pc}
 8001846:	bf00      	nop
 8001848:	2000000c 	.word	0x2000000c
 800184c:	080028ac 	.word	0x080028ac
 8001850:	080028c3 	.word	0x080028c3
 8001854:	abcd330e 	.word	0xabcd330e
 8001858:	e66d1234 	.word	0xe66d1234
 800185c:	0005deec 	.word	0x0005deec
 8001860:	5851f42d 	.word	0x5851f42d
 8001864:	4c957f2d 	.word	0x4c957f2d

08001868 <__assert_func>:
 8001868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800186a:	4614      	mov	r4, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <__assert_func+0x2c>)
 8001870:	4605      	mov	r5, r0
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68d8      	ldr	r0, [r3, #12]
 8001876:	b14c      	cbz	r4, 800188c <__assert_func+0x24>
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <__assert_func+0x30>)
 800187a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800187e:	9100      	str	r1, [sp, #0]
 8001880:	462b      	mov	r3, r5
 8001882:	4906      	ldr	r1, [pc, #24]	; (800189c <__assert_func+0x34>)
 8001884:	f000 f80e 	bl	80018a4 <fiprintf>
 8001888:	f000 fc8a 	bl	80021a0 <abort>
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__assert_func+0x38>)
 800188e:	461c      	mov	r4, r3
 8001890:	e7f3      	b.n	800187a <__assert_func+0x12>
 8001892:	bf00      	nop
 8001894:	2000000c 	.word	0x2000000c
 8001898:	08002922 	.word	0x08002922
 800189c:	0800292f 	.word	0x0800292f
 80018a0:	0800295d 	.word	0x0800295d

080018a4 <fiprintf>:
 80018a4:	b40e      	push	{r1, r2, r3}
 80018a6:	b503      	push	{r0, r1, lr}
 80018a8:	4601      	mov	r1, r0
 80018aa:	ab03      	add	r3, sp, #12
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <fiprintf+0x20>)
 80018ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80018b2:	6800      	ldr	r0, [r0, #0]
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	f000 f8dd 	bl	8001a74 <_vfiprintf_r>
 80018ba:	b002      	add	sp, #8
 80018bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80018c0:	b003      	add	sp, #12
 80018c2:	4770      	bx	lr
 80018c4:	2000000c 	.word	0x2000000c

080018c8 <malloc>:
 80018c8:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <malloc+0xc>)
 80018ca:	4601      	mov	r1, r0
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f000 b84f 	b.w	8001970 <_malloc_r>
 80018d2:	bf00      	nop
 80018d4:	2000000c 	.word	0x2000000c

080018d8 <_free_r>:
 80018d8:	b538      	push	{r3, r4, r5, lr}
 80018da:	4605      	mov	r5, r0
 80018dc:	2900      	cmp	r1, #0
 80018de:	d043      	beq.n	8001968 <_free_r+0x90>
 80018e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018e4:	1f0c      	subs	r4, r1, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bfb8      	it	lt
 80018ea:	18e4      	addlt	r4, r4, r3
 80018ec:	f000 fe8c 	bl	8002608 <__malloc_lock>
 80018f0:	4a1e      	ldr	r2, [pc, #120]	; (800196c <_free_r+0x94>)
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	4610      	mov	r0, r2
 80018f6:	b933      	cbnz	r3, 8001906 <_free_r+0x2e>
 80018f8:	6063      	str	r3, [r4, #4]
 80018fa:	6014      	str	r4, [r2, #0]
 80018fc:	4628      	mov	r0, r5
 80018fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001902:	f000 be87 	b.w	8002614 <__malloc_unlock>
 8001906:	42a3      	cmp	r3, r4
 8001908:	d90a      	bls.n	8001920 <_free_r+0x48>
 800190a:	6821      	ldr	r1, [r4, #0]
 800190c:	1862      	adds	r2, r4, r1
 800190e:	4293      	cmp	r3, r2
 8001910:	bf01      	itttt	eq
 8001912:	681a      	ldreq	r2, [r3, #0]
 8001914:	685b      	ldreq	r3, [r3, #4]
 8001916:	1852      	addeq	r2, r2, r1
 8001918:	6022      	streq	r2, [r4, #0]
 800191a:	6063      	str	r3, [r4, #4]
 800191c:	6004      	str	r4, [r0, #0]
 800191e:	e7ed      	b.n	80018fc <_free_r+0x24>
 8001920:	461a      	mov	r2, r3
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	b10b      	cbz	r3, 800192a <_free_r+0x52>
 8001926:	42a3      	cmp	r3, r4
 8001928:	d9fa      	bls.n	8001920 <_free_r+0x48>
 800192a:	6811      	ldr	r1, [r2, #0]
 800192c:	1850      	adds	r0, r2, r1
 800192e:	42a0      	cmp	r0, r4
 8001930:	d10b      	bne.n	800194a <_free_r+0x72>
 8001932:	6820      	ldr	r0, [r4, #0]
 8001934:	4401      	add	r1, r0
 8001936:	1850      	adds	r0, r2, r1
 8001938:	4283      	cmp	r3, r0
 800193a:	6011      	str	r1, [r2, #0]
 800193c:	d1de      	bne.n	80018fc <_free_r+0x24>
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4401      	add	r1, r0
 8001944:	6011      	str	r1, [r2, #0]
 8001946:	6053      	str	r3, [r2, #4]
 8001948:	e7d8      	b.n	80018fc <_free_r+0x24>
 800194a:	d902      	bls.n	8001952 <_free_r+0x7a>
 800194c:	230c      	movs	r3, #12
 800194e:	602b      	str	r3, [r5, #0]
 8001950:	e7d4      	b.n	80018fc <_free_r+0x24>
 8001952:	6820      	ldr	r0, [r4, #0]
 8001954:	1821      	adds	r1, r4, r0
 8001956:	428b      	cmp	r3, r1
 8001958:	bf01      	itttt	eq
 800195a:	6819      	ldreq	r1, [r3, #0]
 800195c:	685b      	ldreq	r3, [r3, #4]
 800195e:	1809      	addeq	r1, r1, r0
 8001960:	6021      	streq	r1, [r4, #0]
 8001962:	6063      	str	r3, [r4, #4]
 8001964:	6054      	str	r4, [r2, #4]
 8001966:	e7c9      	b.n	80018fc <_free_r+0x24>
 8001968:	bd38      	pop	{r3, r4, r5, pc}
 800196a:	bf00      	nop
 800196c:	20000090 	.word	0x20000090

08001970 <_malloc_r>:
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	1ccd      	adds	r5, r1, #3
 8001974:	f025 0503 	bic.w	r5, r5, #3
 8001978:	3508      	adds	r5, #8
 800197a:	2d0c      	cmp	r5, #12
 800197c:	bf38      	it	cc
 800197e:	250c      	movcc	r5, #12
 8001980:	2d00      	cmp	r5, #0
 8001982:	4606      	mov	r6, r0
 8001984:	db01      	blt.n	800198a <_malloc_r+0x1a>
 8001986:	42a9      	cmp	r1, r5
 8001988:	d903      	bls.n	8001992 <_malloc_r+0x22>
 800198a:	230c      	movs	r3, #12
 800198c:	6033      	str	r3, [r6, #0]
 800198e:	2000      	movs	r0, #0
 8001990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001992:	f000 fe39 	bl	8002608 <__malloc_lock>
 8001996:	4921      	ldr	r1, [pc, #132]	; (8001a1c <_malloc_r+0xac>)
 8001998:	680a      	ldr	r2, [r1, #0]
 800199a:	4614      	mov	r4, r2
 800199c:	b99c      	cbnz	r4, 80019c6 <_malloc_r+0x56>
 800199e:	4f20      	ldr	r7, [pc, #128]	; (8001a20 <_malloc_r+0xb0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b923      	cbnz	r3, 80019ae <_malloc_r+0x3e>
 80019a4:	4621      	mov	r1, r4
 80019a6:	4630      	mov	r0, r6
 80019a8:	f000 fb2a 	bl	8002000 <_sbrk_r>
 80019ac:	6038      	str	r0, [r7, #0]
 80019ae:	4629      	mov	r1, r5
 80019b0:	4630      	mov	r0, r6
 80019b2:	f000 fb25 	bl	8002000 <_sbrk_r>
 80019b6:	1c43      	adds	r3, r0, #1
 80019b8:	d123      	bne.n	8001a02 <_malloc_r+0x92>
 80019ba:	230c      	movs	r3, #12
 80019bc:	4630      	mov	r0, r6
 80019be:	6033      	str	r3, [r6, #0]
 80019c0:	f000 fe28 	bl	8002614 <__malloc_unlock>
 80019c4:	e7e3      	b.n	800198e <_malloc_r+0x1e>
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	1b5b      	subs	r3, r3, r5
 80019ca:	d417      	bmi.n	80019fc <_malloc_r+0x8c>
 80019cc:	2b0b      	cmp	r3, #11
 80019ce:	d903      	bls.n	80019d8 <_malloc_r+0x68>
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	441c      	add	r4, r3
 80019d4:	6025      	str	r5, [r4, #0]
 80019d6:	e004      	b.n	80019e2 <_malloc_r+0x72>
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	42a2      	cmp	r2, r4
 80019dc:	bf0c      	ite	eq
 80019de:	600b      	streq	r3, [r1, #0]
 80019e0:	6053      	strne	r3, [r2, #4]
 80019e2:	4630      	mov	r0, r6
 80019e4:	f000 fe16 	bl	8002614 <__malloc_unlock>
 80019e8:	f104 000b 	add.w	r0, r4, #11
 80019ec:	1d23      	adds	r3, r4, #4
 80019ee:	f020 0007 	bic.w	r0, r0, #7
 80019f2:	1ac2      	subs	r2, r0, r3
 80019f4:	d0cc      	beq.n	8001990 <_malloc_r+0x20>
 80019f6:	1a1b      	subs	r3, r3, r0
 80019f8:	50a3      	str	r3, [r4, r2]
 80019fa:	e7c9      	b.n	8001990 <_malloc_r+0x20>
 80019fc:	4622      	mov	r2, r4
 80019fe:	6864      	ldr	r4, [r4, #4]
 8001a00:	e7cc      	b.n	800199c <_malloc_r+0x2c>
 8001a02:	1cc4      	adds	r4, r0, #3
 8001a04:	f024 0403 	bic.w	r4, r4, #3
 8001a08:	42a0      	cmp	r0, r4
 8001a0a:	d0e3      	beq.n	80019d4 <_malloc_r+0x64>
 8001a0c:	1a21      	subs	r1, r4, r0
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f000 faf6 	bl	8002000 <_sbrk_r>
 8001a14:	3001      	adds	r0, #1
 8001a16:	d1dd      	bne.n	80019d4 <_malloc_r+0x64>
 8001a18:	e7cf      	b.n	80019ba <_malloc_r+0x4a>
 8001a1a:	bf00      	nop
 8001a1c:	20000090 	.word	0x20000090
 8001a20:	20000094 	.word	0x20000094

08001a24 <__sfputc_r>:
 8001a24:	6893      	ldr	r3, [r2, #8]
 8001a26:	b410      	push	{r4}
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	6093      	str	r3, [r2, #8]
 8001a2e:	da07      	bge.n	8001a40 <__sfputc_r+0x1c>
 8001a30:	6994      	ldr	r4, [r2, #24]
 8001a32:	42a3      	cmp	r3, r4
 8001a34:	db01      	blt.n	8001a3a <__sfputc_r+0x16>
 8001a36:	290a      	cmp	r1, #10
 8001a38:	d102      	bne.n	8001a40 <__sfputc_r+0x1c>
 8001a3a:	bc10      	pop	{r4}
 8001a3c:	f000 baf0 	b.w	8002020 <__swbuf_r>
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	1c58      	adds	r0, r3, #1
 8001a44:	6010      	str	r0, [r2, #0]
 8001a46:	7019      	strb	r1, [r3, #0]
 8001a48:	4608      	mov	r0, r1
 8001a4a:	bc10      	pop	{r4}
 8001a4c:	4770      	bx	lr

08001a4e <__sfputs_r>:
 8001a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a50:	4606      	mov	r6, r0
 8001a52:	460f      	mov	r7, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	18d5      	adds	r5, r2, r3
 8001a58:	42ac      	cmp	r4, r5
 8001a5a:	d101      	bne.n	8001a60 <__sfputs_r+0x12>
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e007      	b.n	8001a70 <__sfputs_r+0x22>
 8001a60:	463a      	mov	r2, r7
 8001a62:	4630      	mov	r0, r6
 8001a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a68:	f7ff ffdc 	bl	8001a24 <__sfputc_r>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d1f3      	bne.n	8001a58 <__sfputs_r+0xa>
 8001a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a74 <_vfiprintf_r>:
 8001a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a78:	460d      	mov	r5, r1
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	4606      	mov	r6, r0
 8001a80:	b09d      	sub	sp, #116	; 0x74
 8001a82:	b118      	cbz	r0, 8001a8c <_vfiprintf_r+0x18>
 8001a84:	6983      	ldr	r3, [r0, #24]
 8001a86:	b90b      	cbnz	r3, 8001a8c <_vfiprintf_r+0x18>
 8001a88:	f000 fcac 	bl	80023e4 <__sinit>
 8001a8c:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <_vfiprintf_r+0x240>)
 8001a8e:	429d      	cmp	r5, r3
 8001a90:	d11b      	bne.n	8001aca <_vfiprintf_r+0x56>
 8001a92:	6875      	ldr	r5, [r6, #4]
 8001a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a96:	07d9      	lsls	r1, r3, #31
 8001a98:	d405      	bmi.n	8001aa6 <_vfiprintf_r+0x32>
 8001a9a:	89ab      	ldrh	r3, [r5, #12]
 8001a9c:	059a      	lsls	r2, r3, #22
 8001a9e:	d402      	bmi.n	8001aa6 <_vfiprintf_r+0x32>
 8001aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001aa2:	f000 fd3d 	bl	8002520 <__retarget_lock_acquire_recursive>
 8001aa6:	89ab      	ldrh	r3, [r5, #12]
 8001aa8:	071b      	lsls	r3, r3, #28
 8001aaa:	d501      	bpl.n	8001ab0 <_vfiprintf_r+0x3c>
 8001aac:	692b      	ldr	r3, [r5, #16]
 8001aae:	b9eb      	cbnz	r3, 8001aec <_vfiprintf_r+0x78>
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	f000 fb06 	bl	80020c4 <__swsetup_r>
 8001ab8:	b1c0      	cbz	r0, 8001aec <_vfiprintf_r+0x78>
 8001aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001abc:	07dc      	lsls	r4, r3, #31
 8001abe:	d50e      	bpl.n	8001ade <_vfiprintf_r+0x6a>
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	b01d      	add	sp, #116	; 0x74
 8001ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aca:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <_vfiprintf_r+0x244>)
 8001acc:	429d      	cmp	r5, r3
 8001ace:	d101      	bne.n	8001ad4 <_vfiprintf_r+0x60>
 8001ad0:	68b5      	ldr	r5, [r6, #8]
 8001ad2:	e7df      	b.n	8001a94 <_vfiprintf_r+0x20>
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <_vfiprintf_r+0x248>)
 8001ad6:	429d      	cmp	r5, r3
 8001ad8:	bf08      	it	eq
 8001ada:	68f5      	ldreq	r5, [r6, #12]
 8001adc:	e7da      	b.n	8001a94 <_vfiprintf_r+0x20>
 8001ade:	89ab      	ldrh	r3, [r5, #12]
 8001ae0:	0598      	lsls	r0, r3, #22
 8001ae2:	d4ed      	bmi.n	8001ac0 <_vfiprintf_r+0x4c>
 8001ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ae6:	f000 fd1c 	bl	8002522 <__retarget_lock_release_recursive>
 8001aea:	e7e9      	b.n	8001ac0 <_vfiprintf_r+0x4c>
 8001aec:	2300      	movs	r3, #0
 8001aee:	9309      	str	r3, [sp, #36]	; 0x24
 8001af0:	2320      	movs	r3, #32
 8001af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001af6:	2330      	movs	r3, #48	; 0x30
 8001af8:	f04f 0901 	mov.w	r9, #1
 8001afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b00:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001cc0 <_vfiprintf_r+0x24c>
 8001b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b08:	4623      	mov	r3, r4
 8001b0a:	469a      	mov	sl, r3
 8001b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b10:	b10a      	cbz	r2, 8001b16 <_vfiprintf_r+0xa2>
 8001b12:	2a25      	cmp	r2, #37	; 0x25
 8001b14:	d1f9      	bne.n	8001b0a <_vfiprintf_r+0x96>
 8001b16:	ebba 0b04 	subs.w	fp, sl, r4
 8001b1a:	d00b      	beq.n	8001b34 <_vfiprintf_r+0xc0>
 8001b1c:	465b      	mov	r3, fp
 8001b1e:	4622      	mov	r2, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	4630      	mov	r0, r6
 8001b24:	f7ff ff93 	bl	8001a4e <__sfputs_r>
 8001b28:	3001      	adds	r0, #1
 8001b2a:	f000 80aa 	beq.w	8001c82 <_vfiprintf_r+0x20e>
 8001b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b30:	445a      	add	r2, fp
 8001b32:	9209      	str	r2, [sp, #36]	; 0x24
 8001b34:	f89a 3000 	ldrb.w	r3, [sl]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80a2 	beq.w	8001c82 <_vfiprintf_r+0x20e>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b48:	f10a 0a01 	add.w	sl, sl, #1
 8001b4c:	9304      	str	r3, [sp, #16]
 8001b4e:	9307      	str	r3, [sp, #28]
 8001b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b54:	931a      	str	r3, [sp, #104]	; 0x68
 8001b56:	4654      	mov	r4, sl
 8001b58:	2205      	movs	r2, #5
 8001b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b5e:	4858      	ldr	r0, [pc, #352]	; (8001cc0 <_vfiprintf_r+0x24c>)
 8001b60:	f000 fd44 	bl	80025ec <memchr>
 8001b64:	9a04      	ldr	r2, [sp, #16]
 8001b66:	b9d8      	cbnz	r0, 8001ba0 <_vfiprintf_r+0x12c>
 8001b68:	06d1      	lsls	r1, r2, #27
 8001b6a:	bf44      	itt	mi
 8001b6c:	2320      	movmi	r3, #32
 8001b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b72:	0713      	lsls	r3, r2, #28
 8001b74:	bf44      	itt	mi
 8001b76:	232b      	movmi	r3, #43	; 0x2b
 8001b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8001b80:	2b2a      	cmp	r3, #42	; 0x2a
 8001b82:	d015      	beq.n	8001bb0 <_vfiprintf_r+0x13c>
 8001b84:	4654      	mov	r4, sl
 8001b86:	2000      	movs	r0, #0
 8001b88:	f04f 0c0a 	mov.w	ip, #10
 8001b8c:	9a07      	ldr	r2, [sp, #28]
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b94:	3b30      	subs	r3, #48	; 0x30
 8001b96:	2b09      	cmp	r3, #9
 8001b98:	d94e      	bls.n	8001c38 <_vfiprintf_r+0x1c4>
 8001b9a:	b1b0      	cbz	r0, 8001bca <_vfiprintf_r+0x156>
 8001b9c:	9207      	str	r2, [sp, #28]
 8001b9e:	e014      	b.n	8001bca <_vfiprintf_r+0x156>
 8001ba0:	eba0 0308 	sub.w	r3, r0, r8
 8001ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	46a2      	mov	sl, r4
 8001bac:	9304      	str	r3, [sp, #16]
 8001bae:	e7d2      	b.n	8001b56 <_vfiprintf_r+0xe2>
 8001bb0:	9b03      	ldr	r3, [sp, #12]
 8001bb2:	1d19      	adds	r1, r3, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	9103      	str	r1, [sp, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bfbb      	ittet	lt
 8001bbc:	425b      	neglt	r3, r3
 8001bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8001bc2:	9307      	strge	r3, [sp, #28]
 8001bc4:	9307      	strlt	r3, [sp, #28]
 8001bc6:	bfb8      	it	lt
 8001bc8:	9204      	strlt	r2, [sp, #16]
 8001bca:	7823      	ldrb	r3, [r4, #0]
 8001bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8001bce:	d10c      	bne.n	8001bea <_vfiprintf_r+0x176>
 8001bd0:	7863      	ldrb	r3, [r4, #1]
 8001bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8001bd4:	d135      	bne.n	8001c42 <_vfiprintf_r+0x1ce>
 8001bd6:	9b03      	ldr	r3, [sp, #12]
 8001bd8:	3402      	adds	r4, #2
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	9203      	str	r2, [sp, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfb8      	it	lt
 8001be4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001be8:	9305      	str	r3, [sp, #20]
 8001bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001cd0 <_vfiprintf_r+0x25c>
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4650      	mov	r0, sl
 8001bf2:	7821      	ldrb	r1, [r4, #0]
 8001bf4:	f000 fcfa 	bl	80025ec <memchr>
 8001bf8:	b140      	cbz	r0, 8001c0c <_vfiprintf_r+0x198>
 8001bfa:	2340      	movs	r3, #64	; 0x40
 8001bfc:	eba0 000a 	sub.w	r0, r0, sl
 8001c00:	fa03 f000 	lsl.w	r0, r3, r0
 8001c04:	9b04      	ldr	r3, [sp, #16]
 8001c06:	3401      	adds	r4, #1
 8001c08:	4303      	orrs	r3, r0
 8001c0a:	9304      	str	r3, [sp, #16]
 8001c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c10:	2206      	movs	r2, #6
 8001c12:	482c      	ldr	r0, [pc, #176]	; (8001cc4 <_vfiprintf_r+0x250>)
 8001c14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c18:	f000 fce8 	bl	80025ec <memchr>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d03f      	beq.n	8001ca0 <_vfiprintf_r+0x22c>
 8001c20:	4b29      	ldr	r3, [pc, #164]	; (8001cc8 <_vfiprintf_r+0x254>)
 8001c22:	bb1b      	cbnz	r3, 8001c6c <_vfiprintf_r+0x1f8>
 8001c24:	9b03      	ldr	r3, [sp, #12]
 8001c26:	3307      	adds	r3, #7
 8001c28:	f023 0307 	bic.w	r3, r3, #7
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	9303      	str	r3, [sp, #12]
 8001c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c32:	443b      	add	r3, r7
 8001c34:	9309      	str	r3, [sp, #36]	; 0x24
 8001c36:	e767      	b.n	8001b08 <_vfiprintf_r+0x94>
 8001c38:	460c      	mov	r4, r1
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c40:	e7a5      	b.n	8001b8e <_vfiprintf_r+0x11a>
 8001c42:	2300      	movs	r3, #0
 8001c44:	f04f 0c0a 	mov.w	ip, #10
 8001c48:	4619      	mov	r1, r3
 8001c4a:	3401      	adds	r4, #1
 8001c4c:	9305      	str	r3, [sp, #20]
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c54:	3a30      	subs	r2, #48	; 0x30
 8001c56:	2a09      	cmp	r2, #9
 8001c58:	d903      	bls.n	8001c62 <_vfiprintf_r+0x1ee>
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0c5      	beq.n	8001bea <_vfiprintf_r+0x176>
 8001c5e:	9105      	str	r1, [sp, #20]
 8001c60:	e7c3      	b.n	8001bea <_vfiprintf_r+0x176>
 8001c62:	4604      	mov	r4, r0
 8001c64:	2301      	movs	r3, #1
 8001c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c6a:	e7f0      	b.n	8001c4e <_vfiprintf_r+0x1da>
 8001c6c:	ab03      	add	r3, sp, #12
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	462a      	mov	r2, r5
 8001c72:	4630      	mov	r0, r6
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <_vfiprintf_r+0x258>)
 8001c76:	a904      	add	r1, sp, #16
 8001c78:	f3af 8000 	nop.w
 8001c7c:	4607      	mov	r7, r0
 8001c7e:	1c78      	adds	r0, r7, #1
 8001c80:	d1d6      	bne.n	8001c30 <_vfiprintf_r+0x1bc>
 8001c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	d405      	bmi.n	8001c94 <_vfiprintf_r+0x220>
 8001c88:	89ab      	ldrh	r3, [r5, #12]
 8001c8a:	059a      	lsls	r2, r3, #22
 8001c8c:	d402      	bmi.n	8001c94 <_vfiprintf_r+0x220>
 8001c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c90:	f000 fc47 	bl	8002522 <__retarget_lock_release_recursive>
 8001c94:	89ab      	ldrh	r3, [r5, #12]
 8001c96:	065b      	lsls	r3, r3, #25
 8001c98:	f53f af12 	bmi.w	8001ac0 <_vfiprintf_r+0x4c>
 8001c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c9e:	e711      	b.n	8001ac4 <_vfiprintf_r+0x50>
 8001ca0:	ab03      	add	r3, sp, #12
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	462a      	mov	r2, r5
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <_vfiprintf_r+0x258>)
 8001caa:	a904      	add	r1, sp, #16
 8001cac:	f000 f882 	bl	8001db4 <_printf_i>
 8001cb0:	e7e4      	b.n	8001c7c <_vfiprintf_r+0x208>
 8001cb2:	bf00      	nop
 8001cb4:	080029b4 	.word	0x080029b4
 8001cb8:	080029d4 	.word	0x080029d4
 8001cbc:	08002994 	.word	0x08002994
 8001cc0:	0800295e 	.word	0x0800295e
 8001cc4:	08002968 	.word	0x08002968
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	08001a4f 	.word	0x08001a4f
 8001cd0:	08002964 	.word	0x08002964

08001cd4 <_printf_common>:
 8001cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd8:	4616      	mov	r6, r2
 8001cda:	4699      	mov	r9, r3
 8001cdc:	688a      	ldr	r2, [r1, #8]
 8001cde:	690b      	ldr	r3, [r1, #16]
 8001ce0:	4607      	mov	r7, r0
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	bfb8      	it	lt
 8001ce6:	4613      	movlt	r3, r2
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001cee:	460c      	mov	r4, r1
 8001cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001cf4:	b10a      	cbz	r2, 8001cfa <_printf_common+0x26>
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	6033      	str	r3, [r6, #0]
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	0699      	lsls	r1, r3, #26
 8001cfe:	bf42      	ittt	mi
 8001d00:	6833      	ldrmi	r3, [r6, #0]
 8001d02:	3302      	addmi	r3, #2
 8001d04:	6033      	strmi	r3, [r6, #0]
 8001d06:	6825      	ldr	r5, [r4, #0]
 8001d08:	f015 0506 	ands.w	r5, r5, #6
 8001d0c:	d106      	bne.n	8001d1c <_printf_common+0x48>
 8001d0e:	f104 0a19 	add.w	sl, r4, #25
 8001d12:	68e3      	ldr	r3, [r4, #12]
 8001d14:	6832      	ldr	r2, [r6, #0]
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	42ab      	cmp	r3, r5
 8001d1a:	dc28      	bgt.n	8001d6e <_printf_common+0x9a>
 8001d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d20:	1e13      	subs	r3, r2, #0
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	bf18      	it	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	0692      	lsls	r2, r2, #26
 8001d2a:	d42d      	bmi.n	8001d88 <_printf_common+0xb4>
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	4638      	mov	r0, r7
 8001d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d34:	47c0      	blx	r8
 8001d36:	3001      	adds	r0, #1
 8001d38:	d020      	beq.n	8001d7c <_printf_common+0xa8>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	68e5      	ldr	r5, [r4, #12]
 8001d3e:	f003 0306 	and.w	r3, r3, #6
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf18      	it	ne
 8001d46:	2500      	movne	r5, #0
 8001d48:	6832      	ldr	r2, [r6, #0]
 8001d4a:	f04f 0600 	mov.w	r6, #0
 8001d4e:	68a3      	ldr	r3, [r4, #8]
 8001d50:	bf08      	it	eq
 8001d52:	1aad      	subeq	r5, r5, r2
 8001d54:	6922      	ldr	r2, [r4, #16]
 8001d56:	bf08      	it	eq
 8001d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bfc4      	itt	gt
 8001d60:	1a9b      	subgt	r3, r3, r2
 8001d62:	18ed      	addgt	r5, r5, r3
 8001d64:	341a      	adds	r4, #26
 8001d66:	42b5      	cmp	r5, r6
 8001d68:	d11a      	bne.n	8001da0 <_printf_common+0xcc>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e008      	b.n	8001d80 <_printf_common+0xac>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	4652      	mov	r2, sl
 8001d72:	4649      	mov	r1, r9
 8001d74:	4638      	mov	r0, r7
 8001d76:	47c0      	blx	r8
 8001d78:	3001      	adds	r0, #1
 8001d7a:	d103      	bne.n	8001d84 <_printf_common+0xb0>
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d84:	3501      	adds	r5, #1
 8001d86:	e7c4      	b.n	8001d12 <_printf_common+0x3e>
 8001d88:	2030      	movs	r0, #48	; 0x30
 8001d8a:	18e1      	adds	r1, r4, r3
 8001d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d96:	4422      	add	r2, r4
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d9e:	e7c5      	b.n	8001d2c <_printf_common+0x58>
 8001da0:	2301      	movs	r3, #1
 8001da2:	4622      	mov	r2, r4
 8001da4:	4649      	mov	r1, r9
 8001da6:	4638      	mov	r0, r7
 8001da8:	47c0      	blx	r8
 8001daa:	3001      	adds	r0, #1
 8001dac:	d0e6      	beq.n	8001d7c <_printf_common+0xa8>
 8001dae:	3601      	adds	r6, #1
 8001db0:	e7d9      	b.n	8001d66 <_printf_common+0x92>
	...

08001db4 <_printf_i>:
 8001db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001db8:	460c      	mov	r4, r1
 8001dba:	7e27      	ldrb	r7, [r4, #24]
 8001dbc:	4691      	mov	r9, r2
 8001dbe:	2f78      	cmp	r7, #120	; 0x78
 8001dc0:	4680      	mov	r8, r0
 8001dc2:	469a      	mov	sl, r3
 8001dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dca:	d807      	bhi.n	8001ddc <_printf_i+0x28>
 8001dcc:	2f62      	cmp	r7, #98	; 0x62
 8001dce:	d80a      	bhi.n	8001de6 <_printf_i+0x32>
 8001dd0:	2f00      	cmp	r7, #0
 8001dd2:	f000 80d9 	beq.w	8001f88 <_printf_i+0x1d4>
 8001dd6:	2f58      	cmp	r7, #88	; 0x58
 8001dd8:	f000 80a4 	beq.w	8001f24 <_printf_i+0x170>
 8001ddc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001de4:	e03a      	b.n	8001e5c <_printf_i+0xa8>
 8001de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001dea:	2b15      	cmp	r3, #21
 8001dec:	d8f6      	bhi.n	8001ddc <_printf_i+0x28>
 8001dee:	a001      	add	r0, pc, #4	; (adr r0, 8001df4 <_printf_i+0x40>)
 8001df0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001df4:	08001e4d 	.word	0x08001e4d
 8001df8:	08001e61 	.word	0x08001e61
 8001dfc:	08001ddd 	.word	0x08001ddd
 8001e00:	08001ddd 	.word	0x08001ddd
 8001e04:	08001ddd 	.word	0x08001ddd
 8001e08:	08001ddd 	.word	0x08001ddd
 8001e0c:	08001e61 	.word	0x08001e61
 8001e10:	08001ddd 	.word	0x08001ddd
 8001e14:	08001ddd 	.word	0x08001ddd
 8001e18:	08001ddd 	.word	0x08001ddd
 8001e1c:	08001ddd 	.word	0x08001ddd
 8001e20:	08001f6f 	.word	0x08001f6f
 8001e24:	08001e91 	.word	0x08001e91
 8001e28:	08001f51 	.word	0x08001f51
 8001e2c:	08001ddd 	.word	0x08001ddd
 8001e30:	08001ddd 	.word	0x08001ddd
 8001e34:	08001f91 	.word	0x08001f91
 8001e38:	08001ddd 	.word	0x08001ddd
 8001e3c:	08001e91 	.word	0x08001e91
 8001e40:	08001ddd 	.word	0x08001ddd
 8001e44:	08001ddd 	.word	0x08001ddd
 8001e48:	08001f59 	.word	0x08001f59
 8001e4c:	680b      	ldr	r3, [r1, #0]
 8001e4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e52:	1d1a      	adds	r2, r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	600a      	str	r2, [r1, #0]
 8001e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0a4      	b.n	8001faa <_printf_i+0x1f6>
 8001e60:	6825      	ldr	r5, [r4, #0]
 8001e62:	6808      	ldr	r0, [r1, #0]
 8001e64:	062e      	lsls	r6, r5, #24
 8001e66:	f100 0304 	add.w	r3, r0, #4
 8001e6a:	d50a      	bpl.n	8001e82 <_printf_i+0xce>
 8001e6c:	6805      	ldr	r5, [r0, #0]
 8001e6e:	600b      	str	r3, [r1, #0]
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	da03      	bge.n	8001e7c <_printf_i+0xc8>
 8001e74:	232d      	movs	r3, #45	; 0x2d
 8001e76:	426d      	negs	r5, r5
 8001e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	485e      	ldr	r0, [pc, #376]	; (8001ff8 <_printf_i+0x244>)
 8001e80:	e019      	b.n	8001eb6 <_printf_i+0x102>
 8001e82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001e86:	6805      	ldr	r5, [r0, #0]
 8001e88:	600b      	str	r3, [r1, #0]
 8001e8a:	bf18      	it	ne
 8001e8c:	b22d      	sxthne	r5, r5
 8001e8e:	e7ef      	b.n	8001e70 <_printf_i+0xbc>
 8001e90:	680b      	ldr	r3, [r1, #0]
 8001e92:	6825      	ldr	r5, [r4, #0]
 8001e94:	1d18      	adds	r0, r3, #4
 8001e96:	6008      	str	r0, [r1, #0]
 8001e98:	0628      	lsls	r0, r5, #24
 8001e9a:	d501      	bpl.n	8001ea0 <_printf_i+0xec>
 8001e9c:	681d      	ldr	r5, [r3, #0]
 8001e9e:	e002      	b.n	8001ea6 <_printf_i+0xf2>
 8001ea0:	0669      	lsls	r1, r5, #25
 8001ea2:	d5fb      	bpl.n	8001e9c <_printf_i+0xe8>
 8001ea4:	881d      	ldrh	r5, [r3, #0]
 8001ea6:	2f6f      	cmp	r7, #111	; 0x6f
 8001ea8:	bf0c      	ite	eq
 8001eaa:	2308      	moveq	r3, #8
 8001eac:	230a      	movne	r3, #10
 8001eae:	4852      	ldr	r0, [pc, #328]	; (8001ff8 <_printf_i+0x244>)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001eb6:	6866      	ldr	r6, [r4, #4]
 8001eb8:	2e00      	cmp	r6, #0
 8001eba:	bfa8      	it	ge
 8001ebc:	6821      	ldrge	r1, [r4, #0]
 8001ebe:	60a6      	str	r6, [r4, #8]
 8001ec0:	bfa4      	itt	ge
 8001ec2:	f021 0104 	bicge.w	r1, r1, #4
 8001ec6:	6021      	strge	r1, [r4, #0]
 8001ec8:	b90d      	cbnz	r5, 8001ece <_printf_i+0x11a>
 8001eca:	2e00      	cmp	r6, #0
 8001ecc:	d04d      	beq.n	8001f6a <_printf_i+0x1b6>
 8001ece:	4616      	mov	r6, r2
 8001ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8001ed8:	5dc7      	ldrb	r7, [r0, r7]
 8001eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ede:	462f      	mov	r7, r5
 8001ee0:	42bb      	cmp	r3, r7
 8001ee2:	460d      	mov	r5, r1
 8001ee4:	d9f4      	bls.n	8001ed0 <_printf_i+0x11c>
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d10b      	bne.n	8001f02 <_printf_i+0x14e>
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	07df      	lsls	r7, r3, #31
 8001eee:	d508      	bpl.n	8001f02 <_printf_i+0x14e>
 8001ef0:	6923      	ldr	r3, [r4, #16]
 8001ef2:	6861      	ldr	r1, [r4, #4]
 8001ef4:	4299      	cmp	r1, r3
 8001ef6:	bfde      	ittt	le
 8001ef8:	2330      	movle	r3, #48	; 0x30
 8001efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001efe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f02:	1b92      	subs	r2, r2, r6
 8001f04:	6122      	str	r2, [r4, #16]
 8001f06:	464b      	mov	r3, r9
 8001f08:	4621      	mov	r1, r4
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	f8cd a000 	str.w	sl, [sp]
 8001f10:	aa03      	add	r2, sp, #12
 8001f12:	f7ff fedf 	bl	8001cd4 <_printf_common>
 8001f16:	3001      	adds	r0, #1
 8001f18:	d14c      	bne.n	8001fb4 <_printf_i+0x200>
 8001f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1e:	b004      	add	sp, #16
 8001f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f24:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <_printf_i+0x244>)
 8001f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001f2a:	680e      	ldr	r6, [r1, #0]
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001f32:	061f      	lsls	r7, r3, #24
 8001f34:	600e      	str	r6, [r1, #0]
 8001f36:	d514      	bpl.n	8001f62 <_printf_i+0x1ae>
 8001f38:	07d9      	lsls	r1, r3, #31
 8001f3a:	bf44      	itt	mi
 8001f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f40:	6023      	strmi	r3, [r4, #0]
 8001f42:	b91d      	cbnz	r5, 8001f4c <_printf_i+0x198>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	f023 0320 	bic.w	r3, r3, #32
 8001f4a:	6023      	str	r3, [r4, #0]
 8001f4c:	2310      	movs	r3, #16
 8001f4e:	e7af      	b.n	8001eb0 <_printf_i+0xfc>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	f043 0320 	orr.w	r3, r3, #32
 8001f56:	6023      	str	r3, [r4, #0]
 8001f58:	2378      	movs	r3, #120	; 0x78
 8001f5a:	4828      	ldr	r0, [pc, #160]	; (8001ffc <_printf_i+0x248>)
 8001f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f60:	e7e3      	b.n	8001f2a <_printf_i+0x176>
 8001f62:	065e      	lsls	r6, r3, #25
 8001f64:	bf48      	it	mi
 8001f66:	b2ad      	uxthmi	r5, r5
 8001f68:	e7e6      	b.n	8001f38 <_printf_i+0x184>
 8001f6a:	4616      	mov	r6, r2
 8001f6c:	e7bb      	b.n	8001ee6 <_printf_i+0x132>
 8001f6e:	680b      	ldr	r3, [r1, #0]
 8001f70:	6826      	ldr	r6, [r4, #0]
 8001f72:	1d1d      	adds	r5, r3, #4
 8001f74:	6960      	ldr	r0, [r4, #20]
 8001f76:	600d      	str	r5, [r1, #0]
 8001f78:	0635      	lsls	r5, r6, #24
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	d501      	bpl.n	8001f82 <_printf_i+0x1ce>
 8001f7e:	6018      	str	r0, [r3, #0]
 8001f80:	e002      	b.n	8001f88 <_printf_i+0x1d4>
 8001f82:	0671      	lsls	r1, r6, #25
 8001f84:	d5fb      	bpl.n	8001f7e <_printf_i+0x1ca>
 8001f86:	8018      	strh	r0, [r3, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4616      	mov	r6, r2
 8001f8c:	6123      	str	r3, [r4, #16]
 8001f8e:	e7ba      	b.n	8001f06 <_printf_i+0x152>
 8001f90:	680b      	ldr	r3, [r1, #0]
 8001f92:	1d1a      	adds	r2, r3, #4
 8001f94:	600a      	str	r2, [r1, #0]
 8001f96:	681e      	ldr	r6, [r3, #0]
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	6862      	ldr	r2, [r4, #4]
 8001f9e:	f000 fb25 	bl	80025ec <memchr>
 8001fa2:	b108      	cbz	r0, 8001fa8 <_printf_i+0x1f4>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	6060      	str	r0, [r4, #4]
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	6123      	str	r3, [r4, #16]
 8001fac:	2300      	movs	r3, #0
 8001fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fb2:	e7a8      	b.n	8001f06 <_printf_i+0x152>
 8001fb4:	4632      	mov	r2, r6
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	4640      	mov	r0, r8
 8001fba:	6923      	ldr	r3, [r4, #16]
 8001fbc:	47d0      	blx	sl
 8001fbe:	3001      	adds	r0, #1
 8001fc0:	d0ab      	beq.n	8001f1a <_printf_i+0x166>
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	079b      	lsls	r3, r3, #30
 8001fc6:	d413      	bmi.n	8001ff0 <_printf_i+0x23c>
 8001fc8:	68e0      	ldr	r0, [r4, #12]
 8001fca:	9b03      	ldr	r3, [sp, #12]
 8001fcc:	4298      	cmp	r0, r3
 8001fce:	bfb8      	it	lt
 8001fd0:	4618      	movlt	r0, r3
 8001fd2:	e7a4      	b.n	8001f1e <_printf_i+0x16a>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	4632      	mov	r2, r6
 8001fd8:	4649      	mov	r1, r9
 8001fda:	4640      	mov	r0, r8
 8001fdc:	47d0      	blx	sl
 8001fde:	3001      	adds	r0, #1
 8001fe0:	d09b      	beq.n	8001f1a <_printf_i+0x166>
 8001fe2:	3501      	adds	r5, #1
 8001fe4:	68e3      	ldr	r3, [r4, #12]
 8001fe6:	9903      	ldr	r1, [sp, #12]
 8001fe8:	1a5b      	subs	r3, r3, r1
 8001fea:	42ab      	cmp	r3, r5
 8001fec:	dcf2      	bgt.n	8001fd4 <_printf_i+0x220>
 8001fee:	e7eb      	b.n	8001fc8 <_printf_i+0x214>
 8001ff0:	2500      	movs	r5, #0
 8001ff2:	f104 0619 	add.w	r6, r4, #25
 8001ff6:	e7f5      	b.n	8001fe4 <_printf_i+0x230>
 8001ff8:	0800296f 	.word	0x0800296f
 8001ffc:	08002980 	.word	0x08002980

08002000 <_sbrk_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	2300      	movs	r3, #0
 8002004:	4d05      	ldr	r5, [pc, #20]	; (800201c <_sbrk_r+0x1c>)
 8002006:	4604      	mov	r4, r0
 8002008:	4608      	mov	r0, r1
 800200a:	602b      	str	r3, [r5, #0]
 800200c:	f7fe fc74 	bl	80008f8 <_sbrk>
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	d102      	bne.n	800201a <_sbrk_r+0x1a>
 8002014:	682b      	ldr	r3, [r5, #0]
 8002016:	b103      	cbz	r3, 800201a <_sbrk_r+0x1a>
 8002018:	6023      	str	r3, [r4, #0]
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	200000a8 	.word	0x200000a8

08002020 <__swbuf_r>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	460e      	mov	r6, r1
 8002024:	4614      	mov	r4, r2
 8002026:	4605      	mov	r5, r0
 8002028:	b118      	cbz	r0, 8002032 <__swbuf_r+0x12>
 800202a:	6983      	ldr	r3, [r0, #24]
 800202c:	b90b      	cbnz	r3, 8002032 <__swbuf_r+0x12>
 800202e:	f000 f9d9 	bl	80023e4 <__sinit>
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <__swbuf_r+0x98>)
 8002034:	429c      	cmp	r4, r3
 8002036:	d12b      	bne.n	8002090 <__swbuf_r+0x70>
 8002038:	686c      	ldr	r4, [r5, #4]
 800203a:	69a3      	ldr	r3, [r4, #24]
 800203c:	60a3      	str	r3, [r4, #8]
 800203e:	89a3      	ldrh	r3, [r4, #12]
 8002040:	071a      	lsls	r2, r3, #28
 8002042:	d52f      	bpl.n	80020a4 <__swbuf_r+0x84>
 8002044:	6923      	ldr	r3, [r4, #16]
 8002046:	b36b      	cbz	r3, 80020a4 <__swbuf_r+0x84>
 8002048:	6923      	ldr	r3, [r4, #16]
 800204a:	6820      	ldr	r0, [r4, #0]
 800204c:	b2f6      	uxtb	r6, r6
 800204e:	1ac0      	subs	r0, r0, r3
 8002050:	6963      	ldr	r3, [r4, #20]
 8002052:	4637      	mov	r7, r6
 8002054:	4283      	cmp	r3, r0
 8002056:	dc04      	bgt.n	8002062 <__swbuf_r+0x42>
 8002058:	4621      	mov	r1, r4
 800205a:	4628      	mov	r0, r5
 800205c:	f000 f92e 	bl	80022bc <_fflush_r>
 8002060:	bb30      	cbnz	r0, 80020b0 <__swbuf_r+0x90>
 8002062:	68a3      	ldr	r3, [r4, #8]
 8002064:	3001      	adds	r0, #1
 8002066:	3b01      	subs	r3, #1
 8002068:	60a3      	str	r3, [r4, #8]
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	6022      	str	r2, [r4, #0]
 8002070:	701e      	strb	r6, [r3, #0]
 8002072:	6963      	ldr	r3, [r4, #20]
 8002074:	4283      	cmp	r3, r0
 8002076:	d004      	beq.n	8002082 <__swbuf_r+0x62>
 8002078:	89a3      	ldrh	r3, [r4, #12]
 800207a:	07db      	lsls	r3, r3, #31
 800207c:	d506      	bpl.n	800208c <__swbuf_r+0x6c>
 800207e:	2e0a      	cmp	r6, #10
 8002080:	d104      	bne.n	800208c <__swbuf_r+0x6c>
 8002082:	4621      	mov	r1, r4
 8002084:	4628      	mov	r0, r5
 8002086:	f000 f919 	bl	80022bc <_fflush_r>
 800208a:	b988      	cbnz	r0, 80020b0 <__swbuf_r+0x90>
 800208c:	4638      	mov	r0, r7
 800208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <__swbuf_r+0x9c>)
 8002092:	429c      	cmp	r4, r3
 8002094:	d101      	bne.n	800209a <__swbuf_r+0x7a>
 8002096:	68ac      	ldr	r4, [r5, #8]
 8002098:	e7cf      	b.n	800203a <__swbuf_r+0x1a>
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <__swbuf_r+0xa0>)
 800209c:	429c      	cmp	r4, r3
 800209e:	bf08      	it	eq
 80020a0:	68ec      	ldreq	r4, [r5, #12]
 80020a2:	e7ca      	b.n	800203a <__swbuf_r+0x1a>
 80020a4:	4621      	mov	r1, r4
 80020a6:	4628      	mov	r0, r5
 80020a8:	f000 f80c 	bl	80020c4 <__swsetup_r>
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d0cb      	beq.n	8002048 <__swbuf_r+0x28>
 80020b0:	f04f 37ff 	mov.w	r7, #4294967295
 80020b4:	e7ea      	b.n	800208c <__swbuf_r+0x6c>
 80020b6:	bf00      	nop
 80020b8:	080029b4 	.word	0x080029b4
 80020bc:	080029d4 	.word	0x080029d4
 80020c0:	08002994 	.word	0x08002994

080020c4 <__swsetup_r>:
 80020c4:	4b32      	ldr	r3, [pc, #200]	; (8002190 <__swsetup_r+0xcc>)
 80020c6:	b570      	push	{r4, r5, r6, lr}
 80020c8:	681d      	ldr	r5, [r3, #0]
 80020ca:	4606      	mov	r6, r0
 80020cc:	460c      	mov	r4, r1
 80020ce:	b125      	cbz	r5, 80020da <__swsetup_r+0x16>
 80020d0:	69ab      	ldr	r3, [r5, #24]
 80020d2:	b913      	cbnz	r3, 80020da <__swsetup_r+0x16>
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 f985 	bl	80023e4 <__sinit>
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <__swsetup_r+0xd0>)
 80020dc:	429c      	cmp	r4, r3
 80020de:	d10f      	bne.n	8002100 <__swsetup_r+0x3c>
 80020e0:	686c      	ldr	r4, [r5, #4]
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020e8:	0719      	lsls	r1, r3, #28
 80020ea:	d42c      	bmi.n	8002146 <__swsetup_r+0x82>
 80020ec:	06dd      	lsls	r5, r3, #27
 80020ee:	d411      	bmi.n	8002114 <__swsetup_r+0x50>
 80020f0:	2309      	movs	r3, #9
 80020f2:	6033      	str	r3, [r6, #0]
 80020f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	81a3      	strh	r3, [r4, #12]
 80020fe:	e03e      	b.n	800217e <__swsetup_r+0xba>
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <__swsetup_r+0xd4>)
 8002102:	429c      	cmp	r4, r3
 8002104:	d101      	bne.n	800210a <__swsetup_r+0x46>
 8002106:	68ac      	ldr	r4, [r5, #8]
 8002108:	e7eb      	b.n	80020e2 <__swsetup_r+0x1e>
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <__swsetup_r+0xd8>)
 800210c:	429c      	cmp	r4, r3
 800210e:	bf08      	it	eq
 8002110:	68ec      	ldreq	r4, [r5, #12]
 8002112:	e7e6      	b.n	80020e2 <__swsetup_r+0x1e>
 8002114:	0758      	lsls	r0, r3, #29
 8002116:	d512      	bpl.n	800213e <__swsetup_r+0x7a>
 8002118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800211a:	b141      	cbz	r1, 800212e <__swsetup_r+0x6a>
 800211c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002120:	4299      	cmp	r1, r3
 8002122:	d002      	beq.n	800212a <__swsetup_r+0x66>
 8002124:	4630      	mov	r0, r6
 8002126:	f7ff fbd7 	bl	80018d8 <_free_r>
 800212a:	2300      	movs	r3, #0
 800212c:	6363      	str	r3, [r4, #52]	; 0x34
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	2300      	movs	r3, #0
 8002138:	6063      	str	r3, [r4, #4]
 800213a:	6923      	ldr	r3, [r4, #16]
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	81a3      	strh	r3, [r4, #12]
 8002146:	6923      	ldr	r3, [r4, #16]
 8002148:	b94b      	cbnz	r3, 800215e <__swsetup_r+0x9a>
 800214a:	89a3      	ldrh	r3, [r4, #12]
 800214c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002154:	d003      	beq.n	800215e <__swsetup_r+0x9a>
 8002156:	4621      	mov	r1, r4
 8002158:	4630      	mov	r0, r6
 800215a:	f000 fa07 	bl	800256c <__smakebuf_r>
 800215e:	89a0      	ldrh	r0, [r4, #12]
 8002160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002164:	f010 0301 	ands.w	r3, r0, #1
 8002168:	d00a      	beq.n	8002180 <__swsetup_r+0xbc>
 800216a:	2300      	movs	r3, #0
 800216c:	60a3      	str	r3, [r4, #8]
 800216e:	6963      	ldr	r3, [r4, #20]
 8002170:	425b      	negs	r3, r3
 8002172:	61a3      	str	r3, [r4, #24]
 8002174:	6923      	ldr	r3, [r4, #16]
 8002176:	b943      	cbnz	r3, 800218a <__swsetup_r+0xc6>
 8002178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800217c:	d1ba      	bne.n	80020f4 <__swsetup_r+0x30>
 800217e:	bd70      	pop	{r4, r5, r6, pc}
 8002180:	0781      	lsls	r1, r0, #30
 8002182:	bf58      	it	pl
 8002184:	6963      	ldrpl	r3, [r4, #20]
 8002186:	60a3      	str	r3, [r4, #8]
 8002188:	e7f4      	b.n	8002174 <__swsetup_r+0xb0>
 800218a:	2000      	movs	r0, #0
 800218c:	e7f7      	b.n	800217e <__swsetup_r+0xba>
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c
 8002194:	080029b4 	.word	0x080029b4
 8002198:	080029d4 	.word	0x080029d4
 800219c:	08002994 	.word	0x08002994

080021a0 <abort>:
 80021a0:	2006      	movs	r0, #6
 80021a2:	b508      	push	{r3, lr}
 80021a4:	f000 fa64 	bl	8002670 <raise>
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7fe fb31 	bl	8000810 <_exit>
	...

080021b0 <__sflush_r>:
 80021b0:	898a      	ldrh	r2, [r1, #12]
 80021b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	4605      	mov	r5, r0
 80021b8:	0710      	lsls	r0, r2, #28
 80021ba:	460c      	mov	r4, r1
 80021bc:	d458      	bmi.n	8002270 <__sflush_r+0xc0>
 80021be:	684b      	ldr	r3, [r1, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	dc05      	bgt.n	80021d0 <__sflush_r+0x20>
 80021c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	dc02      	bgt.n	80021d0 <__sflush_r+0x20>
 80021ca:	2000      	movs	r0, #0
 80021cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021d2:	2e00      	cmp	r6, #0
 80021d4:	d0f9      	beq.n	80021ca <__sflush_r+0x1a>
 80021d6:	2300      	movs	r3, #0
 80021d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021dc:	682f      	ldr	r7, [r5, #0]
 80021de:	602b      	str	r3, [r5, #0]
 80021e0:	d032      	beq.n	8002248 <__sflush_r+0x98>
 80021e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021e4:	89a3      	ldrh	r3, [r4, #12]
 80021e6:	075a      	lsls	r2, r3, #29
 80021e8:	d505      	bpl.n	80021f6 <__sflush_r+0x46>
 80021ea:	6863      	ldr	r3, [r4, #4]
 80021ec:	1ac0      	subs	r0, r0, r3
 80021ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021f0:	b10b      	cbz	r3, 80021f6 <__sflush_r+0x46>
 80021f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021f4:	1ac0      	subs	r0, r0, r3
 80021f6:	2300      	movs	r3, #0
 80021f8:	4602      	mov	r2, r0
 80021fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021fc:	4628      	mov	r0, r5
 80021fe:	6a21      	ldr	r1, [r4, #32]
 8002200:	47b0      	blx	r6
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	d106      	bne.n	8002216 <__sflush_r+0x66>
 8002208:	6829      	ldr	r1, [r5, #0]
 800220a:	291d      	cmp	r1, #29
 800220c:	d82c      	bhi.n	8002268 <__sflush_r+0xb8>
 800220e:	4a2a      	ldr	r2, [pc, #168]	; (80022b8 <__sflush_r+0x108>)
 8002210:	40ca      	lsrs	r2, r1
 8002212:	07d6      	lsls	r6, r2, #31
 8002214:	d528      	bpl.n	8002268 <__sflush_r+0xb8>
 8002216:	2200      	movs	r2, #0
 8002218:	6062      	str	r2, [r4, #4]
 800221a:	6922      	ldr	r2, [r4, #16]
 800221c:	04d9      	lsls	r1, r3, #19
 800221e:	6022      	str	r2, [r4, #0]
 8002220:	d504      	bpl.n	800222c <__sflush_r+0x7c>
 8002222:	1c42      	adds	r2, r0, #1
 8002224:	d101      	bne.n	800222a <__sflush_r+0x7a>
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	b903      	cbnz	r3, 800222c <__sflush_r+0x7c>
 800222a:	6560      	str	r0, [r4, #84]	; 0x54
 800222c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800222e:	602f      	str	r7, [r5, #0]
 8002230:	2900      	cmp	r1, #0
 8002232:	d0ca      	beq.n	80021ca <__sflush_r+0x1a>
 8002234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002238:	4299      	cmp	r1, r3
 800223a:	d002      	beq.n	8002242 <__sflush_r+0x92>
 800223c:	4628      	mov	r0, r5
 800223e:	f7ff fb4b 	bl	80018d8 <_free_r>
 8002242:	2000      	movs	r0, #0
 8002244:	6360      	str	r0, [r4, #52]	; 0x34
 8002246:	e7c1      	b.n	80021cc <__sflush_r+0x1c>
 8002248:	6a21      	ldr	r1, [r4, #32]
 800224a:	2301      	movs	r3, #1
 800224c:	4628      	mov	r0, r5
 800224e:	47b0      	blx	r6
 8002250:	1c41      	adds	r1, r0, #1
 8002252:	d1c7      	bne.n	80021e4 <__sflush_r+0x34>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0c4      	beq.n	80021e4 <__sflush_r+0x34>
 800225a:	2b1d      	cmp	r3, #29
 800225c:	d001      	beq.n	8002262 <__sflush_r+0xb2>
 800225e:	2b16      	cmp	r3, #22
 8002260:	d101      	bne.n	8002266 <__sflush_r+0xb6>
 8002262:	602f      	str	r7, [r5, #0]
 8002264:	e7b1      	b.n	80021ca <__sflush_r+0x1a>
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	e7ad      	b.n	80021cc <__sflush_r+0x1c>
 8002270:	690f      	ldr	r7, [r1, #16]
 8002272:	2f00      	cmp	r7, #0
 8002274:	d0a9      	beq.n	80021ca <__sflush_r+0x1a>
 8002276:	0793      	lsls	r3, r2, #30
 8002278:	bf18      	it	ne
 800227a:	2300      	movne	r3, #0
 800227c:	680e      	ldr	r6, [r1, #0]
 800227e:	bf08      	it	eq
 8002280:	694b      	ldreq	r3, [r1, #20]
 8002282:	eba6 0807 	sub.w	r8, r6, r7
 8002286:	600f      	str	r7, [r1, #0]
 8002288:	608b      	str	r3, [r1, #8]
 800228a:	f1b8 0f00 	cmp.w	r8, #0
 800228e:	dd9c      	ble.n	80021ca <__sflush_r+0x1a>
 8002290:	4643      	mov	r3, r8
 8002292:	463a      	mov	r2, r7
 8002294:	4628      	mov	r0, r5
 8002296:	6a21      	ldr	r1, [r4, #32]
 8002298:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800229a:	47b0      	blx	r6
 800229c:	2800      	cmp	r0, #0
 800229e:	dc06      	bgt.n	80022ae <__sflush_r+0xfe>
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	f04f 30ff 	mov.w	r0, #4294967295
 80022a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022aa:	81a3      	strh	r3, [r4, #12]
 80022ac:	e78e      	b.n	80021cc <__sflush_r+0x1c>
 80022ae:	4407      	add	r7, r0
 80022b0:	eba8 0800 	sub.w	r8, r8, r0
 80022b4:	e7e9      	b.n	800228a <__sflush_r+0xda>
 80022b6:	bf00      	nop
 80022b8:	20400001 	.word	0x20400001

080022bc <_fflush_r>:
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	690b      	ldr	r3, [r1, #16]
 80022c0:	4605      	mov	r5, r0
 80022c2:	460c      	mov	r4, r1
 80022c4:	b913      	cbnz	r3, 80022cc <_fflush_r+0x10>
 80022c6:	2500      	movs	r5, #0
 80022c8:	4628      	mov	r0, r5
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	b118      	cbz	r0, 80022d6 <_fflush_r+0x1a>
 80022ce:	6983      	ldr	r3, [r0, #24]
 80022d0:	b90b      	cbnz	r3, 80022d6 <_fflush_r+0x1a>
 80022d2:	f000 f887 	bl	80023e4 <__sinit>
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <_fflush_r+0x6c>)
 80022d8:	429c      	cmp	r4, r3
 80022da:	d11b      	bne.n	8002314 <_fflush_r+0x58>
 80022dc:	686c      	ldr	r4, [r5, #4]
 80022de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ef      	beq.n	80022c6 <_fflush_r+0xa>
 80022e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022e8:	07d0      	lsls	r0, r2, #31
 80022ea:	d404      	bmi.n	80022f6 <_fflush_r+0x3a>
 80022ec:	0599      	lsls	r1, r3, #22
 80022ee:	d402      	bmi.n	80022f6 <_fflush_r+0x3a>
 80022f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022f2:	f000 f915 	bl	8002520 <__retarget_lock_acquire_recursive>
 80022f6:	4628      	mov	r0, r5
 80022f8:	4621      	mov	r1, r4
 80022fa:	f7ff ff59 	bl	80021b0 <__sflush_r>
 80022fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002300:	4605      	mov	r5, r0
 8002302:	07da      	lsls	r2, r3, #31
 8002304:	d4e0      	bmi.n	80022c8 <_fflush_r+0xc>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	059b      	lsls	r3, r3, #22
 800230a:	d4dd      	bmi.n	80022c8 <_fflush_r+0xc>
 800230c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800230e:	f000 f908 	bl	8002522 <__retarget_lock_release_recursive>
 8002312:	e7d9      	b.n	80022c8 <_fflush_r+0xc>
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <_fflush_r+0x70>)
 8002316:	429c      	cmp	r4, r3
 8002318:	d101      	bne.n	800231e <_fflush_r+0x62>
 800231a:	68ac      	ldr	r4, [r5, #8]
 800231c:	e7df      	b.n	80022de <_fflush_r+0x22>
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <_fflush_r+0x74>)
 8002320:	429c      	cmp	r4, r3
 8002322:	bf08      	it	eq
 8002324:	68ec      	ldreq	r4, [r5, #12]
 8002326:	e7da      	b.n	80022de <_fflush_r+0x22>
 8002328:	080029b4 	.word	0x080029b4
 800232c:	080029d4 	.word	0x080029d4
 8002330:	08002994 	.word	0x08002994

08002334 <std>:
 8002334:	2300      	movs	r3, #0
 8002336:	b510      	push	{r4, lr}
 8002338:	4604      	mov	r4, r0
 800233a:	e9c0 3300 	strd	r3, r3, [r0]
 800233e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002342:	6083      	str	r3, [r0, #8]
 8002344:	8181      	strh	r1, [r0, #12]
 8002346:	6643      	str	r3, [r0, #100]	; 0x64
 8002348:	81c2      	strh	r2, [r0, #14]
 800234a:	6183      	str	r3, [r0, #24]
 800234c:	4619      	mov	r1, r3
 800234e:	2208      	movs	r2, #8
 8002350:	305c      	adds	r0, #92	; 0x5c
 8002352:	f7ff fa41 	bl	80017d8 <memset>
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <std+0x38>)
 8002358:	6224      	str	r4, [r4, #32]
 800235a:	6263      	str	r3, [r4, #36]	; 0x24
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <std+0x3c>)
 800235e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <std+0x40>)
 8002362:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <std+0x44>)
 8002366:	6323      	str	r3, [r4, #48]	; 0x30
 8002368:	bd10      	pop	{r4, pc}
 800236a:	bf00      	nop
 800236c:	080026a9 	.word	0x080026a9
 8002370:	080026cb 	.word	0x080026cb
 8002374:	08002703 	.word	0x08002703
 8002378:	08002727 	.word	0x08002727

0800237c <_cleanup_r>:
 800237c:	4901      	ldr	r1, [pc, #4]	; (8002384 <_cleanup_r+0x8>)
 800237e:	f000 b8af 	b.w	80024e0 <_fwalk_reent>
 8002382:	bf00      	nop
 8002384:	080022bd 	.word	0x080022bd

08002388 <__sfmoreglue>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	2568      	movs	r5, #104	; 0x68
 800238c:	1e4a      	subs	r2, r1, #1
 800238e:	4355      	muls	r5, r2
 8002390:	460e      	mov	r6, r1
 8002392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002396:	f7ff faeb 	bl	8001970 <_malloc_r>
 800239a:	4604      	mov	r4, r0
 800239c:	b140      	cbz	r0, 80023b0 <__sfmoreglue+0x28>
 800239e:	2100      	movs	r1, #0
 80023a0:	e9c0 1600 	strd	r1, r6, [r0]
 80023a4:	300c      	adds	r0, #12
 80023a6:	60a0      	str	r0, [r4, #8]
 80023a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023ac:	f7ff fa14 	bl	80017d8 <memset>
 80023b0:	4620      	mov	r0, r4
 80023b2:	bd70      	pop	{r4, r5, r6, pc}

080023b4 <__sfp_lock_acquire>:
 80023b4:	4801      	ldr	r0, [pc, #4]	; (80023bc <__sfp_lock_acquire+0x8>)
 80023b6:	f000 b8b3 	b.w	8002520 <__retarget_lock_acquire_recursive>
 80023ba:	bf00      	nop
 80023bc:	200000a4 	.word	0x200000a4

080023c0 <__sfp_lock_release>:
 80023c0:	4801      	ldr	r0, [pc, #4]	; (80023c8 <__sfp_lock_release+0x8>)
 80023c2:	f000 b8ae 	b.w	8002522 <__retarget_lock_release_recursive>
 80023c6:	bf00      	nop
 80023c8:	200000a4 	.word	0x200000a4

080023cc <__sinit_lock_acquire>:
 80023cc:	4801      	ldr	r0, [pc, #4]	; (80023d4 <__sinit_lock_acquire+0x8>)
 80023ce:	f000 b8a7 	b.w	8002520 <__retarget_lock_acquire_recursive>
 80023d2:	bf00      	nop
 80023d4:	2000009f 	.word	0x2000009f

080023d8 <__sinit_lock_release>:
 80023d8:	4801      	ldr	r0, [pc, #4]	; (80023e0 <__sinit_lock_release+0x8>)
 80023da:	f000 b8a2 	b.w	8002522 <__retarget_lock_release_recursive>
 80023de:	bf00      	nop
 80023e0:	2000009f 	.word	0x2000009f

080023e4 <__sinit>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	4604      	mov	r4, r0
 80023e8:	f7ff fff0 	bl	80023cc <__sinit_lock_acquire>
 80023ec:	69a3      	ldr	r3, [r4, #24]
 80023ee:	b11b      	cbz	r3, 80023f8 <__sinit+0x14>
 80023f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023f4:	f7ff bff0 	b.w	80023d8 <__sinit_lock_release>
 80023f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023fc:	6523      	str	r3, [r4, #80]	; 0x50
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <__sinit+0x68>)
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <__sinit+0x6c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	62a2      	str	r2, [r4, #40]	; 0x28
 8002406:	42a3      	cmp	r3, r4
 8002408:	bf08      	it	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	4620      	mov	r0, r4
 800240e:	bf08      	it	eq
 8002410:	61a3      	streq	r3, [r4, #24]
 8002412:	f000 f81f 	bl	8002454 <__sfp>
 8002416:	6060      	str	r0, [r4, #4]
 8002418:	4620      	mov	r0, r4
 800241a:	f000 f81b 	bl	8002454 <__sfp>
 800241e:	60a0      	str	r0, [r4, #8]
 8002420:	4620      	mov	r0, r4
 8002422:	f000 f817 	bl	8002454 <__sfp>
 8002426:	2200      	movs	r2, #0
 8002428:	2104      	movs	r1, #4
 800242a:	60e0      	str	r0, [r4, #12]
 800242c:	6860      	ldr	r0, [r4, #4]
 800242e:	f7ff ff81 	bl	8002334 <std>
 8002432:	2201      	movs	r2, #1
 8002434:	2109      	movs	r1, #9
 8002436:	68a0      	ldr	r0, [r4, #8]
 8002438:	f7ff ff7c 	bl	8002334 <std>
 800243c:	2202      	movs	r2, #2
 800243e:	2112      	movs	r1, #18
 8002440:	68e0      	ldr	r0, [r4, #12]
 8002442:	f7ff ff77 	bl	8002334 <std>
 8002446:	2301      	movs	r3, #1
 8002448:	61a3      	str	r3, [r4, #24]
 800244a:	e7d1      	b.n	80023f0 <__sinit+0xc>
 800244c:	080028a8 	.word	0x080028a8
 8002450:	0800237d 	.word	0x0800237d

08002454 <__sfp>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	4607      	mov	r7, r0
 8002458:	f7ff ffac 	bl	80023b4 <__sfp_lock_acquire>
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <__sfp+0x84>)
 800245e:	681e      	ldr	r6, [r3, #0]
 8002460:	69b3      	ldr	r3, [r6, #24]
 8002462:	b913      	cbnz	r3, 800246a <__sfp+0x16>
 8002464:	4630      	mov	r0, r6
 8002466:	f7ff ffbd 	bl	80023e4 <__sinit>
 800246a:	3648      	adds	r6, #72	; 0x48
 800246c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002470:	3b01      	subs	r3, #1
 8002472:	d503      	bpl.n	800247c <__sfp+0x28>
 8002474:	6833      	ldr	r3, [r6, #0]
 8002476:	b30b      	cbz	r3, 80024bc <__sfp+0x68>
 8002478:	6836      	ldr	r6, [r6, #0]
 800247a:	e7f7      	b.n	800246c <__sfp+0x18>
 800247c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002480:	b9d5      	cbnz	r5, 80024b8 <__sfp+0x64>
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <__sfp+0x88>)
 8002484:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002488:	60e3      	str	r3, [r4, #12]
 800248a:	6665      	str	r5, [r4, #100]	; 0x64
 800248c:	f000 f847 	bl	800251e <__retarget_lock_init_recursive>
 8002490:	f7ff ff96 	bl	80023c0 <__sfp_lock_release>
 8002494:	2208      	movs	r2, #8
 8002496:	4629      	mov	r1, r5
 8002498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800249c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80024a0:	6025      	str	r5, [r4, #0]
 80024a2:	61a5      	str	r5, [r4, #24]
 80024a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024a8:	f7ff f996 	bl	80017d8 <memset>
 80024ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80024b4:	4620      	mov	r0, r4
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b8:	3468      	adds	r4, #104	; 0x68
 80024ba:	e7d9      	b.n	8002470 <__sfp+0x1c>
 80024bc:	2104      	movs	r1, #4
 80024be:	4638      	mov	r0, r7
 80024c0:	f7ff ff62 	bl	8002388 <__sfmoreglue>
 80024c4:	4604      	mov	r4, r0
 80024c6:	6030      	str	r0, [r6, #0]
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d1d5      	bne.n	8002478 <__sfp+0x24>
 80024cc:	f7ff ff78 	bl	80023c0 <__sfp_lock_release>
 80024d0:	230c      	movs	r3, #12
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	e7ee      	b.n	80024b4 <__sfp+0x60>
 80024d6:	bf00      	nop
 80024d8:	080028a8 	.word	0x080028a8
 80024dc:	ffff0001 	.word	0xffff0001

080024e0 <_fwalk_reent>:
 80024e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e4:	4606      	mov	r6, r0
 80024e6:	4688      	mov	r8, r1
 80024e8:	2700      	movs	r7, #0
 80024ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024f2:	f1b9 0901 	subs.w	r9, r9, #1
 80024f6:	d505      	bpl.n	8002504 <_fwalk_reent+0x24>
 80024f8:	6824      	ldr	r4, [r4, #0]
 80024fa:	2c00      	cmp	r4, #0
 80024fc:	d1f7      	bne.n	80024ee <_fwalk_reent+0xe>
 80024fe:	4638      	mov	r0, r7
 8002500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002504:	89ab      	ldrh	r3, [r5, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d907      	bls.n	800251a <_fwalk_reent+0x3a>
 800250a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800250e:	3301      	adds	r3, #1
 8002510:	d003      	beq.n	800251a <_fwalk_reent+0x3a>
 8002512:	4629      	mov	r1, r5
 8002514:	4630      	mov	r0, r6
 8002516:	47c0      	blx	r8
 8002518:	4307      	orrs	r7, r0
 800251a:	3568      	adds	r5, #104	; 0x68
 800251c:	e7e9      	b.n	80024f2 <_fwalk_reent+0x12>

0800251e <__retarget_lock_init_recursive>:
 800251e:	4770      	bx	lr

08002520 <__retarget_lock_acquire_recursive>:
 8002520:	4770      	bx	lr

08002522 <__retarget_lock_release_recursive>:
 8002522:	4770      	bx	lr

08002524 <__swhatbuf_r>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	460e      	mov	r6, r1
 8002528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800252c:	4614      	mov	r4, r2
 800252e:	2900      	cmp	r1, #0
 8002530:	461d      	mov	r5, r3
 8002532:	b096      	sub	sp, #88	; 0x58
 8002534:	da07      	bge.n	8002546 <__swhatbuf_r+0x22>
 8002536:	2300      	movs	r3, #0
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	89b3      	ldrh	r3, [r6, #12]
 800253c:	061a      	lsls	r2, r3, #24
 800253e:	d410      	bmi.n	8002562 <__swhatbuf_r+0x3e>
 8002540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002544:	e00e      	b.n	8002564 <__swhatbuf_r+0x40>
 8002546:	466a      	mov	r2, sp
 8002548:	f000 f914 	bl	8002774 <_fstat_r>
 800254c:	2800      	cmp	r0, #0
 800254e:	dbf2      	blt.n	8002536 <__swhatbuf_r+0x12>
 8002550:	9a01      	ldr	r2, [sp, #4]
 8002552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800255a:	425a      	negs	r2, r3
 800255c:	415a      	adcs	r2, r3
 800255e:	602a      	str	r2, [r5, #0]
 8002560:	e7ee      	b.n	8002540 <__swhatbuf_r+0x1c>
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	2000      	movs	r0, #0
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	b016      	add	sp, #88	; 0x58
 800256a:	bd70      	pop	{r4, r5, r6, pc}

0800256c <__smakebuf_r>:
 800256c:	898b      	ldrh	r3, [r1, #12]
 800256e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002570:	079d      	lsls	r5, r3, #30
 8002572:	4606      	mov	r6, r0
 8002574:	460c      	mov	r4, r1
 8002576:	d507      	bpl.n	8002588 <__smakebuf_r+0x1c>
 8002578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	6123      	str	r3, [r4, #16]
 8002580:	2301      	movs	r3, #1
 8002582:	6163      	str	r3, [r4, #20]
 8002584:	b002      	add	sp, #8
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	466a      	mov	r2, sp
 800258a:	ab01      	add	r3, sp, #4
 800258c:	f7ff ffca 	bl	8002524 <__swhatbuf_r>
 8002590:	9900      	ldr	r1, [sp, #0]
 8002592:	4605      	mov	r5, r0
 8002594:	4630      	mov	r0, r6
 8002596:	f7ff f9eb 	bl	8001970 <_malloc_r>
 800259a:	b948      	cbnz	r0, 80025b0 <__smakebuf_r+0x44>
 800259c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025a0:	059a      	lsls	r2, r3, #22
 80025a2:	d4ef      	bmi.n	8002584 <__smakebuf_r+0x18>
 80025a4:	f023 0303 	bic.w	r3, r3, #3
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	e7e3      	b.n	8002578 <__smakebuf_r+0xc>
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <__smakebuf_r+0x7c>)
 80025b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80025b4:	89a3      	ldrh	r3, [r4, #12]
 80025b6:	6020      	str	r0, [r4, #0]
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	81a3      	strh	r3, [r4, #12]
 80025be:	9b00      	ldr	r3, [sp, #0]
 80025c0:	6120      	str	r0, [r4, #16]
 80025c2:	6163      	str	r3, [r4, #20]
 80025c4:	9b01      	ldr	r3, [sp, #4]
 80025c6:	b15b      	cbz	r3, 80025e0 <__smakebuf_r+0x74>
 80025c8:	4630      	mov	r0, r6
 80025ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ce:	f000 f8e3 	bl	8002798 <_isatty_r>
 80025d2:	b128      	cbz	r0, 80025e0 <__smakebuf_r+0x74>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	81a3      	strh	r3, [r4, #12]
 80025e0:	89a0      	ldrh	r0, [r4, #12]
 80025e2:	4305      	orrs	r5, r0
 80025e4:	81a5      	strh	r5, [r4, #12]
 80025e6:	e7cd      	b.n	8002584 <__smakebuf_r+0x18>
 80025e8:	0800237d 	.word	0x0800237d

080025ec <memchr>:
 80025ec:	4603      	mov	r3, r0
 80025ee:	b510      	push	{r4, lr}
 80025f0:	b2c9      	uxtb	r1, r1
 80025f2:	4402      	add	r2, r0
 80025f4:	4293      	cmp	r3, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	d101      	bne.n	80025fe <memchr+0x12>
 80025fa:	2000      	movs	r0, #0
 80025fc:	e003      	b.n	8002606 <memchr+0x1a>
 80025fe:	7804      	ldrb	r4, [r0, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	428c      	cmp	r4, r1
 8002604:	d1f6      	bne.n	80025f4 <memchr+0x8>
 8002606:	bd10      	pop	{r4, pc}

08002608 <__malloc_lock>:
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <__malloc_lock+0x8>)
 800260a:	f7ff bf89 	b.w	8002520 <__retarget_lock_acquire_recursive>
 800260e:	bf00      	nop
 8002610:	200000a0 	.word	0x200000a0

08002614 <__malloc_unlock>:
 8002614:	4801      	ldr	r0, [pc, #4]	; (800261c <__malloc_unlock+0x8>)
 8002616:	f7ff bf84 	b.w	8002522 <__retarget_lock_release_recursive>
 800261a:	bf00      	nop
 800261c:	200000a0 	.word	0x200000a0

08002620 <_raise_r>:
 8002620:	291f      	cmp	r1, #31
 8002622:	b538      	push	{r3, r4, r5, lr}
 8002624:	4604      	mov	r4, r0
 8002626:	460d      	mov	r5, r1
 8002628:	d904      	bls.n	8002634 <_raise_r+0x14>
 800262a:	2316      	movs	r3, #22
 800262c:	6003      	str	r3, [r0, #0]
 800262e:	f04f 30ff 	mov.w	r0, #4294967295
 8002632:	bd38      	pop	{r3, r4, r5, pc}
 8002634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002636:	b112      	cbz	r2, 800263e <_raise_r+0x1e>
 8002638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800263c:	b94b      	cbnz	r3, 8002652 <_raise_r+0x32>
 800263e:	4620      	mov	r0, r4
 8002640:	f000 f830 	bl	80026a4 <_getpid_r>
 8002644:	462a      	mov	r2, r5
 8002646:	4601      	mov	r1, r0
 8002648:	4620      	mov	r0, r4
 800264a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800264e:	f000 b817 	b.w	8002680 <_kill_r>
 8002652:	2b01      	cmp	r3, #1
 8002654:	d00a      	beq.n	800266c <_raise_r+0x4c>
 8002656:	1c59      	adds	r1, r3, #1
 8002658:	d103      	bne.n	8002662 <_raise_r+0x42>
 800265a:	2316      	movs	r3, #22
 800265c:	6003      	str	r3, [r0, #0]
 800265e:	2001      	movs	r0, #1
 8002660:	e7e7      	b.n	8002632 <_raise_r+0x12>
 8002662:	2400      	movs	r4, #0
 8002664:	4628      	mov	r0, r5
 8002666:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800266a:	4798      	blx	r3
 800266c:	2000      	movs	r0, #0
 800266e:	e7e0      	b.n	8002632 <_raise_r+0x12>

08002670 <raise>:
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <raise+0xc>)
 8002672:	4601      	mov	r1, r0
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	f7ff bfd3 	b.w	8002620 <_raise_r>
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c

08002680 <_kill_r>:
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	2300      	movs	r3, #0
 8002684:	4d06      	ldr	r5, [pc, #24]	; (80026a0 <_kill_r+0x20>)
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	602b      	str	r3, [r5, #0]
 800268e:	f7fe f8af 	bl	80007f0 <_kill>
 8002692:	1c43      	adds	r3, r0, #1
 8002694:	d102      	bne.n	800269c <_kill_r+0x1c>
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	b103      	cbz	r3, 800269c <_kill_r+0x1c>
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	bd38      	pop	{r3, r4, r5, pc}
 800269e:	bf00      	nop
 80026a0:	200000a8 	.word	0x200000a8

080026a4 <_getpid_r>:
 80026a4:	f7fe b89d 	b.w	80007e2 <_getpid>

080026a8 <__sread>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	460c      	mov	r4, r1
 80026ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b0:	f000 f894 	bl	80027dc <_read_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bfab      	itete	ge
 80026b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026ba:	89a3      	ldrhlt	r3, [r4, #12]
 80026bc:	181b      	addge	r3, r3, r0
 80026be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026c2:	bfac      	ite	ge
 80026c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80026c6:	81a3      	strhlt	r3, [r4, #12]
 80026c8:	bd10      	pop	{r4, pc}

080026ca <__swrite>:
 80026ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ce:	461f      	mov	r7, r3
 80026d0:	898b      	ldrh	r3, [r1, #12]
 80026d2:	4605      	mov	r5, r0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	460c      	mov	r4, r1
 80026d8:	4616      	mov	r6, r2
 80026da:	d505      	bpl.n	80026e8 <__swrite+0x1e>
 80026dc:	2302      	movs	r3, #2
 80026de:	2200      	movs	r2, #0
 80026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e4:	f000 f868 	bl	80027b8 <_lseek_r>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	4632      	mov	r2, r6
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	4628      	mov	r0, r5
 80026f4:	463b      	mov	r3, r7
 80026f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026fe:	f000 b817 	b.w	8002730 <_write_r>

08002702 <__sseek>:
 8002702:	b510      	push	{r4, lr}
 8002704:	460c      	mov	r4, r1
 8002706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270a:	f000 f855 	bl	80027b8 <_lseek_r>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	bf15      	itete	ne
 8002714:	6560      	strne	r0, [r4, #84]	; 0x54
 8002716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800271a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800271e:	81a3      	strheq	r3, [r4, #12]
 8002720:	bf18      	it	ne
 8002722:	81a3      	strhne	r3, [r4, #12]
 8002724:	bd10      	pop	{r4, pc}

08002726 <__sclose>:
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 b813 	b.w	8002754 <_close_r>
	...

08002730 <_write_r>:
 8002730:	b538      	push	{r3, r4, r5, lr}
 8002732:	4604      	mov	r4, r0
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	2200      	movs	r2, #0
 800273a:	4d05      	ldr	r5, [pc, #20]	; (8002750 <_write_r+0x20>)
 800273c:	602a      	str	r2, [r5, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f7fe f88d 	bl	800085e <_write>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d102      	bne.n	800274e <_write_r+0x1e>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	b103      	cbz	r3, 800274e <_write_r+0x1e>
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	200000a8 	.word	0x200000a8

08002754 <_close_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	2300      	movs	r3, #0
 8002758:	4d05      	ldr	r5, [pc, #20]	; (8002770 <_close_r+0x1c>)
 800275a:	4604      	mov	r4, r0
 800275c:	4608      	mov	r0, r1
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	f7fe f899 	bl	8000896 <_close>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	d102      	bne.n	800276e <_close_r+0x1a>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	b103      	cbz	r3, 800276e <_close_r+0x1a>
 800276c:	6023      	str	r3, [r4, #0]
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	200000a8 	.word	0x200000a8

08002774 <_fstat_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d06      	ldr	r5, [pc, #24]	; (8002794 <_fstat_r+0x20>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	f7fe f893 	bl	80008ac <_fstat>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	d102      	bne.n	8002790 <_fstat_r+0x1c>
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	b103      	cbz	r3, 8002790 <_fstat_r+0x1c>
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	bd38      	pop	{r3, r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	200000a8 	.word	0x200000a8

08002798 <_isatty_r>:
 8002798:	b538      	push	{r3, r4, r5, lr}
 800279a:	2300      	movs	r3, #0
 800279c:	4d05      	ldr	r5, [pc, #20]	; (80027b4 <_isatty_r+0x1c>)
 800279e:	4604      	mov	r4, r0
 80027a0:	4608      	mov	r0, r1
 80027a2:	602b      	str	r3, [r5, #0]
 80027a4:	f7fe f891 	bl	80008ca <_isatty>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d102      	bne.n	80027b2 <_isatty_r+0x1a>
 80027ac:	682b      	ldr	r3, [r5, #0]
 80027ae:	b103      	cbz	r3, 80027b2 <_isatty_r+0x1a>
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
 80027b4:	200000a8 	.word	0x200000a8

080027b8 <_lseek_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	4d05      	ldr	r5, [pc, #20]	; (80027d8 <_lseek_r+0x20>)
 80027c4:	602a      	str	r2, [r5, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f7fe f889 	bl	80008de <_lseek>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d102      	bne.n	80027d6 <_lseek_r+0x1e>
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	b103      	cbz	r3, 80027d6 <_lseek_r+0x1e>
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	200000a8 	.word	0x200000a8

080027dc <_read_r>:
 80027dc:	b538      	push	{r3, r4, r5, lr}
 80027de:	4604      	mov	r4, r0
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	2200      	movs	r2, #0
 80027e6:	4d05      	ldr	r5, [pc, #20]	; (80027fc <_read_r+0x20>)
 80027e8:	602a      	str	r2, [r5, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f7fe f81a 	bl	8000824 <_read>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d102      	bne.n	80027fa <_read_r+0x1e>
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	b103      	cbz	r3, 80027fa <_read_r+0x1e>
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	200000a8 	.word	0x200000a8

08002800 <_init>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr

0800280c <_fini>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr
