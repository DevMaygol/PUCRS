
Q1_T2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f94  08001f94  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001f94  08001f94  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f94  08001f94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  0800200c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800200c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004490  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001146  00000000  00000000  00024529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00025670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  00025ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164d3  00000000  00000000  00025e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004eee  00000000  00000000  0003c32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d9ff  00000000  00000000  00041219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bec18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012f0  00000000  00000000  000bec6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f18 	.word	0x08001f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001f18 	.word	0x08001f18

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b09e      	sub	sp, #120	; 0x78
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb91 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8cf 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f909 	bl	8000370 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  uint8_t estado = 1;
 800015e:	2301      	movs	r3, #1
 8000160:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  int tempo = 0,tempo_1 = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	673b      	str	r3, [r7, #112]	; 0x70
 8000168:	2300      	movs	r3, #0
 800016a:	66fb      	str	r3, [r7, #108]	; 0x6c
  int tempo_2 = 0;
 800016c:	2300      	movs	r3, #0
 800016e:	66bb      	str	r3, [r7, #104]	; 0x68
  char lcd_time[100];


  lcd_init(cursor_apagado);
 8000170:	200c      	movs	r0, #12
 8000172:	f000 fa57 	bl	8000624 <lcd_init>
  lcd_clear ();
 8000176:	f000 fa77 	bl	8000668 <lcd_clear>

  lcd_goto(21,3);
 800017a:	2103      	movs	r1, #3
 800017c:	2015      	movs	r0, #21
 800017e:	f000 fa7a 	bl	8000676 <lcd_goto>
  sprintf(lcd_time,"%d  ", (tempo_2));
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000186:	4958      	ldr	r1, [pc, #352]	; (80002e8 <main+0x19c>)
 8000188:	4618      	mov	r0, r3
 800018a:	f001 fa8b 	bl	80016a4 <siprintf>
  lcd_wrstr(lcd_time);
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fa9a 	bl	80006ca <lcd_wrstr>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GetTick() > tempo + 100){
 8000196:	f000 fbc7 	bl	8000928 <HAL_GetTick>
 800019a:	4602      	mov	r2, r0
 800019c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800019e:	3364      	adds	r3, #100	; 0x64
 80001a0:	429a      	cmp	r2, r3
 80001a2:	d93d      	bls.n	8000220 <main+0xd4>
		  tempo = HAL_GetTick();
 80001a4:	f000 fbc0 	bl	8000928 <HAL_GetTick>
 80001a8:	4603      	mov	r3, r0
 80001aa:	673b      	str	r3, [r7, #112]	; 0x70
		  sprintf(lcd_time,"%d  ", (tempo_2));
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80001b0:	494d      	ldr	r1, [pc, #308]	; (80002e8 <main+0x19c>)
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fa76 	bl	80016a4 <siprintf>

		  switch(estado){
 80001b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80001bc:	2b03      	cmp	r3, #3
 80001be:	d01e      	beq.n	80001fe <main+0xb2>
 80001c0:	2b03      	cmp	r3, #3
 80001c2:	dc25      	bgt.n	8000210 <main+0xc4>
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d002      	beq.n	80001ce <main+0x82>
 80001c8:	2b02      	cmp	r3, #2
 80001ca:	d00c      	beq.n	80001e6 <main+0x9a>
 80001cc:	e020      	b.n	8000210 <main+0xc4>
		  case 1:
			  tempo_2++;
 80001ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80001d0:	3301      	adds	r3, #1
 80001d2:	66bb      	str	r3, [r7, #104]	; 0x68
			  lcd_goto(21,3);
 80001d4:	2103      	movs	r1, #3
 80001d6:	2015      	movs	r0, #21
 80001d8:	f000 fa4d 	bl	8000676 <lcd_goto>
			  lcd_wrstr(lcd_time);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fa73 	bl	80006ca <lcd_wrstr>
			  break;
 80001e4:	e01d      	b.n	8000222 <main+0xd6>
		  case 2:
			  tempo_2--;
 80001e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80001e8:	3b01      	subs	r3, #1
 80001ea:	66bb      	str	r3, [r7, #104]	; 0x68
			  lcd_goto(21,3);
 80001ec:	2103      	movs	r1, #3
 80001ee:	2015      	movs	r0, #21
 80001f0:	f000 fa41 	bl	8000676 <lcd_goto>
			  lcd_wrstr(lcd_time);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fa67 	bl	80006ca <lcd_wrstr>
			  break;
 80001fc:	e011      	b.n	8000222 <main+0xd6>

		  case 3:
			  lcd_goto(21,3);
 80001fe:	2103      	movs	r1, #3
 8000200:	2015      	movs	r0, #21
 8000202:	f000 fa38 	bl	8000676 <lcd_goto>
			  lcd_wrstr(lcd_time);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fa5e 	bl	80006ca <lcd_wrstr>
			  break;
 800020e:	e008      	b.n	8000222 <main+0xd6>

		  default:
			  lcd_goto(0,0);
 8000210:	2100      	movs	r1, #0
 8000212:	2000      	movs	r0, #0
 8000214:	f000 fa2f 	bl	8000676 <lcd_goto>
			  lcd_wrstr("ERRO");
 8000218:	4834      	ldr	r0, [pc, #208]	; (80002ec <main+0x1a0>)
 800021a:	f000 fa56 	bl	80006ca <lcd_wrstr>
			  break;
 800021e:	e000      	b.n	8000222 <main+0xd6>
		  }
	  }
 8000220:	bf00      	nop

	  if(HAL_GetTick()>tempo_1+5){
 8000222:	f000 fb81 	bl	8000928 <HAL_GetTick>
 8000226:	4602      	mov	r2, r0
 8000228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800022a:	3305      	adds	r3, #5
 800022c:	429a      	cmp	r2, r3
 800022e:	d9b2      	bls.n	8000196 <main+0x4a>
		  tempo_1 = HAL_GetTick();
 8000230:	f000 fb7a 	bl	8000928 <HAL_GetTick>
 8000234:	4603      	mov	r3, r0
 8000236:	66fb      	str	r3, [r7, #108]	; 0x6c
		  // Estabalece um limite de contagem
		  if(tempo_2 > 999) tempo_2 = 999;
 8000238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800023a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800023e:	db02      	blt.n	8000246 <main+0xfa>
 8000240:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000244:	66bb      	str	r3, [r7, #104]	; 0x68
		  if(tempo_2 < -99) tempo_2 = -99;
 8000246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000248:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800024c:	da02      	bge.n	8000254 <main+0x108>
 800024e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000252:	66bb      	str	r3, [r7, #104]	; 0x68

		  // SOMADOR
		  if(!(GPIOA->IDR & (1<<8))){
 8000254:	4b26      	ldr	r3, [pc, #152]	; (80002f0 <main+0x1a4>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10a      	bne.n	8000276 <main+0x12a>
			  if(estado != 3) estado = 1;
 8000260:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000264:	2b03      	cmp	r3, #3
 8000266:	d003      	beq.n	8000270 <main+0x124>
 8000268:	2301      	movs	r3, #1
 800026a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800026e:	e002      	b.n	8000276 <main+0x12a>
			  else tempo_2++;
 8000270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000272:	3301      	adds	r3, #1
 8000274:	66bb      	str	r3, [r7, #104]	; 0x68
		  }
		  // SUBTRATOR
		  if(!(GPIOB->IDR & (1<<5))){
 8000276:	4b1f      	ldr	r3, [pc, #124]	; (80002f4 <main+0x1a8>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f003 0320 	and.w	r3, r3, #32
 800027e:	2b00      	cmp	r3, #0
 8000280:	d10a      	bne.n	8000298 <main+0x14c>
			  if(estado != 3) estado = 2;
 8000282:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000286:	2b03      	cmp	r3, #3
 8000288:	d003      	beq.n	8000292 <main+0x146>
 800028a:	2302      	movs	r3, #2
 800028c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000290:	e002      	b.n	8000298 <main+0x14c>
			  else tempo_2--;
 8000292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000294:	3b01      	subs	r3, #1
 8000296:	66bb      	str	r3, [r7, #104]	; 0x68
		  }
		  // CONF
		  if(!(GPIOB->IDR & (1<<7))){
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <main+0x1a8>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d10a      	bne.n	80002ba <main+0x16e>
			  if(estado == 3) estado = 1;
 80002a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d103      	bne.n	80002b4 <main+0x168>
 80002ac:	2301      	movs	r3, #1
 80002ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80002b2:	e002      	b.n	80002ba <main+0x16e>
			  else estado = 3;
 80002b4:	2303      	movs	r3, #3
 80002b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  }
		  while(!(GPIOB->IDR & (1<<7))){}
 80002ba:	bf00      	nop
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <main+0x1a8>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <main+0x170>
		  while(!(GPIOA->IDR & (1<<8))){}
 80002c8:	bf00      	nop
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <main+0x1a4>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <main+0x17e>
		  while(!(GPIOB->IDR & (1<<5))){}
 80002d6:	bf00      	nop
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <main+0x1a8>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <main+0x18c>
	  if(HAL_GetTick() > tempo + 100){
 80002e4:	e757      	b.n	8000196 <main+0x4a>
 80002e6:	bf00      	nop
 80002e8:	08001f30 	.word	0x08001f30
 80002ec:	08001f38 	.word	0x08001f38
 80002f0:	40010800 	.word	0x40010800
 80002f4:	40010c00 	.word	0x40010c00

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 f9c4 	bl	8001694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800031a:	2302      	movs	r3, #2
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	2301      	movs	r3, #1
 8000320:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	2310      	movs	r3, #16
 8000324:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000326:	2300      	movs	r3, #0
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fd9e 	bl	8000e70 <HAL_RCC_OscConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800033a:	f000 f9db 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033e:	230f      	movs	r3, #15
 8000340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f001 f80a 	bl	8001370 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000362:	f000 f9c7 	bl	80006f4 <Error_Handler>
  }
}
 8000366:	bf00      	nop
 8000368:	3740      	adds	r7, #64	; 0x40
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <MX_GPIO_Init+0xd0>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <MX_GPIO_Init+0xd0>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_GPIO_Init+0xd0>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_GPIO_Init+0xd0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a27      	ldr	r2, [pc, #156]	; (8000440 <MX_GPIO_Init+0xd0>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_GPIO_Init+0xd0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f240 210d 	movw	r1, #525	; 0x20d
 80003ba:	4822      	ldr	r0, [pc, #136]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003bc:	f000 fd40 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_6, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2148      	movs	r1, #72	; 0x48
 80003c4:	4820      	ldr	r0, [pc, #128]	; (8000448 <MX_GPIO_Init+0xd8>)
 80003c6:	f000 fd3b 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 80003ca:	f240 230d 	movw	r3, #525	; 0x20d
 80003ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	4619      	mov	r1, r3
 80003e2:	4818      	ldr	r0, [pc, #96]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003e4:	f000 fbb2 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	4619      	mov	r1, r3
 80003fc:	4811      	ldr	r0, [pc, #68]	; (8000444 <MX_GPIO_Init+0xd4>)
 80003fe:	f000 fba5 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000402:	2348      	movs	r3, #72	; 0x48
 8000404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <MX_GPIO_Init+0xd8>)
 800041a:	f000 fb97 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800041e:	23a0      	movs	r3, #160	; 0xa0
 8000420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000426:	2301      	movs	r3, #1
 8000428:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_GPIO_Init+0xd8>)
 8000432:	f000 fb8b 	bl	8000b4c <HAL_GPIO_Init>

}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800
 8000448:	40010c00 	.word	0x40010c00

0800044c <udelay>:

/* USER CODE BEGIN 4 */
void udelay(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
	int tempo = 7;
 8000452:	2307      	movs	r3, #7
 8000454:	607b      	str	r3, [r7, #4]
	while(tempo--);
 8000456:	bf00      	nop
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1fa      	bne.n	8000458 <udelay+0xc>
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <delayus>:

void delayus(int tempo)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
	while(tempo--) udelay();
 8000476:	e001      	b.n	800047c <delayus+0xe>
 8000478:	f7ff ffe8 	bl	800044c <udelay>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	1e5a      	subs	r2, r3, #1
 8000480:	607a      	str	r2, [r7, #4]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1f8      	bne.n	8000478 <delayus+0xa>
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <lcd_send4bits>:


void lcd_send4bits(uint8_t dat)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	if((dat & (1<<0)) == 0) d4_0; else d4_1;
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d103      	bne.n	80004ac <lcd_send4bits+0x1c>
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <lcd_send4bits+0x74>)
 80004a6:	2208      	movs	r2, #8
 80004a8:	615a      	str	r2, [r3, #20]
 80004aa:	e002      	b.n	80004b2 <lcd_send4bits+0x22>
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <lcd_send4bits+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	611a      	str	r2, [r3, #16]
	if((dat & (1<<1)) == 0) d5_0; else d5_1;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d103      	bne.n	80004c4 <lcd_send4bits+0x34>
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <lcd_send4bits+0x78>)
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	615a      	str	r2, [r3, #20]
 80004c2:	e002      	b.n	80004ca <lcd_send4bits+0x3a>
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <lcd_send4bits+0x78>)
 80004c6:	2240      	movs	r2, #64	; 0x40
 80004c8:	611a      	str	r2, [r3, #16]
	if((dat & (1<<2)) == 0) d6_0; else d6_1;
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d103      	bne.n	80004dc <lcd_send4bits+0x4c>
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <lcd_send4bits+0x74>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	615a      	str	r2, [r3, #20]
 80004da:	e002      	b.n	80004e2 <lcd_send4bits+0x52>
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <lcd_send4bits+0x74>)
 80004de:	2204      	movs	r2, #4
 80004e0:	611a      	str	r2, [r3, #16]
	if((dat & (1<<3)) == 0) d7_0; else d7_1;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	f003 0308 	and.w	r3, r3, #8
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d103      	bne.n	80004f4 <lcd_send4bits+0x64>
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <lcd_send4bits+0x74>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	615a      	str	r2, [r3, #20]

}
 80004f2:	e002      	b.n	80004fa <lcd_send4bits+0x6a>
	if((dat & (1<<3)) == 0) d7_0; else d7_1;
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <lcd_send4bits+0x74>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	611a      	str	r2, [r3, #16]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40010800 	.word	0x40010800
 8000508:	40010c00 	.word	0x40010c00

0800050c <lcd_wrcom4>:

//Comando de 4 bits
void lcd_wrcom4(uint8_t com)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(com);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffb9 	bl	8000490 <lcd_send4bits>
	rs_0;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <lcd_wrcom4+0x3c>)
 8000520:	2208      	movs	r2, #8
 8000522:	615a      	str	r2, [r3, #20]
	en_1;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <lcd_wrcom4+0x40>)
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	611a      	str	r2, [r3, #16]
	delayus(5);
 800052c:	2005      	movs	r0, #5
 800052e:	f7ff ff9e 	bl	800046e <delayus>
	en_0;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <lcd_wrcom4+0x40>)
 8000534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000538:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f000 f9fe 	bl	800093c <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010c00 	.word	0x40010c00
 800054c:	40010800 	.word	0x40010800

08000550 <lcd_wrcom>:

// Comando de 8 bits
void lcd_wrcom(uint8_t com)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(com>>4);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff95 	bl	8000490 <lcd_send4bits>
	rs_0;
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <lcd_wrcom+0x60>)
 8000568:	2208      	movs	r2, #8
 800056a:	615a      	str	r2, [r3, #20]
	en_1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <lcd_wrcom+0x64>)
 800056e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000572:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000574:	2005      	movs	r0, #5
 8000576:	f7ff ff7a 	bl	800046e <delayus>
	en_0;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <lcd_wrcom+0x64>)
 800057c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000580:	615a      	str	r2, [r3, #20]

	lcd_send4bits(com);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff83 	bl	8000490 <lcd_send4bits>
	en_1;
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <lcd_wrcom+0x64>)
 800058c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000590:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000592:	2005      	movs	r0, #5
 8000594:	f7ff ff6b 	bl	800046e <delayus>
	en_0;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <lcd_wrcom+0x64>)
 800059a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059e:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 80005a0:	2005      	movs	r0, #5
 80005a2:	f000 f9cb 	bl	800093c <HAL_Delay>


}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40010800 	.word	0x40010800

080005b8 <lcd_wrchar>:

void lcd_wrchar(char ch)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	lcd_send4bits(ch>>4);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	091b      	lsrs	r3, r3, #4
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff61 	bl	8000490 <lcd_send4bits>
	rs_1;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <lcd_wrchar+0x64>)
 80005d0:	2208      	movs	r2, #8
 80005d2:	611a      	str	r2, [r3, #16]
	en_1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <lcd_wrchar+0x68>)
 80005d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005da:	611a      	str	r2, [r3, #16]
	delayus(5);
 80005dc:	2005      	movs	r0, #5
 80005de:	f7ff ff46 	bl	800046e <delayus>
	en_0;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <lcd_wrchar+0x68>)
 80005e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e8:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 80005ea:	2005      	movs	r0, #5
 80005ec:	f000 f9a6 	bl	800093c <HAL_Delay>

	lcd_send4bits(ch);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff4c 	bl	8000490 <lcd_send4bits>
	en_1;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <lcd_wrchar+0x68>)
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	611a      	str	r2, [r3, #16]
	delayus(5);
 8000600:	2005      	movs	r0, #5
 8000602:	f7ff ff34 	bl	800046e <delayus>
	en_0;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <lcd_wrchar+0x68>)
 8000608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060c:	615a      	str	r2, [r3, #20]
	HAL_Delay(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f000 f994 	bl	800093c <HAL_Delay>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40010c00 	.word	0x40010c00
 8000620:	40010800 	.word	0x40010800

08000624 <lcd_init>:

void lcd_init(uint8_t cursor)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	lcd_wrcom4(3);
 800062e:	2003      	movs	r0, #3
 8000630:	f7ff ff6c 	bl	800050c <lcd_wrcom4>
	lcd_wrcom4(3);
 8000634:	2003      	movs	r0, #3
 8000636:	f7ff ff69 	bl	800050c <lcd_wrcom4>
	lcd_wrcom4(3);
 800063a:	2003      	movs	r0, #3
 800063c:	f7ff ff66 	bl	800050c <lcd_wrcom4>
	lcd_wrcom4(2);
 8000640:	2002      	movs	r0, #2
 8000642:	f7ff ff63 	bl	800050c <lcd_wrcom4>

	lcd_wrcom(0x28);
 8000646:	2028      	movs	r0, #40	; 0x28
 8000648:	f7ff ff82 	bl	8000550 <lcd_wrcom>
	lcd_wrcom(cursor);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff7e 	bl	8000550 <lcd_wrcom>
	lcd_wrcom(0x06);
 8000654:	2006      	movs	r0, #6
 8000656:	f7ff ff7b 	bl	8000550 <lcd_wrcom>
	lcd_wrcom(0x01);
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ff78 	bl	8000550 <lcd_wrcom>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_clear>:

void lcd_clear (void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	lcd_wrcom(0x01);
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ff6f 	bl	8000550 <lcd_wrcom>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <lcd_goto>:

void lcd_goto(uint8_t x, uint8_t y)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	460a      	mov	r2, r1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	4613      	mov	r3, r2
 8000684:	71bb      	strb	r3, [r7, #6]
	uint8_t com = 0x80;
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	73fb      	strb	r3, [r7, #15]
	if(y==0) com = 0x80 + x;
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <lcd_goto+0x20>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3b80      	subs	r3, #128	; 0x80
 8000694:	73fb      	strb	r3, [r7, #15]
	if(y==1) com = 0xC0 + x;
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d102      	bne.n	80006a2 <lcd_goto+0x2c>
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b40      	subs	r3, #64	; 0x40
 80006a0:	73fb      	strb	r3, [r7, #15]
	if(y==2) com = 0x90 + x;
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d102      	bne.n	80006ae <lcd_goto+0x38>
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3b70      	subs	r3, #112	; 0x70
 80006ac:	73fb      	strb	r3, [r7, #15]
	if(y==3) com = 0xD0 + x;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d102      	bne.n	80006ba <lcd_goto+0x44>
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3b30      	subs	r3, #48	; 0x30
 80006b8:	73fb      	strb	r3, [r7, #15]

	lcd_wrcom(com);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff47 	bl	8000550 <lcd_wrcom>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <lcd_wrstr>:

void lcd_wrstr(char *str)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
	while(*str) lcd_wrchar(*(str++));
 80006d2:	e006      	b.n	80006e2 <lcd_wrstr+0x18>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	1c5a      	adds	r2, r3, #1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff6b 	bl	80005b8 <lcd_wrchar>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f4      	bne.n	80006d4 <lcd_wrstr+0xa>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_MspInit+0x5c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_MspInit+0x5c>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x5c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x5c>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_MspInit+0x60>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_MspInit+0x60>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	40021000 	.word	0x40021000
 8000760:	40010000 	.word	0x40010000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f8ab 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <_sbrk+0x5c>)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <_sbrk+0x60>)
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x64>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <_sbrk+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d207      	bcs.n	80007f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e4:	f000 ff2c 	bl	8001640 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	220c      	movs	r2, #12
 80007ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e009      	b.n	8000808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <_sbrk+0x64>)
 8000804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20002800 	.word	0x20002800
 8000814:	00000400 	.word	0x00000400
 8000818:	2000008c 	.word	0x2000008c
 800081c:	200000b0 	.word	0x200000b0

08000820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800082c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800082e:	e003      	b.n	8000838 <LoopCopyDataInit>

08000830 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000830:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000832:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000834:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000836:	3104      	adds	r1, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000838:	480a      	ldr	r0, [pc, #40]	; (8000864 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800083c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800083e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000840:	d3f6      	bcc.n	8000830 <CopyDataInit>
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000844:	e002      	b.n	800084c <LoopFillZerobss>

08000846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000848:	f842 3b04 	str.w	r3, [r2], #4

0800084c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800084e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000850:	d3f9      	bcc.n	8000846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000852:	f7ff ffe5 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000856:	f000 fef9 	bl	800164c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fc77 	bl	800014c <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r3, =_sidata
 8000860:	08001f9c 	.word	0x08001f9c
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000868:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800086c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000870:	200000ac 	.word	0x200000ac

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f92b 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff ff34 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f935 	bl	8000b32 <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f90b 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	20000008 	.word	0x20000008
 8000924:	20000098 	.word	0x20000098

08000928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000098 	.word	0x20000098

0800093c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000944:	f7ff fff0 	bl	8000928 <HAL_GetTick>
 8000948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d005      	beq.n	8000962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_Delay+0x44>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000962:	bf00      	nop
 8000964:	f7ff ffe0 	bl	8000928 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8f7      	bhi.n	8000964 <HAL_Delay+0x28>
  {
  }
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000008 	.word	0x20000008

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff49 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff5e 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffb0 	bl	8000aa0 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b08b      	sub	sp, #44	; 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5e:	e148      	b.n	8000df2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b60:	2201      	movs	r2, #1
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f040 8137 	bne.w	8000dec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4aa3      	ldr	r2, [pc, #652]	; (8000e10 <HAL_GPIO_Init+0x2c4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d05e      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000b88:	4aa1      	ldr	r2, [pc, #644]	; (8000e10 <HAL_GPIO_Init+0x2c4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d875      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000b8e:	4aa1      	ldr	r2, [pc, #644]	; (8000e14 <HAL_GPIO_Init+0x2c8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d058      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000b94:	4a9f      	ldr	r2, [pc, #636]	; (8000e14 <HAL_GPIO_Init+0x2c8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d86f      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000b9a:	4a9f      	ldr	r2, [pc, #636]	; (8000e18 <HAL_GPIO_Init+0x2cc>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d052      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000ba0:	4a9d      	ldr	r2, [pc, #628]	; (8000e18 <HAL_GPIO_Init+0x2cc>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d869      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000ba6:	4a9d      	ldr	r2, [pc, #628]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d04c      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000bac:	4a9b      	ldr	r2, [pc, #620]	; (8000e1c <HAL_GPIO_Init+0x2d0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d863      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bb2:	4a9b      	ldr	r2, [pc, #620]	; (8000e20 <HAL_GPIO_Init+0x2d4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d046      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
 8000bb8:	4a99      	ldr	r2, [pc, #612]	; (8000e20 <HAL_GPIO_Init+0x2d4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d85d      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bbe:	2b12      	cmp	r3, #18
 8000bc0:	d82a      	bhi.n	8000c18 <HAL_GPIO_Init+0xcc>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d859      	bhi.n	8000c7a <HAL_GPIO_Init+0x12e>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <HAL_GPIO_Init+0x80>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c21 	.word	0x08000c21
 8000bd4:	08000c33 	.word	0x08000c33
 8000bd8:	08000c75 	.word	0x08000c75
 8000bdc:	08000c7b 	.word	0x08000c7b
 8000be0:	08000c7b 	.word	0x08000c7b
 8000be4:	08000c7b 	.word	0x08000c7b
 8000be8:	08000c7b 	.word	0x08000c7b
 8000bec:	08000c7b 	.word	0x08000c7b
 8000bf0:	08000c7b 	.word	0x08000c7b
 8000bf4:	08000c7b 	.word	0x08000c7b
 8000bf8:	08000c7b 	.word	0x08000c7b
 8000bfc:	08000c7b 	.word	0x08000c7b
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c7b 	.word	0x08000c7b
 8000c08:	08000c7b 	.word	0x08000c7b
 8000c0c:	08000c7b 	.word	0x08000c7b
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	4a82      	ldr	r2, [pc, #520]	; (8000e24 <HAL_GPIO_Init+0x2d8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c1e:	e02c      	b.n	8000c7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e029      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e024      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	3308      	adds	r3, #8
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e01f      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	330c      	adds	r3, #12
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e01a      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	623b      	str	r3, [r7, #32]
          break;
 8000c52:	e013      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d105      	bne.n	8000c68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	611a      	str	r2, [r3, #16]
          break;
 8000c66:	e009      	b.n	8000c7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	615a      	str	r2, [r3, #20]
          break;
 8000c72:	e003      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e000      	b.n	8000c7c <HAL_GPIO_Init+0x130>
          break;
 8000c7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2bff      	cmp	r3, #255	; 0xff
 8000c80:	d801      	bhi.n	8000c86 <HAL_GPIO_Init+0x13a>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	e001      	b.n	8000c8a <HAL_GPIO_Init+0x13e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	2bff      	cmp	r3, #255	; 0xff
 8000c90:	d802      	bhi.n	8000c98 <HAL_GPIO_Init+0x14c>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	e002      	b.n	8000c9e <HAL_GPIO_Init+0x152>
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3b08      	subs	r3, #8
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	210f      	movs	r1, #15
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	6a39      	ldr	r1, [r7, #32]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8090 	beq.w	8000dec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ccc:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a55      	ldr	r2, [pc, #340]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_GPIO_Init+0x2dc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce4:	4a51      	ldr	r2, [pc, #324]	; (8000e2c <HAL_GPIO_Init+0x2e0>)
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	220f      	movs	r2, #15
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	4013      	ands	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a49      	ldr	r2, [pc, #292]	; (8000e30 <HAL_GPIO_Init+0x2e4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1e0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a48      	ldr	r2, [pc, #288]	; (8000e34 <HAL_GPIO_Init+0x2e8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1dc>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a47      	ldr	r2, [pc, #284]	; (8000e38 <HAL_GPIO_Init+0x2ec>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1d8>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1e2>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1e2>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1e2>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3e:	493b      	ldr	r1, [pc, #236]	; (8000e2c <HAL_GPIO_Init+0x2e0>)
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d58:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4937      	ldr	r1, [pc, #220]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d66:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4933      	ldr	r1, [pc, #204]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	492d      	ldr	r1, [pc, #180]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4929      	ldr	r1, [pc, #164]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	4923      	ldr	r1, [pc, #140]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	491f      	ldr	r1, [pc, #124]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	4919      	ldr	r1, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60cb      	str	r3, [r1, #12]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4915      	ldr	r1, [pc, #84]	; (8000e3c <HAL_GPIO_Init+0x2f0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dee:	3301      	adds	r3, #1
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f47f aeaf 	bne.w	8000b60 <HAL_GPIO_Init+0x14>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	372c      	adds	r7, #44	; 0x2c
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	10320000 	.word	0x10320000
 8000e14:	10310000 	.word	0x10310000
 8000e18:	10220000 	.word	0x10220000
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	10120000 	.word	0x10120000
 8000e24:	10110000 	.word	0x10110000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40010c00 	.word	0x40010c00
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	611a      	str	r2, [r3, #16]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e26c      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4b92      	ldr	r3, [pc, #584]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
 8000ea8:	4b8c      	ldr	r3, [pc, #560]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b89      	ldr	r3, [pc, #548]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x12c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d168      	bne.n	8000f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e246      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x76>
 8000ed8:	4b80      	ldr	r3, [pc, #512]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e02e      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x98>
 8000eee:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b78      	ldr	r3, [pc, #480]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a77      	ldr	r2, [pc, #476]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xbc>
 8000f12:	4b72      	ldr	r3, [pc, #456]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a71      	ldr	r2, [pc, #452]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6e      	ldr	r2, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f2c:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a6a      	ldr	r2, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a67      	ldr	r2, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcec 	bl	8000928 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fce8 	bl	8000928 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1fa      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe4>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcd8 	bl	8000928 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fcd4 	bl	8000928 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1e6      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x10c>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fb6:	4b49      	ldr	r3, [pc, #292]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
 8000fc2:	4b46      	ldr	r3, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1ba      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4939      	ldr	r1, [pc, #228]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fc8d 	bl	8000928 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fc89 	bl	8000928 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e19b      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4927      	ldr	r1, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc6c 	bl	8000928 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc68 	bl	8000928 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e17a      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d03a      	beq.n	80010f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc4c 	bl	8000928 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc48 	bl	8000928 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e15a      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 faa6 	bl	8001604 <RCC_Delay>
 80010b8:	e01c      	b.n	80010f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc32 	bl	8000928 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	e00f      	b.n	80010e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc2e 	bl	8000928 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d908      	bls.n	80010e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e140      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420000 	.word	0x42420000
 80010e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4b9e      	ldr	r3, [pc, #632]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e9      	bne.n	80010c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a6 	beq.w	800124e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001106:	4b97      	ldr	r3, [pc, #604]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b94      	ldr	r3, [pc, #592]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a93      	ldr	r2, [pc, #588]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b91      	ldr	r3, [pc, #580]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4b8e      	ldr	r3, [pc, #568]	; (8001368 <HAL_RCC_OscConfig+0x4f8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d118      	bne.n	800116c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x4f8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a8a      	ldr	r2, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x4f8>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001146:	f7ff fbef 	bl	8000928 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff fbeb 	bl	8000928 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b64      	cmp	r3, #100	; 0x64
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e0fd      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	4b81      	ldr	r3, [pc, #516]	; (8001368 <HAL_RCC_OscConfig+0x4f8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x312>
 8001174:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a7a      	ldr	r2, [pc, #488]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e02d      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x334>
 800118a:	4b76      	ldr	r3, [pc, #472]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a75      	ldr	r2, [pc, #468]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b73      	ldr	r3, [pc, #460]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a72      	ldr	r2, [pc, #456]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	e01c      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x356>
 80011ac:	4b6d      	ldr	r3, [pc, #436]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a6c      	ldr	r2, [pc, #432]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a69      	ldr	r2, [pc, #420]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a66      	ldr	r2, [pc, #408]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b64      	ldr	r3, [pc, #400]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a63      	ldr	r2, [pc, #396]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d015      	beq.n	8001212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fb9f 	bl	8000928 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb9b 	bl	8000928 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0ab      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	4b57      	ldr	r3, [pc, #348]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ee      	beq.n	80011ee <HAL_RCC_OscConfig+0x37e>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fb89 	bl	8000928 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fb85 	bl	8000928 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e095      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001242:	4b48      	ldr	r3, [pc, #288]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a47      	ldr	r2, [pc, #284]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8081 	beq.w	800135a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	4b42      	ldr	r3, [pc, #264]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d061      	beq.n	8001328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d146      	bne.n	80012fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_OscConfig+0x4fc>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fb59 	bl	8000928 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fb55 	bl	8000928 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e067      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	492d      	ldr	r1, [pc, #180]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a19      	ldr	r1, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	430b      	orrs	r3, r1
 80012c6:	4927      	ldr	r1, [pc, #156]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_RCC_OscConfig+0x4fc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fb29 	bl	8000928 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fb25 	bl	8000928 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e037      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x46a>
 80012f8:	e02f      	b.n	800135a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <HAL_RCC_OscConfig+0x4fc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fb12 	bl	8000928 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fb0e 	bl	8000928 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e020      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x498>
 8001326:	e018      	b.n	800135a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e013      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	429a      	cmp	r2, r3
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40021000 	.word	0x40021000
 8001368:	40007000 	.word	0x40007000
 800136c:	42420060 	.word	0x42420060

08001370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0d0      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d910      	bls.n	80013b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 0207 	bic.w	r2, r3, #7
 800139a:	4965      	ldr	r1, [pc, #404]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0b8      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a58      	ldr	r2, [pc, #352]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f0:	4b50      	ldr	r3, [pc, #320]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	494d      	ldr	r1, [pc, #308]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d040      	beq.n	8001490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d115      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e07f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e073      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06b      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144e:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f023 0203 	bic.w	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4936      	ldr	r1, [pc, #216]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	4313      	orrs	r3, r2
 800145e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001460:	f7ff fa62 	bl	8000928 <HAL_GetTick>
 8001464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	e00a      	b.n	800147e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001468:	f7ff fa5e 	bl	8000928 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	; 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e053      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 020c 	and.w	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	429a      	cmp	r2, r3
 800148e:	d1eb      	bne.n	8001468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d210      	bcs.n	80014c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 0207 	bic.w	r2, r3, #7
 80014a6:	4922      	ldr	r1, [pc, #136]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e032      	b.n	8001526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4916      	ldr	r1, [pc, #88]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014fe:	f000 f821 	bl	8001544 <HAL_RCC_GetSysClockFreq>
 8001502:	4602      	mov	r2, r0
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	490a      	ldr	r1, [pc, #40]	; (8001538 <HAL_RCC_ClockConfig+0x1c8>)
 8001510:	5ccb      	ldrb	r3, [r1, r3]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_RCC_ClockConfig+0x1cc>)
 8001518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1d0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f9c0 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40022000 	.word	0x40022000
 8001534:	40021000 	.word	0x40021000
 8001538:	08001f50 	.word	0x08001f50
 800153c:	20000000 	.word	0x20000000
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001544:	b490      	push	{r4, r7}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800154c:	1d3c      	adds	r4, r7, #4
 800154e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001554:	f240 2301 	movw	r3, #513	; 0x201
 8001558:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b04      	cmp	r3, #4
 800157c:	d002      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x40>
 800157e:	2b08      	cmp	r3, #8
 8001580:	d003      	beq.n	800158a <HAL_RCC_GetSysClockFreq+0x46>
 8001582:	e02d      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001586:	623b      	str	r3, [r7, #32]
      break;
 8001588:	e02d      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	0c9b      	lsrs	r3, r3, #18
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001596:	4413      	add	r3, r2
 8001598:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800159c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	0c5b      	lsrs	r3, r3, #17
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c2:	fb02 f203 	mul.w	r2, r2, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	e004      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	623b      	str	r3, [r7, #32]
      break;
 80015de:	e002      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e2:	623b      	str	r3, [r7, #32]
      break;
 80015e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e6:	6a3b      	ldr	r3, [r7, #32]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc90      	pop	{r4, r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08001f40 	.word	0x08001f40
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	003d0900 	.word	0x003d0900

08001604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <RCC_Delay+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <RCC_Delay+0x38>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0a5b      	lsrs	r3, r3, #9
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001620:	bf00      	nop
  }
  while (Delay --);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	60fa      	str	r2, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f9      	bne.n	8001620 <RCC_Delay+0x1c>
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000000 	.word	0x20000000
 800163c:	10624dd3 	.word	0x10624dd3

08001640 <__errno>:
 8001640:	4b01      	ldr	r3, [pc, #4]	; (8001648 <__errno+0x8>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000000c 	.word	0x2000000c

0800164c <__libc_init_array>:
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	2600      	movs	r6, #0
 8001650:	4d0c      	ldr	r5, [pc, #48]	; (8001684 <__libc_init_array+0x38>)
 8001652:	4c0d      	ldr	r4, [pc, #52]	; (8001688 <__libc_init_array+0x3c>)
 8001654:	1b64      	subs	r4, r4, r5
 8001656:	10a4      	asrs	r4, r4, #2
 8001658:	42a6      	cmp	r6, r4
 800165a:	d109      	bne.n	8001670 <__libc_init_array+0x24>
 800165c:	f000 fc5c 	bl	8001f18 <_init>
 8001660:	2600      	movs	r6, #0
 8001662:	4d0a      	ldr	r5, [pc, #40]	; (800168c <__libc_init_array+0x40>)
 8001664:	4c0a      	ldr	r4, [pc, #40]	; (8001690 <__libc_init_array+0x44>)
 8001666:	1b64      	subs	r4, r4, r5
 8001668:	10a4      	asrs	r4, r4, #2
 800166a:	42a6      	cmp	r6, r4
 800166c:	d105      	bne.n	800167a <__libc_init_array+0x2e>
 800166e:	bd70      	pop	{r4, r5, r6, pc}
 8001670:	f855 3b04 	ldr.w	r3, [r5], #4
 8001674:	4798      	blx	r3
 8001676:	3601      	adds	r6, #1
 8001678:	e7ee      	b.n	8001658 <__libc_init_array+0xc>
 800167a:	f855 3b04 	ldr.w	r3, [r5], #4
 800167e:	4798      	blx	r3
 8001680:	3601      	adds	r6, #1
 8001682:	e7f2      	b.n	800166a <__libc_init_array+0x1e>
 8001684:	08001f94 	.word	0x08001f94
 8001688:	08001f94 	.word	0x08001f94
 800168c:	08001f94 	.word	0x08001f94
 8001690:	08001f98 	.word	0x08001f98

08001694 <memset>:
 8001694:	4603      	mov	r3, r0
 8001696:	4402      	add	r2, r0
 8001698:	4293      	cmp	r3, r2
 800169a:	d100      	bne.n	800169e <memset+0xa>
 800169c:	4770      	bx	lr
 800169e:	f803 1b01 	strb.w	r1, [r3], #1
 80016a2:	e7f9      	b.n	8001698 <memset+0x4>

080016a4 <siprintf>:
 80016a4:	b40e      	push	{r1, r2, r3}
 80016a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80016aa:	b500      	push	{lr}
 80016ac:	b09c      	sub	sp, #112	; 0x70
 80016ae:	ab1d      	add	r3, sp, #116	; 0x74
 80016b0:	9002      	str	r0, [sp, #8]
 80016b2:	9006      	str	r0, [sp, #24]
 80016b4:	9107      	str	r1, [sp, #28]
 80016b6:	9104      	str	r1, [sp, #16]
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <siprintf+0x38>)
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <siprintf+0x3c>)
 80016bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80016c0:	9105      	str	r1, [sp, #20]
 80016c2:	6800      	ldr	r0, [r0, #0]
 80016c4:	a902      	add	r1, sp, #8
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	f000 f868 	bl	800179c <_svfiprintf_r>
 80016cc:	2200      	movs	r2, #0
 80016ce:	9b02      	ldr	r3, [sp, #8]
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	b01c      	add	sp, #112	; 0x70
 80016d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80016d8:	b003      	add	sp, #12
 80016da:	4770      	bx	lr
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	ffff0208 	.word	0xffff0208

080016e4 <__ssputs_r>:
 80016e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016e8:	688e      	ldr	r6, [r1, #8]
 80016ea:	4682      	mov	sl, r0
 80016ec:	429e      	cmp	r6, r3
 80016ee:	460c      	mov	r4, r1
 80016f0:	4690      	mov	r8, r2
 80016f2:	461f      	mov	r7, r3
 80016f4:	d838      	bhi.n	8001768 <__ssputs_r+0x84>
 80016f6:	898a      	ldrh	r2, [r1, #12]
 80016f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80016fc:	d032      	beq.n	8001764 <__ssputs_r+0x80>
 80016fe:	6825      	ldr	r5, [r4, #0]
 8001700:	6909      	ldr	r1, [r1, #16]
 8001702:	3301      	adds	r3, #1
 8001704:	eba5 0901 	sub.w	r9, r5, r1
 8001708:	6965      	ldr	r5, [r4, #20]
 800170a:	444b      	add	r3, r9
 800170c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001714:	106d      	asrs	r5, r5, #1
 8001716:	429d      	cmp	r5, r3
 8001718:	bf38      	it	cc
 800171a:	461d      	movcc	r5, r3
 800171c:	0553      	lsls	r3, r2, #21
 800171e:	d531      	bpl.n	8001784 <__ssputs_r+0xa0>
 8001720:	4629      	mov	r1, r5
 8001722:	f000 fb53 	bl	8001dcc <_malloc_r>
 8001726:	4606      	mov	r6, r0
 8001728:	b950      	cbnz	r0, 8001740 <__ssputs_r+0x5c>
 800172a:	230c      	movs	r3, #12
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f8ca 3000 	str.w	r3, [sl]
 8001734:	89a3      	ldrh	r3, [r4, #12]
 8001736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173a:	81a3      	strh	r3, [r4, #12]
 800173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001740:	464a      	mov	r2, r9
 8001742:	6921      	ldr	r1, [r4, #16]
 8001744:	f000 face 	bl	8001ce4 <memcpy>
 8001748:	89a3      	ldrh	r3, [r4, #12]
 800174a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800174e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001752:	81a3      	strh	r3, [r4, #12]
 8001754:	6126      	str	r6, [r4, #16]
 8001756:	444e      	add	r6, r9
 8001758:	6026      	str	r6, [r4, #0]
 800175a:	463e      	mov	r6, r7
 800175c:	6165      	str	r5, [r4, #20]
 800175e:	eba5 0509 	sub.w	r5, r5, r9
 8001762:	60a5      	str	r5, [r4, #8]
 8001764:	42be      	cmp	r6, r7
 8001766:	d900      	bls.n	800176a <__ssputs_r+0x86>
 8001768:	463e      	mov	r6, r7
 800176a:	4632      	mov	r2, r6
 800176c:	4641      	mov	r1, r8
 800176e:	6820      	ldr	r0, [r4, #0]
 8001770:	f000 fac6 	bl	8001d00 <memmove>
 8001774:	68a3      	ldr	r3, [r4, #8]
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	1b9b      	subs	r3, r3, r6
 800177a:	4432      	add	r2, r6
 800177c:	2000      	movs	r0, #0
 800177e:	60a3      	str	r3, [r4, #8]
 8001780:	6022      	str	r2, [r4, #0]
 8001782:	e7db      	b.n	800173c <__ssputs_r+0x58>
 8001784:	462a      	mov	r2, r5
 8001786:	f000 fb7b 	bl	8001e80 <_realloc_r>
 800178a:	4606      	mov	r6, r0
 800178c:	2800      	cmp	r0, #0
 800178e:	d1e1      	bne.n	8001754 <__ssputs_r+0x70>
 8001790:	4650      	mov	r0, sl
 8001792:	6921      	ldr	r1, [r4, #16]
 8001794:	f000 face 	bl	8001d34 <_free_r>
 8001798:	e7c7      	b.n	800172a <__ssputs_r+0x46>
	...

0800179c <_svfiprintf_r>:
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a0:	4698      	mov	r8, r3
 80017a2:	898b      	ldrh	r3, [r1, #12]
 80017a4:	4607      	mov	r7, r0
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	460d      	mov	r5, r1
 80017aa:	4614      	mov	r4, r2
 80017ac:	b09d      	sub	sp, #116	; 0x74
 80017ae:	d50e      	bpl.n	80017ce <_svfiprintf_r+0x32>
 80017b0:	690b      	ldr	r3, [r1, #16]
 80017b2:	b963      	cbnz	r3, 80017ce <_svfiprintf_r+0x32>
 80017b4:	2140      	movs	r1, #64	; 0x40
 80017b6:	f000 fb09 	bl	8001dcc <_malloc_r>
 80017ba:	6028      	str	r0, [r5, #0]
 80017bc:	6128      	str	r0, [r5, #16]
 80017be:	b920      	cbnz	r0, 80017ca <_svfiprintf_r+0x2e>
 80017c0:	230c      	movs	r3, #12
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	e0d1      	b.n	800196e <_svfiprintf_r+0x1d2>
 80017ca:	2340      	movs	r3, #64	; 0x40
 80017cc:	616b      	str	r3, [r5, #20]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9309      	str	r3, [sp, #36]	; 0x24
 80017d2:	2320      	movs	r3, #32
 80017d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80017d8:	2330      	movs	r3, #48	; 0x30
 80017da:	f04f 0901 	mov.w	r9, #1
 80017de:	f8cd 800c 	str.w	r8, [sp, #12]
 80017e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001988 <_svfiprintf_r+0x1ec>
 80017e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017ea:	4623      	mov	r3, r4
 80017ec:	469a      	mov	sl, r3
 80017ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017f2:	b10a      	cbz	r2, 80017f8 <_svfiprintf_r+0x5c>
 80017f4:	2a25      	cmp	r2, #37	; 0x25
 80017f6:	d1f9      	bne.n	80017ec <_svfiprintf_r+0x50>
 80017f8:	ebba 0b04 	subs.w	fp, sl, r4
 80017fc:	d00b      	beq.n	8001816 <_svfiprintf_r+0x7a>
 80017fe:	465b      	mov	r3, fp
 8001800:	4622      	mov	r2, r4
 8001802:	4629      	mov	r1, r5
 8001804:	4638      	mov	r0, r7
 8001806:	f7ff ff6d 	bl	80016e4 <__ssputs_r>
 800180a:	3001      	adds	r0, #1
 800180c:	f000 80aa 	beq.w	8001964 <_svfiprintf_r+0x1c8>
 8001810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001812:	445a      	add	r2, fp
 8001814:	9209      	str	r2, [sp, #36]	; 0x24
 8001816:	f89a 3000 	ldrb.w	r3, [sl]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80a2 	beq.w	8001964 <_svfiprintf_r+0x1c8>
 8001820:	2300      	movs	r3, #0
 8001822:	f04f 32ff 	mov.w	r2, #4294967295
 8001826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800182a:	f10a 0a01 	add.w	sl, sl, #1
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	9307      	str	r3, [sp, #28]
 8001832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001836:	931a      	str	r3, [sp, #104]	; 0x68
 8001838:	4654      	mov	r4, sl
 800183a:	2205      	movs	r2, #5
 800183c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001840:	4851      	ldr	r0, [pc, #324]	; (8001988 <_svfiprintf_r+0x1ec>)
 8001842:	f000 fa41 	bl	8001cc8 <memchr>
 8001846:	9a04      	ldr	r2, [sp, #16]
 8001848:	b9d8      	cbnz	r0, 8001882 <_svfiprintf_r+0xe6>
 800184a:	06d0      	lsls	r0, r2, #27
 800184c:	bf44      	itt	mi
 800184e:	2320      	movmi	r3, #32
 8001850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001854:	0711      	lsls	r1, r2, #28
 8001856:	bf44      	itt	mi
 8001858:	232b      	movmi	r3, #43	; 0x2b
 800185a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800185e:	f89a 3000 	ldrb.w	r3, [sl]
 8001862:	2b2a      	cmp	r3, #42	; 0x2a
 8001864:	d015      	beq.n	8001892 <_svfiprintf_r+0xf6>
 8001866:	4654      	mov	r4, sl
 8001868:	2000      	movs	r0, #0
 800186a:	f04f 0c0a 	mov.w	ip, #10
 800186e:	9a07      	ldr	r2, [sp, #28]
 8001870:	4621      	mov	r1, r4
 8001872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001876:	3b30      	subs	r3, #48	; 0x30
 8001878:	2b09      	cmp	r3, #9
 800187a:	d94e      	bls.n	800191a <_svfiprintf_r+0x17e>
 800187c:	b1b0      	cbz	r0, 80018ac <_svfiprintf_r+0x110>
 800187e:	9207      	str	r2, [sp, #28]
 8001880:	e014      	b.n	80018ac <_svfiprintf_r+0x110>
 8001882:	eba0 0308 	sub.w	r3, r0, r8
 8001886:	fa09 f303 	lsl.w	r3, r9, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	46a2      	mov	sl, r4
 800188e:	9304      	str	r3, [sp, #16]
 8001890:	e7d2      	b.n	8001838 <_svfiprintf_r+0x9c>
 8001892:	9b03      	ldr	r3, [sp, #12]
 8001894:	1d19      	adds	r1, r3, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	9103      	str	r1, [sp, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bfbb      	ittet	lt
 800189e:	425b      	neglt	r3, r3
 80018a0:	f042 0202 	orrlt.w	r2, r2, #2
 80018a4:	9307      	strge	r3, [sp, #28]
 80018a6:	9307      	strlt	r3, [sp, #28]
 80018a8:	bfb8      	it	lt
 80018aa:	9204      	strlt	r2, [sp, #16]
 80018ac:	7823      	ldrb	r3, [r4, #0]
 80018ae:	2b2e      	cmp	r3, #46	; 0x2e
 80018b0:	d10c      	bne.n	80018cc <_svfiprintf_r+0x130>
 80018b2:	7863      	ldrb	r3, [r4, #1]
 80018b4:	2b2a      	cmp	r3, #42	; 0x2a
 80018b6:	d135      	bne.n	8001924 <_svfiprintf_r+0x188>
 80018b8:	9b03      	ldr	r3, [sp, #12]
 80018ba:	3402      	adds	r4, #2
 80018bc:	1d1a      	adds	r2, r3, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	9203      	str	r2, [sp, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bfb8      	it	lt
 80018c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80018ca:	9305      	str	r3, [sp, #20]
 80018cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001998 <_svfiprintf_r+0x1fc>
 80018d0:	2203      	movs	r2, #3
 80018d2:	4650      	mov	r0, sl
 80018d4:	7821      	ldrb	r1, [r4, #0]
 80018d6:	f000 f9f7 	bl	8001cc8 <memchr>
 80018da:	b140      	cbz	r0, 80018ee <_svfiprintf_r+0x152>
 80018dc:	2340      	movs	r3, #64	; 0x40
 80018de:	eba0 000a 	sub.w	r0, r0, sl
 80018e2:	fa03 f000 	lsl.w	r0, r3, r0
 80018e6:	9b04      	ldr	r3, [sp, #16]
 80018e8:	3401      	adds	r4, #1
 80018ea:	4303      	orrs	r3, r0
 80018ec:	9304      	str	r3, [sp, #16]
 80018ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018f2:	2206      	movs	r2, #6
 80018f4:	4825      	ldr	r0, [pc, #148]	; (800198c <_svfiprintf_r+0x1f0>)
 80018f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018fa:	f000 f9e5 	bl	8001cc8 <memchr>
 80018fe:	2800      	cmp	r0, #0
 8001900:	d038      	beq.n	8001974 <_svfiprintf_r+0x1d8>
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <_svfiprintf_r+0x1f4>)
 8001904:	bb1b      	cbnz	r3, 800194e <_svfiprintf_r+0x1b2>
 8001906:	9b03      	ldr	r3, [sp, #12]
 8001908:	3307      	adds	r3, #7
 800190a:	f023 0307 	bic.w	r3, r3, #7
 800190e:	3308      	adds	r3, #8
 8001910:	9303      	str	r3, [sp, #12]
 8001912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001914:	4433      	add	r3, r6
 8001916:	9309      	str	r3, [sp, #36]	; 0x24
 8001918:	e767      	b.n	80017ea <_svfiprintf_r+0x4e>
 800191a:	460c      	mov	r4, r1
 800191c:	2001      	movs	r0, #1
 800191e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001922:	e7a5      	b.n	8001870 <_svfiprintf_r+0xd4>
 8001924:	2300      	movs	r3, #0
 8001926:	f04f 0c0a 	mov.w	ip, #10
 800192a:	4619      	mov	r1, r3
 800192c:	3401      	adds	r4, #1
 800192e:	9305      	str	r3, [sp, #20]
 8001930:	4620      	mov	r0, r4
 8001932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001936:	3a30      	subs	r2, #48	; 0x30
 8001938:	2a09      	cmp	r2, #9
 800193a:	d903      	bls.n	8001944 <_svfiprintf_r+0x1a8>
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0c5      	beq.n	80018cc <_svfiprintf_r+0x130>
 8001940:	9105      	str	r1, [sp, #20]
 8001942:	e7c3      	b.n	80018cc <_svfiprintf_r+0x130>
 8001944:	4604      	mov	r4, r0
 8001946:	2301      	movs	r3, #1
 8001948:	fb0c 2101 	mla	r1, ip, r1, r2
 800194c:	e7f0      	b.n	8001930 <_svfiprintf_r+0x194>
 800194e:	ab03      	add	r3, sp, #12
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	462a      	mov	r2, r5
 8001954:	4638      	mov	r0, r7
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <_svfiprintf_r+0x1f8>)
 8001958:	a904      	add	r1, sp, #16
 800195a:	f3af 8000 	nop.w
 800195e:	1c42      	adds	r2, r0, #1
 8001960:	4606      	mov	r6, r0
 8001962:	d1d6      	bne.n	8001912 <_svfiprintf_r+0x176>
 8001964:	89ab      	ldrh	r3, [r5, #12]
 8001966:	065b      	lsls	r3, r3, #25
 8001968:	f53f af2c 	bmi.w	80017c4 <_svfiprintf_r+0x28>
 800196c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800196e:	b01d      	add	sp, #116	; 0x74
 8001970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001974:	ab03      	add	r3, sp, #12
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	462a      	mov	r2, r5
 800197a:	4638      	mov	r0, r7
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <_svfiprintf_r+0x1f8>)
 800197e:	a904      	add	r1, sp, #16
 8001980:	f000 f87c 	bl	8001a7c <_printf_i>
 8001984:	e7eb      	b.n	800195e <_svfiprintf_r+0x1c2>
 8001986:	bf00      	nop
 8001988:	08001f60 	.word	0x08001f60
 800198c:	08001f6a 	.word	0x08001f6a
 8001990:	00000000 	.word	0x00000000
 8001994:	080016e5 	.word	0x080016e5
 8001998:	08001f66 	.word	0x08001f66

0800199c <_printf_common>:
 800199c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019a0:	4616      	mov	r6, r2
 80019a2:	4699      	mov	r9, r3
 80019a4:	688a      	ldr	r2, [r1, #8]
 80019a6:	690b      	ldr	r3, [r1, #16]
 80019a8:	4607      	mov	r7, r0
 80019aa:	4293      	cmp	r3, r2
 80019ac:	bfb8      	it	lt
 80019ae:	4613      	movlt	r3, r2
 80019b0:	6033      	str	r3, [r6, #0]
 80019b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019b6:	460c      	mov	r4, r1
 80019b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019bc:	b10a      	cbz	r2, 80019c2 <_printf_common+0x26>
 80019be:	3301      	adds	r3, #1
 80019c0:	6033      	str	r3, [r6, #0]
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	0699      	lsls	r1, r3, #26
 80019c6:	bf42      	ittt	mi
 80019c8:	6833      	ldrmi	r3, [r6, #0]
 80019ca:	3302      	addmi	r3, #2
 80019cc:	6033      	strmi	r3, [r6, #0]
 80019ce:	6825      	ldr	r5, [r4, #0]
 80019d0:	f015 0506 	ands.w	r5, r5, #6
 80019d4:	d106      	bne.n	80019e4 <_printf_common+0x48>
 80019d6:	f104 0a19 	add.w	sl, r4, #25
 80019da:	68e3      	ldr	r3, [r4, #12]
 80019dc:	6832      	ldr	r2, [r6, #0]
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	42ab      	cmp	r3, r5
 80019e2:	dc28      	bgt.n	8001a36 <_printf_common+0x9a>
 80019e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019e8:	1e13      	subs	r3, r2, #0
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	bf18      	it	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	0692      	lsls	r2, r2, #26
 80019f2:	d42d      	bmi.n	8001a50 <_printf_common+0xb4>
 80019f4:	4649      	mov	r1, r9
 80019f6:	4638      	mov	r0, r7
 80019f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019fc:	47c0      	blx	r8
 80019fe:	3001      	adds	r0, #1
 8001a00:	d020      	beq.n	8001a44 <_printf_common+0xa8>
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	68e5      	ldr	r5, [r4, #12]
 8001a06:	f003 0306 	and.w	r3, r3, #6
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf18      	it	ne
 8001a0e:	2500      	movne	r5, #0
 8001a10:	6832      	ldr	r2, [r6, #0]
 8001a12:	f04f 0600 	mov.w	r6, #0
 8001a16:	68a3      	ldr	r3, [r4, #8]
 8001a18:	bf08      	it	eq
 8001a1a:	1aad      	subeq	r5, r5, r2
 8001a1c:	6922      	ldr	r2, [r4, #16]
 8001a1e:	bf08      	it	eq
 8001a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a24:	4293      	cmp	r3, r2
 8001a26:	bfc4      	itt	gt
 8001a28:	1a9b      	subgt	r3, r3, r2
 8001a2a:	18ed      	addgt	r5, r5, r3
 8001a2c:	341a      	adds	r4, #26
 8001a2e:	42b5      	cmp	r5, r6
 8001a30:	d11a      	bne.n	8001a68 <_printf_common+0xcc>
 8001a32:	2000      	movs	r0, #0
 8001a34:	e008      	b.n	8001a48 <_printf_common+0xac>
 8001a36:	2301      	movs	r3, #1
 8001a38:	4652      	mov	r2, sl
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	47c0      	blx	r8
 8001a40:	3001      	adds	r0, #1
 8001a42:	d103      	bne.n	8001a4c <_printf_common+0xb0>
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a4c:	3501      	adds	r5, #1
 8001a4e:	e7c4      	b.n	80019da <_printf_common+0x3e>
 8001a50:	2030      	movs	r0, #48	; 0x30
 8001a52:	18e1      	adds	r1, r4, r3
 8001a54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a5e:	4422      	add	r2, r4
 8001a60:	3302      	adds	r3, #2
 8001a62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a66:	e7c5      	b.n	80019f4 <_printf_common+0x58>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	4638      	mov	r0, r7
 8001a70:	47c0      	blx	r8
 8001a72:	3001      	adds	r0, #1
 8001a74:	d0e6      	beq.n	8001a44 <_printf_common+0xa8>
 8001a76:	3601      	adds	r6, #1
 8001a78:	e7d9      	b.n	8001a2e <_printf_common+0x92>
	...

08001a7c <_printf_i>:
 8001a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a80:	460c      	mov	r4, r1
 8001a82:	7e27      	ldrb	r7, [r4, #24]
 8001a84:	4691      	mov	r9, r2
 8001a86:	2f78      	cmp	r7, #120	; 0x78
 8001a88:	4680      	mov	r8, r0
 8001a8a:	469a      	mov	sl, r3
 8001a8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a92:	d807      	bhi.n	8001aa4 <_printf_i+0x28>
 8001a94:	2f62      	cmp	r7, #98	; 0x62
 8001a96:	d80a      	bhi.n	8001aae <_printf_i+0x32>
 8001a98:	2f00      	cmp	r7, #0
 8001a9a:	f000 80d9 	beq.w	8001c50 <_printf_i+0x1d4>
 8001a9e:	2f58      	cmp	r7, #88	; 0x58
 8001aa0:	f000 80a4 	beq.w	8001bec <_printf_i+0x170>
 8001aa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001aac:	e03a      	b.n	8001b24 <_printf_i+0xa8>
 8001aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ab2:	2b15      	cmp	r3, #21
 8001ab4:	d8f6      	bhi.n	8001aa4 <_printf_i+0x28>
 8001ab6:	a001      	add	r0, pc, #4	; (adr r0, 8001abc <_printf_i+0x40>)
 8001ab8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001abc:	08001b15 	.word	0x08001b15
 8001ac0:	08001b29 	.word	0x08001b29
 8001ac4:	08001aa5 	.word	0x08001aa5
 8001ac8:	08001aa5 	.word	0x08001aa5
 8001acc:	08001aa5 	.word	0x08001aa5
 8001ad0:	08001aa5 	.word	0x08001aa5
 8001ad4:	08001b29 	.word	0x08001b29
 8001ad8:	08001aa5 	.word	0x08001aa5
 8001adc:	08001aa5 	.word	0x08001aa5
 8001ae0:	08001aa5 	.word	0x08001aa5
 8001ae4:	08001aa5 	.word	0x08001aa5
 8001ae8:	08001c37 	.word	0x08001c37
 8001aec:	08001b59 	.word	0x08001b59
 8001af0:	08001c19 	.word	0x08001c19
 8001af4:	08001aa5 	.word	0x08001aa5
 8001af8:	08001aa5 	.word	0x08001aa5
 8001afc:	08001c59 	.word	0x08001c59
 8001b00:	08001aa5 	.word	0x08001aa5
 8001b04:	08001b59 	.word	0x08001b59
 8001b08:	08001aa5 	.word	0x08001aa5
 8001b0c:	08001aa5 	.word	0x08001aa5
 8001b10:	08001c21 	.word	0x08001c21
 8001b14:	680b      	ldr	r3, [r1, #0]
 8001b16:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	600a      	str	r2, [r1, #0]
 8001b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0a4      	b.n	8001c72 <_printf_i+0x1f6>
 8001b28:	6825      	ldr	r5, [r4, #0]
 8001b2a:	6808      	ldr	r0, [r1, #0]
 8001b2c:	062e      	lsls	r6, r5, #24
 8001b2e:	f100 0304 	add.w	r3, r0, #4
 8001b32:	d50a      	bpl.n	8001b4a <_printf_i+0xce>
 8001b34:	6805      	ldr	r5, [r0, #0]
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	2d00      	cmp	r5, #0
 8001b3a:	da03      	bge.n	8001b44 <_printf_i+0xc8>
 8001b3c:	232d      	movs	r3, #45	; 0x2d
 8001b3e:	426d      	negs	r5, r5
 8001b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b44:	230a      	movs	r3, #10
 8001b46:	485e      	ldr	r0, [pc, #376]	; (8001cc0 <_printf_i+0x244>)
 8001b48:	e019      	b.n	8001b7e <_printf_i+0x102>
 8001b4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001b4e:	6805      	ldr	r5, [r0, #0]
 8001b50:	600b      	str	r3, [r1, #0]
 8001b52:	bf18      	it	ne
 8001b54:	b22d      	sxthne	r5, r5
 8001b56:	e7ef      	b.n	8001b38 <_printf_i+0xbc>
 8001b58:	680b      	ldr	r3, [r1, #0]
 8001b5a:	6825      	ldr	r5, [r4, #0]
 8001b5c:	1d18      	adds	r0, r3, #4
 8001b5e:	6008      	str	r0, [r1, #0]
 8001b60:	0628      	lsls	r0, r5, #24
 8001b62:	d501      	bpl.n	8001b68 <_printf_i+0xec>
 8001b64:	681d      	ldr	r5, [r3, #0]
 8001b66:	e002      	b.n	8001b6e <_printf_i+0xf2>
 8001b68:	0669      	lsls	r1, r5, #25
 8001b6a:	d5fb      	bpl.n	8001b64 <_printf_i+0xe8>
 8001b6c:	881d      	ldrh	r5, [r3, #0]
 8001b6e:	2f6f      	cmp	r7, #111	; 0x6f
 8001b70:	bf0c      	ite	eq
 8001b72:	2308      	moveq	r3, #8
 8001b74:	230a      	movne	r3, #10
 8001b76:	4852      	ldr	r0, [pc, #328]	; (8001cc0 <_printf_i+0x244>)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b7e:	6866      	ldr	r6, [r4, #4]
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	bfa8      	it	ge
 8001b84:	6821      	ldrge	r1, [r4, #0]
 8001b86:	60a6      	str	r6, [r4, #8]
 8001b88:	bfa4      	itt	ge
 8001b8a:	f021 0104 	bicge.w	r1, r1, #4
 8001b8e:	6021      	strge	r1, [r4, #0]
 8001b90:	b90d      	cbnz	r5, 8001b96 <_printf_i+0x11a>
 8001b92:	2e00      	cmp	r6, #0
 8001b94:	d04d      	beq.n	8001c32 <_printf_i+0x1b6>
 8001b96:	4616      	mov	r6, r2
 8001b98:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b9c:	fb03 5711 	mls	r7, r3, r1, r5
 8001ba0:	5dc7      	ldrb	r7, [r0, r7]
 8001ba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ba6:	462f      	mov	r7, r5
 8001ba8:	42bb      	cmp	r3, r7
 8001baa:	460d      	mov	r5, r1
 8001bac:	d9f4      	bls.n	8001b98 <_printf_i+0x11c>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d10b      	bne.n	8001bca <_printf_i+0x14e>
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	07df      	lsls	r7, r3, #31
 8001bb6:	d508      	bpl.n	8001bca <_printf_i+0x14e>
 8001bb8:	6923      	ldr	r3, [r4, #16]
 8001bba:	6861      	ldr	r1, [r4, #4]
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	bfde      	ittt	le
 8001bc0:	2330      	movle	r3, #48	; 0x30
 8001bc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001bc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001bca:	1b92      	subs	r2, r2, r6
 8001bcc:	6122      	str	r2, [r4, #16]
 8001bce:	464b      	mov	r3, r9
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	f8cd a000 	str.w	sl, [sp]
 8001bd8:	aa03      	add	r2, sp, #12
 8001bda:	f7ff fedf 	bl	800199c <_printf_common>
 8001bde:	3001      	adds	r0, #1
 8001be0:	d14c      	bne.n	8001c7c <_printf_i+0x200>
 8001be2:	f04f 30ff 	mov.w	r0, #4294967295
 8001be6:	b004      	add	sp, #16
 8001be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bec:	4834      	ldr	r0, [pc, #208]	; (8001cc0 <_printf_i+0x244>)
 8001bee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001bf2:	680e      	ldr	r6, [r1, #0]
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	f856 5b04 	ldr.w	r5, [r6], #4
 8001bfa:	061f      	lsls	r7, r3, #24
 8001bfc:	600e      	str	r6, [r1, #0]
 8001bfe:	d514      	bpl.n	8001c2a <_printf_i+0x1ae>
 8001c00:	07d9      	lsls	r1, r3, #31
 8001c02:	bf44      	itt	mi
 8001c04:	f043 0320 	orrmi.w	r3, r3, #32
 8001c08:	6023      	strmi	r3, [r4, #0]
 8001c0a:	b91d      	cbnz	r5, 8001c14 <_printf_i+0x198>
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	f023 0320 	bic.w	r3, r3, #32
 8001c12:	6023      	str	r3, [r4, #0]
 8001c14:	2310      	movs	r3, #16
 8001c16:	e7af      	b.n	8001b78 <_printf_i+0xfc>
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
 8001c1e:	6023      	str	r3, [r4, #0]
 8001c20:	2378      	movs	r3, #120	; 0x78
 8001c22:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <_printf_i+0x248>)
 8001c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c28:	e7e3      	b.n	8001bf2 <_printf_i+0x176>
 8001c2a:	065e      	lsls	r6, r3, #25
 8001c2c:	bf48      	it	mi
 8001c2e:	b2ad      	uxthmi	r5, r5
 8001c30:	e7e6      	b.n	8001c00 <_printf_i+0x184>
 8001c32:	4616      	mov	r6, r2
 8001c34:	e7bb      	b.n	8001bae <_printf_i+0x132>
 8001c36:	680b      	ldr	r3, [r1, #0]
 8001c38:	6826      	ldr	r6, [r4, #0]
 8001c3a:	1d1d      	adds	r5, r3, #4
 8001c3c:	6960      	ldr	r0, [r4, #20]
 8001c3e:	600d      	str	r5, [r1, #0]
 8001c40:	0635      	lsls	r5, r6, #24
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	d501      	bpl.n	8001c4a <_printf_i+0x1ce>
 8001c46:	6018      	str	r0, [r3, #0]
 8001c48:	e002      	b.n	8001c50 <_printf_i+0x1d4>
 8001c4a:	0671      	lsls	r1, r6, #25
 8001c4c:	d5fb      	bpl.n	8001c46 <_printf_i+0x1ca>
 8001c4e:	8018      	strh	r0, [r3, #0]
 8001c50:	2300      	movs	r3, #0
 8001c52:	4616      	mov	r6, r2
 8001c54:	6123      	str	r3, [r4, #16]
 8001c56:	e7ba      	b.n	8001bce <_printf_i+0x152>
 8001c58:	680b      	ldr	r3, [r1, #0]
 8001c5a:	1d1a      	adds	r2, r3, #4
 8001c5c:	600a      	str	r2, [r1, #0]
 8001c5e:	681e      	ldr	r6, [r3, #0]
 8001c60:	2100      	movs	r1, #0
 8001c62:	4630      	mov	r0, r6
 8001c64:	6862      	ldr	r2, [r4, #4]
 8001c66:	f000 f82f 	bl	8001cc8 <memchr>
 8001c6a:	b108      	cbz	r0, 8001c70 <_printf_i+0x1f4>
 8001c6c:	1b80      	subs	r0, r0, r6
 8001c6e:	6060      	str	r0, [r4, #4]
 8001c70:	6863      	ldr	r3, [r4, #4]
 8001c72:	6123      	str	r3, [r4, #16]
 8001c74:	2300      	movs	r3, #0
 8001c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c7a:	e7a8      	b.n	8001bce <_printf_i+0x152>
 8001c7c:	4632      	mov	r2, r6
 8001c7e:	4649      	mov	r1, r9
 8001c80:	4640      	mov	r0, r8
 8001c82:	6923      	ldr	r3, [r4, #16]
 8001c84:	47d0      	blx	sl
 8001c86:	3001      	adds	r0, #1
 8001c88:	d0ab      	beq.n	8001be2 <_printf_i+0x166>
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	079b      	lsls	r3, r3, #30
 8001c8e:	d413      	bmi.n	8001cb8 <_printf_i+0x23c>
 8001c90:	68e0      	ldr	r0, [r4, #12]
 8001c92:	9b03      	ldr	r3, [sp, #12]
 8001c94:	4298      	cmp	r0, r3
 8001c96:	bfb8      	it	lt
 8001c98:	4618      	movlt	r0, r3
 8001c9a:	e7a4      	b.n	8001be6 <_printf_i+0x16a>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4632      	mov	r2, r6
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	47d0      	blx	sl
 8001ca6:	3001      	adds	r0, #1
 8001ca8:	d09b      	beq.n	8001be2 <_printf_i+0x166>
 8001caa:	3501      	adds	r5, #1
 8001cac:	68e3      	ldr	r3, [r4, #12]
 8001cae:	9903      	ldr	r1, [sp, #12]
 8001cb0:	1a5b      	subs	r3, r3, r1
 8001cb2:	42ab      	cmp	r3, r5
 8001cb4:	dcf2      	bgt.n	8001c9c <_printf_i+0x220>
 8001cb6:	e7eb      	b.n	8001c90 <_printf_i+0x214>
 8001cb8:	2500      	movs	r5, #0
 8001cba:	f104 0619 	add.w	r6, r4, #25
 8001cbe:	e7f5      	b.n	8001cac <_printf_i+0x230>
 8001cc0:	08001f71 	.word	0x08001f71
 8001cc4:	08001f82 	.word	0x08001f82

08001cc8 <memchr>:
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b510      	push	{r4, lr}
 8001ccc:	b2c9      	uxtb	r1, r1
 8001cce:	4402      	add	r2, r0
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	d101      	bne.n	8001cda <memchr+0x12>
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	e003      	b.n	8001ce2 <memchr+0x1a>
 8001cda:	7804      	ldrb	r4, [r0, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	428c      	cmp	r4, r1
 8001ce0:	d1f6      	bne.n	8001cd0 <memchr+0x8>
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <memcpy>:
 8001ce4:	440a      	add	r2, r1
 8001ce6:	4291      	cmp	r1, r2
 8001ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001cec:	d100      	bne.n	8001cf0 <memcpy+0xc>
 8001cee:	4770      	bx	lr
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cf6:	4291      	cmp	r1, r2
 8001cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cfc:	d1f9      	bne.n	8001cf2 <memcpy+0xe>
 8001cfe:	bd10      	pop	{r4, pc}

08001d00 <memmove>:
 8001d00:	4288      	cmp	r0, r1
 8001d02:	b510      	push	{r4, lr}
 8001d04:	eb01 0402 	add.w	r4, r1, r2
 8001d08:	d902      	bls.n	8001d10 <memmove+0x10>
 8001d0a:	4284      	cmp	r4, r0
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	d807      	bhi.n	8001d20 <memmove+0x20>
 8001d10:	1e43      	subs	r3, r0, #1
 8001d12:	42a1      	cmp	r1, r4
 8001d14:	d008      	beq.n	8001d28 <memmove+0x28>
 8001d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001d1e:	e7f8      	b.n	8001d12 <memmove+0x12>
 8001d20:	4601      	mov	r1, r0
 8001d22:	4402      	add	r2, r0
 8001d24:	428a      	cmp	r2, r1
 8001d26:	d100      	bne.n	8001d2a <memmove+0x2a>
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001d32:	e7f7      	b.n	8001d24 <memmove+0x24>

08001d34 <_free_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4605      	mov	r5, r0
 8001d38:	2900      	cmp	r1, #0
 8001d3a:	d043      	beq.n	8001dc4 <_free_r+0x90>
 8001d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d40:	1f0c      	subs	r4, r1, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bfb8      	it	lt
 8001d46:	18e4      	addlt	r4, r4, r3
 8001d48:	f000 f8d0 	bl	8001eec <__malloc_lock>
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <_free_r+0x94>)
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	4610      	mov	r0, r2
 8001d52:	b933      	cbnz	r3, 8001d62 <_free_r+0x2e>
 8001d54:	6063      	str	r3, [r4, #4]
 8001d56:	6014      	str	r4, [r2, #0]
 8001d58:	4628      	mov	r0, r5
 8001d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d5e:	f000 b8cb 	b.w	8001ef8 <__malloc_unlock>
 8001d62:	42a3      	cmp	r3, r4
 8001d64:	d90a      	bls.n	8001d7c <_free_r+0x48>
 8001d66:	6821      	ldr	r1, [r4, #0]
 8001d68:	1862      	adds	r2, r4, r1
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	bf01      	itttt	eq
 8001d6e:	681a      	ldreq	r2, [r3, #0]
 8001d70:	685b      	ldreq	r3, [r3, #4]
 8001d72:	1852      	addeq	r2, r2, r1
 8001d74:	6022      	streq	r2, [r4, #0]
 8001d76:	6063      	str	r3, [r4, #4]
 8001d78:	6004      	str	r4, [r0, #0]
 8001d7a:	e7ed      	b.n	8001d58 <_free_r+0x24>
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b10b      	cbz	r3, 8001d86 <_free_r+0x52>
 8001d82:	42a3      	cmp	r3, r4
 8001d84:	d9fa      	bls.n	8001d7c <_free_r+0x48>
 8001d86:	6811      	ldr	r1, [r2, #0]
 8001d88:	1850      	adds	r0, r2, r1
 8001d8a:	42a0      	cmp	r0, r4
 8001d8c:	d10b      	bne.n	8001da6 <_free_r+0x72>
 8001d8e:	6820      	ldr	r0, [r4, #0]
 8001d90:	4401      	add	r1, r0
 8001d92:	1850      	adds	r0, r2, r1
 8001d94:	4283      	cmp	r3, r0
 8001d96:	6011      	str	r1, [r2, #0]
 8001d98:	d1de      	bne.n	8001d58 <_free_r+0x24>
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4401      	add	r1, r0
 8001da0:	6011      	str	r1, [r2, #0]
 8001da2:	6053      	str	r3, [r2, #4]
 8001da4:	e7d8      	b.n	8001d58 <_free_r+0x24>
 8001da6:	d902      	bls.n	8001dae <_free_r+0x7a>
 8001da8:	230c      	movs	r3, #12
 8001daa:	602b      	str	r3, [r5, #0]
 8001dac:	e7d4      	b.n	8001d58 <_free_r+0x24>
 8001dae:	6820      	ldr	r0, [r4, #0]
 8001db0:	1821      	adds	r1, r4, r0
 8001db2:	428b      	cmp	r3, r1
 8001db4:	bf01      	itttt	eq
 8001db6:	6819      	ldreq	r1, [r3, #0]
 8001db8:	685b      	ldreq	r3, [r3, #4]
 8001dba:	1809      	addeq	r1, r1, r0
 8001dbc:	6021      	streq	r1, [r4, #0]
 8001dbe:	6063      	str	r3, [r4, #4]
 8001dc0:	6054      	str	r4, [r2, #4]
 8001dc2:	e7c9      	b.n	8001d58 <_free_r+0x24>
 8001dc4:	bd38      	pop	{r3, r4, r5, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000090 	.word	0x20000090

08001dcc <_malloc_r>:
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	1ccd      	adds	r5, r1, #3
 8001dd0:	f025 0503 	bic.w	r5, r5, #3
 8001dd4:	3508      	adds	r5, #8
 8001dd6:	2d0c      	cmp	r5, #12
 8001dd8:	bf38      	it	cc
 8001dda:	250c      	movcc	r5, #12
 8001ddc:	2d00      	cmp	r5, #0
 8001dde:	4606      	mov	r6, r0
 8001de0:	db01      	blt.n	8001de6 <_malloc_r+0x1a>
 8001de2:	42a9      	cmp	r1, r5
 8001de4:	d903      	bls.n	8001dee <_malloc_r+0x22>
 8001de6:	230c      	movs	r3, #12
 8001de8:	6033      	str	r3, [r6, #0]
 8001dea:	2000      	movs	r0, #0
 8001dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dee:	f000 f87d 	bl	8001eec <__malloc_lock>
 8001df2:	4921      	ldr	r1, [pc, #132]	; (8001e78 <_malloc_r+0xac>)
 8001df4:	680a      	ldr	r2, [r1, #0]
 8001df6:	4614      	mov	r4, r2
 8001df8:	b99c      	cbnz	r4, 8001e22 <_malloc_r+0x56>
 8001dfa:	4f20      	ldr	r7, [pc, #128]	; (8001e7c <_malloc_r+0xb0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b923      	cbnz	r3, 8001e0a <_malloc_r+0x3e>
 8001e00:	4621      	mov	r1, r4
 8001e02:	4630      	mov	r0, r6
 8001e04:	f000 f862 	bl	8001ecc <_sbrk_r>
 8001e08:	6038      	str	r0, [r7, #0]
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4630      	mov	r0, r6
 8001e0e:	f000 f85d 	bl	8001ecc <_sbrk_r>
 8001e12:	1c43      	adds	r3, r0, #1
 8001e14:	d123      	bne.n	8001e5e <_malloc_r+0x92>
 8001e16:	230c      	movs	r3, #12
 8001e18:	4630      	mov	r0, r6
 8001e1a:	6033      	str	r3, [r6, #0]
 8001e1c:	f000 f86c 	bl	8001ef8 <__malloc_unlock>
 8001e20:	e7e3      	b.n	8001dea <_malloc_r+0x1e>
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	1b5b      	subs	r3, r3, r5
 8001e26:	d417      	bmi.n	8001e58 <_malloc_r+0x8c>
 8001e28:	2b0b      	cmp	r3, #11
 8001e2a:	d903      	bls.n	8001e34 <_malloc_r+0x68>
 8001e2c:	6023      	str	r3, [r4, #0]
 8001e2e:	441c      	add	r4, r3
 8001e30:	6025      	str	r5, [r4, #0]
 8001e32:	e004      	b.n	8001e3e <_malloc_r+0x72>
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	42a2      	cmp	r2, r4
 8001e38:	bf0c      	ite	eq
 8001e3a:	600b      	streq	r3, [r1, #0]
 8001e3c:	6053      	strne	r3, [r2, #4]
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f000 f85a 	bl	8001ef8 <__malloc_unlock>
 8001e44:	f104 000b 	add.w	r0, r4, #11
 8001e48:	1d23      	adds	r3, r4, #4
 8001e4a:	f020 0007 	bic.w	r0, r0, #7
 8001e4e:	1ac2      	subs	r2, r0, r3
 8001e50:	d0cc      	beq.n	8001dec <_malloc_r+0x20>
 8001e52:	1a1b      	subs	r3, r3, r0
 8001e54:	50a3      	str	r3, [r4, r2]
 8001e56:	e7c9      	b.n	8001dec <_malloc_r+0x20>
 8001e58:	4622      	mov	r2, r4
 8001e5a:	6864      	ldr	r4, [r4, #4]
 8001e5c:	e7cc      	b.n	8001df8 <_malloc_r+0x2c>
 8001e5e:	1cc4      	adds	r4, r0, #3
 8001e60:	f024 0403 	bic.w	r4, r4, #3
 8001e64:	42a0      	cmp	r0, r4
 8001e66:	d0e3      	beq.n	8001e30 <_malloc_r+0x64>
 8001e68:	1a21      	subs	r1, r4, r0
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	f000 f82e 	bl	8001ecc <_sbrk_r>
 8001e70:	3001      	adds	r0, #1
 8001e72:	d1dd      	bne.n	8001e30 <_malloc_r+0x64>
 8001e74:	e7cf      	b.n	8001e16 <_malloc_r+0x4a>
 8001e76:	bf00      	nop
 8001e78:	20000090 	.word	0x20000090
 8001e7c:	20000094 	.word	0x20000094

08001e80 <_realloc_r>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	4607      	mov	r7, r0
 8001e84:	4614      	mov	r4, r2
 8001e86:	460e      	mov	r6, r1
 8001e88:	b921      	cbnz	r1, 8001e94 <_realloc_r+0x14>
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001e90:	f7ff bf9c 	b.w	8001dcc <_malloc_r>
 8001e94:	b922      	cbnz	r2, 8001ea0 <_realloc_r+0x20>
 8001e96:	f7ff ff4d 	bl	8001d34 <_free_r>
 8001e9a:	4625      	mov	r5, r4
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ea0:	f000 f830 	bl	8001f04 <_malloc_usable_size_r>
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	d20f      	bcs.n	8001ec8 <_realloc_r+0x48>
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	4638      	mov	r0, r7
 8001eac:	f7ff ff8e 	bl	8001dcc <_malloc_r>
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d0f2      	beq.n	8001e9c <_realloc_r+0x1c>
 8001eb6:	4631      	mov	r1, r6
 8001eb8:	4622      	mov	r2, r4
 8001eba:	f7ff ff13 	bl	8001ce4 <memcpy>
 8001ebe:	4631      	mov	r1, r6
 8001ec0:	4638      	mov	r0, r7
 8001ec2:	f7ff ff37 	bl	8001d34 <_free_r>
 8001ec6:	e7e9      	b.n	8001e9c <_realloc_r+0x1c>
 8001ec8:	4635      	mov	r5, r6
 8001eca:	e7e7      	b.n	8001e9c <_realloc_r+0x1c>

08001ecc <_sbrk_r>:
 8001ecc:	b538      	push	{r3, r4, r5, lr}
 8001ece:	2300      	movs	r3, #0
 8001ed0:	4d05      	ldr	r5, [pc, #20]	; (8001ee8 <_sbrk_r+0x1c>)
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	602b      	str	r3, [r5, #0]
 8001ed8:	f7fe fc6c 	bl	80007b4 <_sbrk>
 8001edc:	1c43      	adds	r3, r0, #1
 8001ede:	d102      	bne.n	8001ee6 <_sbrk_r+0x1a>
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	b103      	cbz	r3, 8001ee6 <_sbrk_r+0x1a>
 8001ee4:	6023      	str	r3, [r4, #0]
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
 8001ee8:	2000009c 	.word	0x2000009c

08001eec <__malloc_lock>:
 8001eec:	4801      	ldr	r0, [pc, #4]	; (8001ef4 <__malloc_lock+0x8>)
 8001eee:	f000 b811 	b.w	8001f14 <__retarget_lock_acquire_recursive>
 8001ef2:	bf00      	nop
 8001ef4:	200000a4 	.word	0x200000a4

08001ef8 <__malloc_unlock>:
 8001ef8:	4801      	ldr	r0, [pc, #4]	; (8001f00 <__malloc_unlock+0x8>)
 8001efa:	f000 b80c 	b.w	8001f16 <__retarget_lock_release_recursive>
 8001efe:	bf00      	nop
 8001f00:	200000a4 	.word	0x200000a4

08001f04 <_malloc_usable_size_r>:
 8001f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f08:	1f18      	subs	r0, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bfbc      	itt	lt
 8001f0e:	580b      	ldrlt	r3, [r1, r0]
 8001f10:	18c0      	addlt	r0, r0, r3
 8001f12:	4770      	bx	lr

08001f14 <__retarget_lock_acquire_recursive>:
 8001f14:	4770      	bx	lr

08001f16 <__retarget_lock_release_recursive>:
 8001f16:	4770      	bx	lr

08001f18 <_init>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	bf00      	nop
 8001f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1e:	bc08      	pop	{r3}
 8001f20:	469e      	mov	lr, r3
 8001f22:	4770      	bx	lr

08001f24 <_fini>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	bf00      	nop
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr
